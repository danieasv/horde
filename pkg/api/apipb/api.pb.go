// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package apipb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The firmware management settings for a collection can either be "disabled",
// ie there is no firmware management for this collection, "collection";
// devices are managed through the settings on the collection or "device"
// where each device is configured individual.
type CollectionFirmware_FirmwareManagement int32

const (
	CollectionFirmware_unspecified CollectionFirmware_FirmwareManagement = 0
	CollectionFirmware_disabled    CollectionFirmware_FirmwareManagement = 1
	CollectionFirmware_collection  CollectionFirmware_FirmwareManagement = 2
	CollectionFirmware_device      CollectionFirmware_FirmwareManagement = 3
)

var CollectionFirmware_FirmwareManagement_name = map[int32]string{
	0: "unspecified",
	1: "disabled",
	2: "collection",
	3: "device",
}

var CollectionFirmware_FirmwareManagement_value = map[string]int32{
	"unspecified": 0,
	"disabled":    1,
	"collection":  2,
	"device":      3,
}

func (x CollectionFirmware_FirmwareManagement) String() string {
	return proto.EnumName(CollectionFirmware_FirmwareManagement_name, int32(x))
}

func (CollectionFirmware_FirmwareManagement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5, 0}
}

// State of firmware. Note that this field is case sensitive. I'm sorry about
// this
type FirmwareMetadata_FirmwareState int32

const (
	FirmwareMetadata_Unknown      FirmwareMetadata_FirmwareState = 0
	FirmwareMetadata_Current      FirmwareMetadata_FirmwareState = 1
	FirmwareMetadata_Pending      FirmwareMetadata_FirmwareState = 2
	FirmwareMetadata_Initializing FirmwareMetadata_FirmwareState = 3
	FirmwareMetadata_TimedOut     FirmwareMetadata_FirmwareState = 4
	FirmwareMetadata_Error        FirmwareMetadata_FirmwareState = 5
	FirmwareMetadata_Downloading  FirmwareMetadata_FirmwareState = 6
	FirmwareMetadata_Downloaded   FirmwareMetadata_FirmwareState = 7
	FirmwareMetadata_Reverted     FirmwareMetadata_FirmwareState = 8
	FirmwareMetadata_UpdateFailed FirmwareMetadata_FirmwareState = 9
	FirmwareMetadata_Completed    FirmwareMetadata_FirmwareState = 10
)

var FirmwareMetadata_FirmwareState_name = map[int32]string{
	0:  "Unknown",
	1:  "Current",
	2:  "Pending",
	3:  "Initializing",
	4:  "TimedOut",
	5:  "Error",
	6:  "Downloading",
	7:  "Downloaded",
	8:  "Reverted",
	9:  "UpdateFailed",
	10: "Completed",
}

var FirmwareMetadata_FirmwareState_value = map[string]int32{
	"Unknown":      0,
	"Current":      1,
	"Pending":      2,
	"Initializing": 3,
	"TimedOut":     4,
	"Error":        5,
	"Downloading":  6,
	"Downloaded":   7,
	"Reverted":     8,
	"UpdateFailed": 9,
	"Completed":    10,
}

func (x FirmwareMetadata_FirmwareState) String() string {
	return proto.EnumName(FirmwareMetadata_FirmwareState_name, int32(x))
}

func (FirmwareMetadata_FirmwareState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8, 0}
}

type OutputDataMessage_OutputMessageType int32

const (
	OutputDataMessage_unknown   OutputDataMessage_OutputMessageType = 0
	OutputDataMessage_keepalive OutputDataMessage_OutputMessageType = 1
	OutputDataMessage_data      OutputDataMessage_OutputMessageType = 2
)

var OutputDataMessage_OutputMessageType_name = map[int32]string{
	0: "unknown",
	1: "keepalive",
	2: "data",
}

var OutputDataMessage_OutputMessageType_value = map[string]int32{
	"unknown":   0,
	"keepalive": 1,
	"data":      2,
}

func (x OutputDataMessage_OutputMessageType) String() string {
	return proto.EnumName(OutputDataMessage_OutputMessageType_name, int32(x))
}

func (OutputDataMessage_OutputMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14, 0}
}

type Output_Type int32

const (
	// The undefined output type is an invalid type
	Output_undefined Output_Type = 0
	Output_webhook   Output_Type = 1
	Output_udp       Output_Type = 2
	Output_mqtt      Output_Type = 3
	Output_ifttt     Output_Type = 4
)

var Output_Type_name = map[int32]string{
	0: "undefined",
	1: "webhook",
	2: "udp",
	3: "mqtt",
	4: "ifttt",
}

var Output_Type_value = map[string]int32{
	"undefined": 0,
	"webhook":   1,
	"udp":       2,
	"mqtt":      3,
	"ifttt":     4,
}

func (x Output_Type) String() string {
	return proto.EnumName(Output_Type_name, int32(x))
}

func (Output_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16, 0}
}

type ErrorDetails struct {
	Messages             map[string]string `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ErrorDetails) Reset()         { *m = ErrorDetails{} }
func (m *ErrorDetails) String() string { return proto.CompactTextString(m) }
func (*ErrorDetails) ProtoMessage()    {}
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *ErrorDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorDetails.Unmarshal(m, b)
}
func (m *ErrorDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorDetails.Marshal(b, m, deterministic)
}
func (m *ErrorDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorDetails.Merge(m, src)
}
func (m *ErrorDetails) XXX_Size() int {
	return xxx_messageInfo_ErrorDetails.Size(m)
}
func (m *ErrorDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorDetails proto.InternalMessageInfo

func (m *ErrorDetails) GetMessages() map[string]string {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Tag types
type TagResponse struct {
	Tags                 map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TagResponse) Reset()         { *m = TagResponse{} }
func (m *TagResponse) String() string { return proto.CompactTextString(m) }
func (*TagResponse) ProtoMessage()    {}
func (*TagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *TagResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagResponse.Unmarshal(m, b)
}
func (m *TagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagResponse.Marshal(b, m, deterministic)
}
func (m *TagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagResponse.Merge(m, src)
}
func (m *TagResponse) XXX_Size() int {
	return xxx_messageInfo_TagResponse.Size(m)
}
func (m *TagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TagResponse proto.InternalMessageInfo

func (m *TagResponse) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type TagValueResponse struct {
	Value                *wrappers.StringValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TagValueResponse) Reset()         { *m = TagValueResponse{} }
func (m *TagValueResponse) String() string { return proto.CompactTextString(m) }
func (*TagValueResponse) ProtoMessage()    {}
func (*TagValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *TagValueResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagValueResponse.Unmarshal(m, b)
}
func (m *TagValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagValueResponse.Marshal(b, m, deterministic)
}
func (m *TagValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagValueResponse.Merge(m, src)
}
func (m *TagValueResponse) XXX_Size() int {
	return xxx_messageInfo_TagValueResponse.Size(m)
}
func (m *TagValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TagValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TagValueResponse proto.InternalMessageInfo

func (m *TagValueResponse) GetValue() *wrappers.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type UpdateTagRequest struct {
	Identifier           *wrappers.StringValue `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Tags                 map[string]string     `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CollectionId         *wrappers.StringValue `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateTagRequest) Reset()         { *m = UpdateTagRequest{} }
func (m *UpdateTagRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTagRequest) ProtoMessage()    {}
func (*UpdateTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *UpdateTagRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTagRequest.Unmarshal(m, b)
}
func (m *UpdateTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTagRequest.Marshal(b, m, deterministic)
}
func (m *UpdateTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTagRequest.Merge(m, src)
}
func (m *UpdateTagRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateTagRequest.Size(m)
}
func (m *UpdateTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTagRequest proto.InternalMessageInfo

func (m *UpdateTagRequest) GetIdentifier() *wrappers.StringValue {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *UpdateTagRequest) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *UpdateTagRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

type TagRequest struct {
	Identifier           *wrappers.StringValue `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Name                 *wrappers.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value                *wrappers.StringValue `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	CollectionId         *wrappers.StringValue `protobuf:"bytes,4,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TagRequest) Reset()         { *m = TagRequest{} }
func (m *TagRequest) String() string { return proto.CompactTextString(m) }
func (*TagRequest) ProtoMessage()    {}
func (*TagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *TagRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagRequest.Unmarshal(m, b)
}
func (m *TagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagRequest.Marshal(b, m, deterministic)
}
func (m *TagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagRequest.Merge(m, src)
}
func (m *TagRequest) XXX_Size() int {
	return xxx_messageInfo_TagRequest.Size(m)
}
func (m *TagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TagRequest proto.InternalMessageInfo

func (m *TagRequest) GetIdentifier() *wrappers.StringValue {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *TagRequest) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *TagRequest) GetValue() *wrappers.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TagRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

// CollectionFirmware object
type CollectionFirmware struct {
	// The current firmware is the firmware that the devices are currently using.
	CurrentFirmwareId *wrappers.StringValue `protobuf:"bytes,1,opt,name=current_firmware_id,json=currentFirmwareId,proto3" json:"current_firmware_id,omitempty"`
	// The target firmware is set to the desired firmware image for the devices in
	// this collection. If the management is set to "device" this will only be
	// used if the target firmware isn't set on the device itself.
	TargetFirmwareId     *wrappers.StringValue                 `protobuf:"bytes,2,opt,name=target_firmware_id,json=targetFirmwareId,proto3" json:"target_firmware_id,omitempty"`
	Management           CollectionFirmware_FirmwareManagement `protobuf:"varint,3,opt,name=management,proto3,enum=apipb.CollectionFirmware_FirmwareManagement" json:"management,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *CollectionFirmware) Reset()         { *m = CollectionFirmware{} }
func (m *CollectionFirmware) String() string { return proto.CompactTextString(m) }
func (*CollectionFirmware) ProtoMessage()    {}
func (*CollectionFirmware) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *CollectionFirmware) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionFirmware.Unmarshal(m, b)
}
func (m *CollectionFirmware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionFirmware.Marshal(b, m, deterministic)
}
func (m *CollectionFirmware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionFirmware.Merge(m, src)
}
func (m *CollectionFirmware) XXX_Size() int {
	return xxx_messageInfo_CollectionFirmware.Size(m)
}
func (m *CollectionFirmware) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionFirmware.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionFirmware proto.InternalMessageInfo

func (m *CollectionFirmware) GetCurrentFirmwareId() *wrappers.StringValue {
	if m != nil {
		return m.CurrentFirmwareId
	}
	return nil
}

func (m *CollectionFirmware) GetTargetFirmwareId() *wrappers.StringValue {
	if m != nil {
		return m.TargetFirmwareId
	}
	return nil
}

func (m *CollectionFirmware) GetManagement() CollectionFirmware_FirmwareManagement {
	if m != nil {
		return m.Management
	}
	return CollectionFirmware_unspecified
}

// Collection object
type Collection struct {
	// The ID of the collection. This is assigned by the backend.
	CollectionId *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// The team ID that owns the collection. This field is required. When you
	// create new collections the default is to use your private team ID.
	TeamId *wrappers.StringValue `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Field mask settings for the collection
	FieldMask *FieldMask `protobuf:"bytes,3,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Firmware settings for the collection
	Firmware *CollectionFirmware `protobuf:"bytes,4,opt,name=firmware,proto3" json:"firmware,omitempty"`
	// Tags for the collection. Tags are metadata fields that you can assign to
	// the collection.
	Tags                 map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Collection) Reset()         { *m = Collection{} }
func (m *Collection) String() string { return proto.CompactTextString(m) }
func (*Collection) ProtoMessage()    {}
func (*Collection) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *Collection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Collection.Unmarshal(m, b)
}
func (m *Collection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Collection.Marshal(b, m, deterministic)
}
func (m *Collection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Collection.Merge(m, src)
}
func (m *Collection) XXX_Size() int {
	return xxx_messageInfo_Collection.Size(m)
}
func (m *Collection) XXX_DiscardUnknown() {
	xxx_messageInfo_Collection.DiscardUnknown(m)
}

var xxx_messageInfo_Collection proto.InternalMessageInfo

func (m *Collection) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *Collection) GetTeamId() *wrappers.StringValue {
	if m != nil {
		return m.TeamId
	}
	return nil
}

func (m *Collection) GetFieldMask() *FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *Collection) GetFirmware() *CollectionFirmware {
	if m != nil {
		return m.Firmware
	}
	return nil
}

func (m *Collection) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// NetworkMetadata object
type NetworkMetadata struct {
	// The network metadata for devices.
	AllocatedIp          *wrappers.StringValue `protobuf:"bytes,1,opt,name=allocated_ip,json=allocatedIp,proto3" json:"allocated_ip,omitempty"`
	AllocatedAt          *wrappers.Int64Value  `protobuf:"bytes,2,opt,name=allocated_at,json=allocatedAt,proto3" json:"allocated_at,omitempty"`
	CellId               *wrappers.Int64Value  `protobuf:"bytes,3,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NetworkMetadata) Reset()         { *m = NetworkMetadata{} }
func (m *NetworkMetadata) String() string { return proto.CompactTextString(m) }
func (*NetworkMetadata) ProtoMessage()    {}
func (*NetworkMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *NetworkMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkMetadata.Unmarshal(m, b)
}
func (m *NetworkMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkMetadata.Marshal(b, m, deterministic)
}
func (m *NetworkMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkMetadata.Merge(m, src)
}
func (m *NetworkMetadata) XXX_Size() int {
	return xxx_messageInfo_NetworkMetadata.Size(m)
}
func (m *NetworkMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkMetadata proto.InternalMessageInfo

func (m *NetworkMetadata) GetAllocatedIp() *wrappers.StringValue {
	if m != nil {
		return m.AllocatedIp
	}
	return nil
}

func (m *NetworkMetadata) GetAllocatedAt() *wrappers.Int64Value {
	if m != nil {
		return m.AllocatedAt
	}
	return nil
}

func (m *NetworkMetadata) GetCellId() *wrappers.Int64Value {
	if m != nil {
		return m.CellId
	}
	return nil
}

// FirmwareMetadata object
type FirmwareMetadata struct {
	CurrentFirmwareId    *wrappers.StringValue `protobuf:"bytes,1,opt,name=current_firmware_id,json=currentFirmwareId,proto3" json:"current_firmware_id,omitempty"`
	TargetFirmwareId     *wrappers.StringValue `protobuf:"bytes,2,opt,name=target_firmware_id,json=targetFirmwareId,proto3" json:"target_firmware_id,omitempty"`
	FirmwareVersion      *wrappers.StringValue `protobuf:"bytes,3,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	SerialNumber         *wrappers.StringValue `protobuf:"bytes,4,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	ModelNumber          *wrappers.StringValue `protobuf:"bytes,5,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	Manufacturer         *wrappers.StringValue `protobuf:"bytes,6,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	State                *wrappers.StringValue `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	StateMessage         *wrappers.StringValue `protobuf:"bytes,8,opt,name=state_message,json=stateMessage,proto3" json:"state_message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FirmwareMetadata) Reset()         { *m = FirmwareMetadata{} }
func (m *FirmwareMetadata) String() string { return proto.CompactTextString(m) }
func (*FirmwareMetadata) ProtoMessage()    {}
func (*FirmwareMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *FirmwareMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirmwareMetadata.Unmarshal(m, b)
}
func (m *FirmwareMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirmwareMetadata.Marshal(b, m, deterministic)
}
func (m *FirmwareMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirmwareMetadata.Merge(m, src)
}
func (m *FirmwareMetadata) XXX_Size() int {
	return xxx_messageInfo_FirmwareMetadata.Size(m)
}
func (m *FirmwareMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_FirmwareMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_FirmwareMetadata proto.InternalMessageInfo

func (m *FirmwareMetadata) GetCurrentFirmwareId() *wrappers.StringValue {
	if m != nil {
		return m.CurrentFirmwareId
	}
	return nil
}

func (m *FirmwareMetadata) GetTargetFirmwareId() *wrappers.StringValue {
	if m != nil {
		return m.TargetFirmwareId
	}
	return nil
}

func (m *FirmwareMetadata) GetFirmwareVersion() *wrappers.StringValue {
	if m != nil {
		return m.FirmwareVersion
	}
	return nil
}

func (m *FirmwareMetadata) GetSerialNumber() *wrappers.StringValue {
	if m != nil {
		return m.SerialNumber
	}
	return nil
}

func (m *FirmwareMetadata) GetModelNumber() *wrappers.StringValue {
	if m != nil {
		return m.ModelNumber
	}
	return nil
}

func (m *FirmwareMetadata) GetManufacturer() *wrappers.StringValue {
	if m != nil {
		return m.Manufacturer
	}
	return nil
}

func (m *FirmwareMetadata) GetState() *wrappers.StringValue {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *FirmwareMetadata) GetStateMessage() *wrappers.StringValue {
	if m != nil {
		return m.StateMessage
	}
	return nil
}

// DeviceMetadata request object
type DeviceMetadata struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceMetadata) Reset()         { *m = DeviceMetadata{} }
func (m *DeviceMetadata) String() string { return proto.CompactTextString(m) }
func (*DeviceMetadata) ProtoMessage()    {}
func (*DeviceMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *DeviceMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceMetadata.Unmarshal(m, b)
}
func (m *DeviceMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceMetadata.Marshal(b, m, deterministic)
}
func (m *DeviceMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceMetadata.Merge(m, src)
}
func (m *DeviceMetadata) XXX_Size() int {
	return xxx_messageInfo_DeviceMetadata.Size(m)
}
func (m *DeviceMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceMetadata proto.InternalMessageInfo

// Device object
type Device struct {
	// The device ID is assigned by the backend.
	DeviceId *wrappers.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// This is the containing collection
	CollectionId *wrappers.StringValue `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// The IMSI is the unique ID for the (e|nu|whatever)SIM card on your device.
	// This is the primary identifier for your device on the network.
	Imsi *wrappers.StringValue `protobuf:"bytes,3,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// The IMEI number is the unique ID for your hardware as seen by the network.
	// Obviously you might have a completely different view on things.
	Imei *wrappers.StringValue `protobuf:"bytes,4,opt,name=imei,proto3" json:"imei,omitempty"`
	// Tags are metadata for the device that you can set. These are just
	// strings.
	Tags map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Network metadata for the device
	Network *NetworkMetadata `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	// Firmware metadata for the device
	Firmware             *FirmwareMetadata `protobuf:"bytes,7,opt,name=firmware,proto3" json:"firmware,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetDeviceId() *wrappers.StringValue {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *Device) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *Device) GetImsi() *wrappers.StringValue {
	if m != nil {
		return m.Imsi
	}
	return nil
}

func (m *Device) GetImei() *wrappers.StringValue {
	if m != nil {
		return m.Imei
	}
	return nil
}

func (m *Device) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Device) GetNetwork() *NetworkMetadata {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *Device) GetFirmware() *FirmwareMetadata {
	if m != nil {
		return m.Firmware
	}
	return nil
}

// Updating the device
type UpdateDeviceRequest struct {
	ExistingCollectionId *wrappers.StringValue `protobuf:"bytes,1,opt,name=existing_collection_id,json=existingCollectionId,proto3" json:"existing_collection_id,omitempty"`
	DeviceId             *wrappers.StringValue `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The collection id for the device. This field is optional and can be
	// omitted if the collection id isn't changed. When changing to a new
	// collection you must be an owner of the other collection, ie an
	// administrator of the team that owns the new collection.
	CollectionId *wrappers.StringValue `protobuf:"bytes,3,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// The IMSI is the unique ID for the (e|nu|whatever)SIM card on your device.
	// This is the primary identifier for your device on the network.
	Imsi *wrappers.StringValue `protobuf:"bytes,4,opt,name=imsi,proto3" json:"imsi,omitempty"`
	// The IMEI number is the unique ID for your hardware as seen by the network.
	// Obviously you might have a completely different view on things.
	Imei *wrappers.StringValue `protobuf:"bytes,5,opt,name=imei,proto3" json:"imei,omitempty"`
	// Tags are metadata for the device that you can set. These are just
	// strings.
	Tags map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Firmware metadata for the device
	Firmware             *FirmwareMetadata `protobuf:"bytes,7,opt,name=firmware,proto3" json:"firmware,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateDeviceRequest) Reset()         { *m = UpdateDeviceRequest{} }
func (m *UpdateDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDeviceRequest) ProtoMessage()    {}
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

func (m *UpdateDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDeviceRequest.Unmarshal(m, b)
}
func (m *UpdateDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDeviceRequest.Marshal(b, m, deterministic)
}
func (m *UpdateDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDeviceRequest.Merge(m, src)
}
func (m *UpdateDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateDeviceRequest.Size(m)
}
func (m *UpdateDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDeviceRequest proto.InternalMessageInfo

func (m *UpdateDeviceRequest) GetExistingCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.ExistingCollectionId
	}
	return nil
}

func (m *UpdateDeviceRequest) GetDeviceId() *wrappers.StringValue {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *UpdateDeviceRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *UpdateDeviceRequest) GetImsi() *wrappers.StringValue {
	if m != nil {
		return m.Imsi
	}
	return nil
}

func (m *UpdateDeviceRequest) GetImei() *wrappers.StringValue {
	if m != nil {
		return m.Imei
	}
	return nil
}

func (m *UpdateDeviceRequest) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *UpdateDeviceRequest) GetFirmware() *FirmwareMetadata {
	if m != nil {
		return m.Firmware
	}
	return nil
}

type UDPMetadata struct {
	LocalPort            *wrappers.Int32Value `protobuf:"bytes,1,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	RemotePort           *wrappers.Int32Value `protobuf:"bytes,2,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UDPMetadata) Reset()         { *m = UDPMetadata{} }
func (m *UDPMetadata) String() string { return proto.CompactTextString(m) }
func (*UDPMetadata) ProtoMessage()    {}
func (*UDPMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}

func (m *UDPMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UDPMetadata.Unmarshal(m, b)
}
func (m *UDPMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UDPMetadata.Marshal(b, m, deterministic)
}
func (m *UDPMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UDPMetadata.Merge(m, src)
}
func (m *UDPMetadata) XXX_Size() int {
	return xxx_messageInfo_UDPMetadata.Size(m)
}
func (m *UDPMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_UDPMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_UDPMetadata proto.InternalMessageInfo

func (m *UDPMetadata) GetLocalPort() *wrappers.Int32Value {
	if m != nil {
		return m.LocalPort
	}
	return nil
}

func (m *UDPMetadata) GetRemotePort() *wrappers.Int32Value {
	if m != nil {
		return m.RemotePort
	}
	return nil
}

type CoAPMetadata struct {
	Code                 *wrappers.StringValue `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Path                 *wrappers.StringValue `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CoAPMetadata) Reset()         { *m = CoAPMetadata{} }
func (m *CoAPMetadata) String() string { return proto.CompactTextString(m) }
func (*CoAPMetadata) ProtoMessage()    {}
func (*CoAPMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}

func (m *CoAPMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoAPMetadata.Unmarshal(m, b)
}
func (m *CoAPMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoAPMetadata.Marshal(b, m, deterministic)
}
func (m *CoAPMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoAPMetadata.Merge(m, src)
}
func (m *CoAPMetadata) XXX_Size() int {
	return xxx_messageInfo_CoAPMetadata.Size(m)
}
func (m *CoAPMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CoAPMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CoAPMetadata proto.InternalMessageInfo

func (m *CoAPMetadata) GetCode() *wrappers.StringValue {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *CoAPMetadata) GetPath() *wrappers.StringValue {
	if m != nil {
		return m.Path
	}
	return nil
}

// The output data message contains payload plus metadata for a payload received
// from a device.
type OutputDataMessage struct {
	Type    OutputDataMessage_OutputMessageType `protobuf:"varint,1,opt,name=type,proto3,enum=apipb.OutputDataMessage_OutputMessageType" json:"type,omitempty"`
	Device  *Device                             `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Payload []byte                              `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// This *will* roll over in a few years but we'll handle it by creating
	// new clients. The current nbiot-client doesn't like strings for int64
	Received             *wrappers.Int32Value `protobuf:"bytes,4,opt,name=received,proto3" json:"received,omitempty"`
	Transport            string               `protobuf:"bytes,5,opt,name=transport,proto3" json:"transport,omitempty"`
	UdpMetaData          *UDPMetadata         `protobuf:"bytes,6,opt,name=udp_meta_data,json=udpMetaData,proto3" json:"udp_meta_data,omitempty"`
	CoapMetaData         *CoAPMetadata        `protobuf:"bytes,7,opt,name=coap_meta_data,json=coapMetaData,proto3" json:"coap_meta_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *OutputDataMessage) Reset()         { *m = OutputDataMessage{} }
func (m *OutputDataMessage) String() string { return proto.CompactTextString(m) }
func (*OutputDataMessage) ProtoMessage()    {}
func (*OutputDataMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}

func (m *OutputDataMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputDataMessage.Unmarshal(m, b)
}
func (m *OutputDataMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputDataMessage.Marshal(b, m, deterministic)
}
func (m *OutputDataMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputDataMessage.Merge(m, src)
}
func (m *OutputDataMessage) XXX_Size() int {
	return xxx_messageInfo_OutputDataMessage.Size(m)
}
func (m *OutputDataMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputDataMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OutputDataMessage proto.InternalMessageInfo

func (m *OutputDataMessage) GetType() OutputDataMessage_OutputMessageType {
	if m != nil {
		return m.Type
	}
	return OutputDataMessage_unknown
}

func (m *OutputDataMessage) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *OutputDataMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *OutputDataMessage) GetReceived() *wrappers.Int32Value {
	if m != nil {
		return m.Received
	}
	return nil
}

func (m *OutputDataMessage) GetTransport() string {
	if m != nil {
		return m.Transport
	}
	return ""
}

func (m *OutputDataMessage) GetUdpMetaData() *UDPMetadata {
	if m != nil {
		return m.UdpMetaData
	}
	return nil
}

func (m *OutputDataMessage) GetCoapMetaData() *CoAPMetadata {
	if m != nil {
		return m.CoapMetaData
	}
	return nil
}

// Output configuration.
type OutputConfig struct {
	// Webhook configuration: URL for host
	Url *wrappers.StringValue `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Webhook configuration: Basic authorization user name
	BasicAuthUser *wrappers.StringValue `protobuf:"bytes,2,opt,name=basic_auth_user,json=basicAuthUser,proto3" json:"basic_auth_user,omitempty"`
	// Webhook configuration: Basic authorization password
	BasicAuthPass *wrappers.StringValue `protobuf:"bytes,3,opt,name=basic_auth_pass,json=basicAuthPass,proto3" json:"basic_auth_pass,omitempty"`
	// Webhook configuration: Custom header name for request
	CustomHeaderName *wrappers.StringValue `protobuf:"bytes,4,opt,name=custom_header_name,json=customHeaderName,proto3" json:"custom_header_name,omitempty"`
	// Webhook configuration: Custom header value
	CustomHeaderValue *wrappers.StringValue `protobuf:"bytes,5,opt,name=custom_header_value,json=customHeaderValue,proto3" json:"custom_header_value,omitempty"`
	// UDP configuration: Host name
	Host *wrappers.StringValue `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`
	// UDP configuration: Port number
	Port *wrappers.Int32Value `protobuf:"bytes,7,opt,name=port,proto3" json:"port,omitempty"`
	// IFTTT configuration: Key to use
	Key *wrappers.StringValue `protobuf:"bytes,8,opt,name=key,proto3" json:"key,omitempty"`
	// IFTTT configuration: Event name
	EventName *wrappers.StringValue `protobuf:"bytes,9,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	// IFTTT configuration: Send payload as is. Base64 is the default
	AsIsPayload *wrappers.BoolValue `protobuf:"bytes,10,opt,name=as_is_payload,json=asIsPayload,proto3" json:"as_is_payload,omitempty"`
	// MQTT configuration: Name of endpoint (use tcp:// for unencrypted, tls://
	// for TLS. TLS is the default)
	Endpoint *wrappers.StringValue `protobuf:"bytes,11,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// MQTT configuration: Disable certificate checks. Default is off.
	DisableCertCheck *wrappers.BoolValue `protobuf:"bytes,12,opt,name=disable_cert_check,json=disableCertCheck,proto3" json:"disable_cert_check,omitempty"`
	// MQTT configuration: Username for MQTT broker
	Username *wrappers.StringValue `protobuf:"bytes,13,opt,name=username,proto3" json:"username,omitempty"`
	// MQTT configuration: Password for broker
	Password *wrappers.StringValue `protobuf:"bytes,14,opt,name=password,proto3" json:"password,omitempty"`
	// MQTT configuration: Client ID
	ClientId *wrappers.StringValue `protobuf:"bytes,15,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// MQTT configuration: Topic name
	TopicName            *wrappers.StringValue `protobuf:"bytes,16,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *OutputConfig) Reset()         { *m = OutputConfig{} }
func (m *OutputConfig) String() string { return proto.CompactTextString(m) }
func (*OutputConfig) ProtoMessage()    {}
func (*OutputConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}

func (m *OutputConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputConfig.Unmarshal(m, b)
}
func (m *OutputConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputConfig.Marshal(b, m, deterministic)
}
func (m *OutputConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputConfig.Merge(m, src)
}
func (m *OutputConfig) XXX_Size() int {
	return xxx_messageInfo_OutputConfig.Size(m)
}
func (m *OutputConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputConfig.DiscardUnknown(m)
}

var xxx_messageInfo_OutputConfig proto.InternalMessageInfo

func (m *OutputConfig) GetUrl() *wrappers.StringValue {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *OutputConfig) GetBasicAuthUser() *wrappers.StringValue {
	if m != nil {
		return m.BasicAuthUser
	}
	return nil
}

func (m *OutputConfig) GetBasicAuthPass() *wrappers.StringValue {
	if m != nil {
		return m.BasicAuthPass
	}
	return nil
}

func (m *OutputConfig) GetCustomHeaderName() *wrappers.StringValue {
	if m != nil {
		return m.CustomHeaderName
	}
	return nil
}

func (m *OutputConfig) GetCustomHeaderValue() *wrappers.StringValue {
	if m != nil {
		return m.CustomHeaderValue
	}
	return nil
}

func (m *OutputConfig) GetHost() *wrappers.StringValue {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *OutputConfig) GetPort() *wrappers.Int32Value {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *OutputConfig) GetKey() *wrappers.StringValue {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *OutputConfig) GetEventName() *wrappers.StringValue {
	if m != nil {
		return m.EventName
	}
	return nil
}

func (m *OutputConfig) GetAsIsPayload() *wrappers.BoolValue {
	if m != nil {
		return m.AsIsPayload
	}
	return nil
}

func (m *OutputConfig) GetEndpoint() *wrappers.StringValue {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *OutputConfig) GetDisableCertCheck() *wrappers.BoolValue {
	if m != nil {
		return m.DisableCertCheck
	}
	return nil
}

func (m *OutputConfig) GetUsername() *wrappers.StringValue {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *OutputConfig) GetPassword() *wrappers.StringValue {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *OutputConfig) GetClientId() *wrappers.StringValue {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *OutputConfig) GetTopicName() *wrappers.StringValue {
	if m != nil {
		return m.TopicName
	}
	return nil
}

// Output resource. Configuration
type Output struct {
	OutputId             *wrappers.StringValue `protobuf:"bytes,1,opt,name=output_id,json=outputId,proto3" json:"output_id,omitempty"`
	CollectionId         *wrappers.StringValue `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Type                 Output_Type           `protobuf:"varint,3,opt,name=type,proto3,enum=apipb.Output_Type" json:"type,omitempty"`
	Config               *OutputConfig         `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Enabled              *wrappers.BoolValue   `protobuf:"bytes,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Tags                 map[string]string     `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}

func (m *Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Output.Unmarshal(m, b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Output.Marshal(b, m, deterministic)
}
func (m *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(m, src)
}
func (m *Output) XXX_Size() int {
	return xxx_messageInfo_Output.Size(m)
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func (m *Output) GetOutputId() *wrappers.StringValue {
	if m != nil {
		return m.OutputId
	}
	return nil
}

func (m *Output) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *Output) GetType() Output_Type {
	if m != nil {
		return m.Type
	}
	return Output_undefined
}

func (m *Output) GetConfig() *OutputConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Output) GetEnabled() *wrappers.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *Output) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Token struct {
	Resource             *wrappers.StringValue `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Write                *wrappers.BoolValue   `protobuf:"bytes,2,opt,name=write,proto3" json:"write,omitempty"`
	Token                *wrappers.StringValue `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Tags                 map[string]string     `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}

func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetResource() *wrappers.StringValue {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *Token) GetWrite() *wrappers.BoolValue {
	if m != nil {
		return m.Write
	}
	return nil
}

func (m *Token) GetToken() *wrappers.StringValue {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Token) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Member struct {
	UserId               *wrappers.StringValue `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TeamId               *wrappers.StringValue `protobuf:"bytes,2,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Role                 *wrappers.StringValue `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	Name                 *wrappers.StringValue `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Email                *wrappers.StringValue `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Phone                *wrappers.StringValue `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	AvatarUrl            *wrappers.StringValue `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	ConnectId            *wrappers.StringValue `protobuf:"bytes,8,opt,name=connect_id,json=connectId,proto3" json:"connect_id,omitempty"`
	GitHubLogin          *wrappers.StringValue `protobuf:"bytes,9,opt,name=git_hub_login,json=gitHubLogin,proto3" json:"git_hub_login,omitempty"`
	VerifiedEmail        *wrappers.BoolValue   `protobuf:"bytes,10,opt,name=verified_email,json=verifiedEmail,proto3" json:"verified_email,omitempty"`
	VerifiedPhone        *wrappers.BoolValue   `protobuf:"bytes,11,opt,name=verified_phone,json=verifiedPhone,proto3" json:"verified_phone,omitempty"`
	AuthType             *wrappers.StringValue `protobuf:"bytes,12,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Member) Reset()         { *m = Member{} }
func (m *Member) String() string { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()    {}
func (*Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}

func (m *Member) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Member.Unmarshal(m, b)
}
func (m *Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Member.Marshal(b, m, deterministic)
}
func (m *Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Member.Merge(m, src)
}
func (m *Member) XXX_Size() int {
	return xxx_messageInfo_Member.Size(m)
}
func (m *Member) XXX_DiscardUnknown() {
	xxx_messageInfo_Member.DiscardUnknown(m)
}

var xxx_messageInfo_Member proto.InternalMessageInfo

func (m *Member) GetUserId() *wrappers.StringValue {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *Member) GetTeamId() *wrappers.StringValue {
	if m != nil {
		return m.TeamId
	}
	return nil
}

func (m *Member) GetRole() *wrappers.StringValue {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *Member) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Member) GetEmail() *wrappers.StringValue {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *Member) GetPhone() *wrappers.StringValue {
	if m != nil {
		return m.Phone
	}
	return nil
}

func (m *Member) GetAvatarUrl() *wrappers.StringValue {
	if m != nil {
		return m.AvatarUrl
	}
	return nil
}

func (m *Member) GetConnectId() *wrappers.StringValue {
	if m != nil {
		return m.ConnectId
	}
	return nil
}

func (m *Member) GetGitHubLogin() *wrappers.StringValue {
	if m != nil {
		return m.GitHubLogin
	}
	return nil
}

func (m *Member) GetVerifiedEmail() *wrappers.BoolValue {
	if m != nil {
		return m.VerifiedEmail
	}
	return nil
}

func (m *Member) GetVerifiedPhone() *wrappers.BoolValue {
	if m != nil {
		return m.VerifiedPhone
	}
	return nil
}

func (m *Member) GetAuthType() *wrappers.StringValue {
	if m != nil {
		return m.AuthType
	}
	return nil
}

type MemberList struct {
	Members              []*Member `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MemberList) Reset()         { *m = MemberList{} }
func (m *MemberList) String() string { return proto.CompactTextString(m) }
func (*MemberList) ProtoMessage()    {}
func (*MemberList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}

func (m *MemberList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemberList.Unmarshal(m, b)
}
func (m *MemberList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemberList.Marshal(b, m, deterministic)
}
func (m *MemberList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberList.Merge(m, src)
}
func (m *MemberList) XXX_Size() int {
	return xxx_messageInfo_MemberList.Size(m)
}
func (m *MemberList) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberList.DiscardUnknown(m)
}

var xxx_messageInfo_MemberList proto.InternalMessageInfo

func (m *MemberList) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type Team struct {
	TeamId               *wrappers.StringValue `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Tags                 map[string]string     `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Members              []*Member             `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}

func (m *Team) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Team.Unmarshal(m, b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Team.Marshal(b, m, deterministic)
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return xxx_messageInfo_Team.Size(m)
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetTeamId() *wrappers.StringValue {
	if m != nil {
		return m.TeamId
	}
	return nil
}

func (m *Team) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Team) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type Firmware struct {
	ImageId              *wrappers.StringValue `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	Version              *wrappers.StringValue `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Filename             *wrappers.StringValue `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	Sha256               *wrappers.StringValue `protobuf:"bytes,4,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Length               *wrappers.Int32Value  `protobuf:"bytes,5,opt,name=length,proto3" json:"length,omitempty"`
	CollectionId         *wrappers.StringValue `protobuf:"bytes,6,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Created              *wrappers.Int64Value  `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	Tags                 map[string]string     `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Firmware) Reset()         { *m = Firmware{} }
func (m *Firmware) String() string { return proto.CompactTextString(m) }
func (*Firmware) ProtoMessage()    {}
func (*Firmware) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}

func (m *Firmware) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Firmware.Unmarshal(m, b)
}
func (m *Firmware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Firmware.Marshal(b, m, deterministic)
}
func (m *Firmware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Firmware.Merge(m, src)
}
func (m *Firmware) XXX_Size() int {
	return xxx_messageInfo_Firmware.Size(m)
}
func (m *Firmware) XXX_DiscardUnknown() {
	xxx_messageInfo_Firmware.DiscardUnknown(m)
}

var xxx_messageInfo_Firmware proto.InternalMessageInfo

func (m *Firmware) GetImageId() *wrappers.StringValue {
	if m != nil {
		return m.ImageId
	}
	return nil
}

func (m *Firmware) GetVersion() *wrappers.StringValue {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Firmware) GetFilename() *wrappers.StringValue {
	if m != nil {
		return m.Filename
	}
	return nil
}

func (m *Firmware) GetSha256() *wrappers.StringValue {
	if m != nil {
		return m.Sha256
	}
	return nil
}

func (m *Firmware) GetLength() *wrappers.Int32Value {
	if m != nil {
		return m.Length
	}
	return nil
}

func (m *Firmware) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *Firmware) GetCreated() *wrappers.Int64Value {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Firmware) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Consider splitting into two objects, one for device, one for collection
type ListMessagesRequest struct {
	// The collection to query
	CollectionId *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// The device ID. Ignored for requests on collection messages
	DeviceId *wrappers.StringValue `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The maximum number of messages to return. The default is 50. Absolute max
	// is 250.
	Limit *wrappers.Int32Value `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Start time (in milliseconds since epoch)
	Since *wrappers.Int64Value `protobuf:"bytes,4,opt,name=since,proto3" json:"since,omitempty"`
	// End time (in milliseconds since epoch)
	Until                *wrappers.Int64Value `protobuf:"bytes,5,opt,name=until,proto3" json:"until,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListMessagesRequest) Reset()         { *m = ListMessagesRequest{} }
func (m *ListMessagesRequest) String() string { return proto.CompactTextString(m) }
func (*ListMessagesRequest) ProtoMessage()    {}
func (*ListMessagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}

func (m *ListMessagesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMessagesRequest.Unmarshal(m, b)
}
func (m *ListMessagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMessagesRequest.Marshal(b, m, deterministic)
}
func (m *ListMessagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMessagesRequest.Merge(m, src)
}
func (m *ListMessagesRequest) XXX_Size() int {
	return xxx_messageInfo_ListMessagesRequest.Size(m)
}
func (m *ListMessagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMessagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMessagesRequest proto.InternalMessageInfo

func (m *ListMessagesRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *ListMessagesRequest) GetDeviceId() *wrappers.StringValue {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *ListMessagesRequest) GetLimit() *wrappers.Int32Value {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *ListMessagesRequest) GetSince() *wrappers.Int64Value {
	if m != nil {
		return m.Since
	}
	return nil
}

func (m *ListMessagesRequest) GetUntil() *wrappers.Int64Value {
	if m != nil {
		return m.Until
	}
	return nil
}

type ListMessagesResponse struct {
	Messages             []*OutputDataMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListMessagesResponse) Reset()         { *m = ListMessagesResponse{} }
func (m *ListMessagesResponse) String() string { return proto.CompactTextString(m) }
func (*ListMessagesResponse) ProtoMessage()    {}
func (*ListMessagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}

func (m *ListMessagesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMessagesResponse.Unmarshal(m, b)
}
func (m *ListMessagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMessagesResponse.Marshal(b, m, deterministic)
}
func (m *ListMessagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMessagesResponse.Merge(m, src)
}
func (m *ListMessagesResponse) XXX_Size() int {
	return xxx_messageInfo_ListMessagesResponse.Size(m)
}
func (m *ListMessagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMessagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMessagesResponse proto.InternalMessageInfo

func (m *ListMessagesResponse) GetMessages() []*OutputDataMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Your user profile.
// You can change the contents of the user profile via the log in service you
// are using.
type UserProfile struct {
	Email                *wrappers.StringValue `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Phone                *wrappers.StringValue `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	VerifiedEmail        *wrappers.BoolValue   `protobuf:"bytes,3,opt,name=verified_email,json=verifiedEmail,proto3" json:"verified_email,omitempty"`
	VerifiedPhone        *wrappers.BoolValue   `protobuf:"bytes,4,opt,name=verified_phone,json=verifiedPhone,proto3" json:"verified_phone,omitempty"`
	AvatarUrl            *wrappers.StringValue `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Name                 *wrappers.StringValue `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	ProfileUrl           *wrappers.StringValue `protobuf:"bytes,7,opt,name=profile_url,json=profileUrl,proto3" json:"profile_url,omitempty"`
	GithubLogin          *wrappers.StringValue `protobuf:"bytes,82,opt,name=github_login,json=githubLogin,proto3" json:"github_login,omitempty"`
	Provider             *wrappers.StringValue `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"`
	LogoutUrl            *wrappers.StringValue `protobuf:"bytes,10,opt,name=logout_url,json=logoutUrl,proto3" json:"logout_url,omitempty"`
	ConnectId            *wrappers.StringValue `protobuf:"bytes,11,opt,name=connect_id,json=connectId,proto3" json:"connect_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UserProfile) Reset()         { *m = UserProfile{} }
func (m *UserProfile) String() string { return proto.CompactTextString(m) }
func (*UserProfile) ProtoMessage()    {}
func (*UserProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}

func (m *UserProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserProfile.Unmarshal(m, b)
}
func (m *UserProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserProfile.Marshal(b, m, deterministic)
}
func (m *UserProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserProfile.Merge(m, src)
}
func (m *UserProfile) XXX_Size() int {
	return xxx_messageInfo_UserProfile.Size(m)
}
func (m *UserProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_UserProfile.DiscardUnknown(m)
}

var xxx_messageInfo_UserProfile proto.InternalMessageInfo

func (m *UserProfile) GetEmail() *wrappers.StringValue {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *UserProfile) GetPhone() *wrappers.StringValue {
	if m != nil {
		return m.Phone
	}
	return nil
}

func (m *UserProfile) GetVerifiedEmail() *wrappers.BoolValue {
	if m != nil {
		return m.VerifiedEmail
	}
	return nil
}

func (m *UserProfile) GetVerifiedPhone() *wrappers.BoolValue {
	if m != nil {
		return m.VerifiedPhone
	}
	return nil
}

func (m *UserProfile) GetAvatarUrl() *wrappers.StringValue {
	if m != nil {
		return m.AvatarUrl
	}
	return nil
}

func (m *UserProfile) GetName() *wrappers.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *UserProfile) GetProfileUrl() *wrappers.StringValue {
	if m != nil {
		return m.ProfileUrl
	}
	return nil
}

func (m *UserProfile) GetGithubLogin() *wrappers.StringValue {
	if m != nil {
		return m.GithubLogin
	}
	return nil
}

func (m *UserProfile) GetProvider() *wrappers.StringValue {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *UserProfile) GetLogoutUrl() *wrappers.StringValue {
	if m != nil {
		return m.LogoutUrl
	}
	return nil
}

func (m *UserProfile) GetConnectId() *wrappers.StringValue {
	if m != nil {
		return m.ConnectId
	}
	return nil
}

// Delete a collection
type DeleteCollectionRequest struct {
	// The ID of the collection you want to delete
	CollectionId         *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DeleteCollectionRequest) Reset()         { *m = DeleteCollectionRequest{} }
func (m *DeleteCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCollectionRequest) ProtoMessage()    {}
func (*DeleteCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}

func (m *DeleteCollectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCollectionRequest.Unmarshal(m, b)
}
func (m *DeleteCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCollectionRequest.Marshal(b, m, deterministic)
}
func (m *DeleteCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCollectionRequest.Merge(m, src)
}
func (m *DeleteCollectionRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteCollectionRequest.Size(m)
}
func (m *DeleteCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCollectionRequest proto.InternalMessageInfo

func (m *DeleteCollectionRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

// List the collection you have access to
type ListCollectionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCollectionRequest) Reset()         { *m = ListCollectionRequest{} }
func (m *ListCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*ListCollectionRequest) ProtoMessage()    {}
func (*ListCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}

func (m *ListCollectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCollectionRequest.Unmarshal(m, b)
}
func (m *ListCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCollectionRequest.Marshal(b, m, deterministic)
}
func (m *ListCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCollectionRequest.Merge(m, src)
}
func (m *ListCollectionRequest) XXX_Size() int {
	return xxx_messageInfo_ListCollectionRequest.Size(m)
}
func (m *ListCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCollectionRequest proto.InternalMessageInfo

// Collection list. The list contains all the collections you have access to.
type ListCollectionResponse struct {
	Collections          []*Collection `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListCollectionResponse) Reset()         { *m = ListCollectionResponse{} }
func (m *ListCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*ListCollectionResponse) ProtoMessage()    {}
func (*ListCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}

func (m *ListCollectionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCollectionResponse.Unmarshal(m, b)
}
func (m *ListCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCollectionResponse.Marshal(b, m, deterministic)
}
func (m *ListCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCollectionResponse.Merge(m, src)
}
func (m *ListCollectionResponse) XXX_Size() int {
	return xxx_messageInfo_ListCollectionResponse.Size(m)
}
func (m *ListCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCollectionResponse proto.InternalMessageInfo

func (m *ListCollectionResponse) GetCollections() []*Collection {
	if m != nil {
		return m.Collections
	}
	return nil
}

// Retrieve a single collection
type RetrieveCollectionRequest struct {
	// The collection ID of the collection you are requesting
	CollectionId         *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RetrieveCollectionRequest) Reset()         { *m = RetrieveCollectionRequest{} }
func (m *RetrieveCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*RetrieveCollectionRequest) ProtoMessage()    {}
func (*RetrieveCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{28}
}

func (m *RetrieveCollectionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RetrieveCollectionRequest.Unmarshal(m, b)
}
func (m *RetrieveCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RetrieveCollectionRequest.Marshal(b, m, deterministic)
}
func (m *RetrieveCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveCollectionRequest.Merge(m, src)
}
func (m *RetrieveCollectionRequest) XXX_Size() int {
	return xxx_messageInfo_RetrieveCollectionRequest.Size(m)
}
func (m *RetrieveCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveCollectionRequest proto.InternalMessageInfo

func (m *RetrieveCollectionRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

type MessageStreamRequest struct {
	CollectionId         *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	DeviceId             *wrappers.StringValue `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MessageStreamRequest) Reset()         { *m = MessageStreamRequest{} }
func (m *MessageStreamRequest) String() string { return proto.CompactTextString(m) }
func (*MessageStreamRequest) ProtoMessage()    {}
func (*MessageStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{29}
}

func (m *MessageStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageStreamRequest.Unmarshal(m, b)
}
func (m *MessageStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageStreamRequest.Marshal(b, m, deterministic)
}
func (m *MessageStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageStreamRequest.Merge(m, src)
}
func (m *MessageStreamRequest) XXX_Size() int {
	return xxx_messageInfo_MessageStreamRequest.Size(m)
}
func (m *MessageStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MessageStreamRequest proto.InternalMessageInfo

func (m *MessageStreamRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *MessageStreamRequest) GetDeviceId() *wrappers.StringValue {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

type DeviceRequest struct {
	CollectionId         *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	DeviceId             *wrappers.StringValue `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DeviceRequest) Reset()         { *m = DeviceRequest{} }
func (m *DeviceRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceRequest) ProtoMessage()    {}
func (*DeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{30}
}

func (m *DeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceRequest.Unmarshal(m, b)
}
func (m *DeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceRequest.Marshal(b, m, deterministic)
}
func (m *DeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRequest.Merge(m, src)
}
func (m *DeviceRequest) XXX_Size() int {
	return xxx_messageInfo_DeviceRequest.Size(m)
}
func (m *DeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRequest proto.InternalMessageInfo

func (m *DeviceRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *DeviceRequest) GetDeviceId() *wrappers.StringValue {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

type ListDevicesRequest struct {
	CollectionId         *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListDevicesRequest) Reset()         { *m = ListDevicesRequest{} }
func (m *ListDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*ListDevicesRequest) ProtoMessage()    {}
func (*ListDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{31}
}

func (m *ListDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDevicesRequest.Unmarshal(m, b)
}
func (m *ListDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDevicesRequest.Marshal(b, m, deterministic)
}
func (m *ListDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesRequest.Merge(m, src)
}
func (m *ListDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_ListDevicesRequest.Size(m)
}
func (m *ListDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesRequest proto.InternalMessageInfo

func (m *ListDevicesRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

type ListDevicesResponse struct {
	Devices              []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListDevicesResponse) Reset()         { *m = ListDevicesResponse{} }
func (m *ListDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*ListDevicesResponse) ProtoMessage()    {}
func (*ListDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{32}
}

func (m *ListDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDevicesResponse.Unmarshal(m, b)
}
func (m *ListDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDevicesResponse.Marshal(b, m, deterministic)
}
func (m *ListDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesResponse.Merge(m, src)
}
func (m *ListDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_ListDevicesResponse.Size(m)
}
func (m *ListDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesResponse proto.InternalMessageInfo

func (m *ListDevicesResponse) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

type ClearFirmwareErrorResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearFirmwareErrorResponse) Reset()         { *m = ClearFirmwareErrorResponse{} }
func (m *ClearFirmwareErrorResponse) String() string { return proto.CompactTextString(m) }
func (*ClearFirmwareErrorResponse) ProtoMessage()    {}
func (*ClearFirmwareErrorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{33}
}

func (m *ClearFirmwareErrorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClearFirmwareErrorResponse.Unmarshal(m, b)
}
func (m *ClearFirmwareErrorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClearFirmwareErrorResponse.Marshal(b, m, deterministic)
}
func (m *ClearFirmwareErrorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearFirmwareErrorResponse.Merge(m, src)
}
func (m *ClearFirmwareErrorResponse) XXX_Size() int {
	return xxx_messageInfo_ClearFirmwareErrorResponse.Size(m)
}
func (m *ClearFirmwareErrorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearFirmwareErrorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClearFirmwareErrorResponse proto.InternalMessageInfo

// Send a message to one or more devices
type SendMessageRequest struct {
	CollectionId *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	DeviceId     *wrappers.StringValue `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Port         *wrappers.Int32Value  `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Payload      []byte                `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// Valid transports are "udp", "coap", "coap-pull", "udp-pull", "coap-push",
	// "udp-push".
	// "udp" is equivalent to "udp-push" and "coap" is equivalent to "coap-push".
	// Push messages are sent unsolicited to the device wheil pull messages are
	// sent whenever the device wither sends data upstream (for UDP) or does a
	// CoAP request to the CoAP service in Horde.
	Transport            *wrappers.StringValue `protobuf:"bytes,5,opt,name=transport,proto3" json:"transport,omitempty"`
	CoapPath             *wrappers.StringValue `protobuf:"bytes,6,opt,name=coap_path,json=coapPath,proto3" json:"coap_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SendMessageRequest) Reset()         { *m = SendMessageRequest{} }
func (m *SendMessageRequest) String() string { return proto.CompactTextString(m) }
func (*SendMessageRequest) ProtoMessage()    {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{34}
}

func (m *SendMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendMessageRequest.Unmarshal(m, b)
}
func (m *SendMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendMessageRequest.Marshal(b, m, deterministic)
}
func (m *SendMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageRequest.Merge(m, src)
}
func (m *SendMessageRequest) XXX_Size() int {
	return xxx_messageInfo_SendMessageRequest.Size(m)
}
func (m *SendMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageRequest proto.InternalMessageInfo

func (m *SendMessageRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *SendMessageRequest) GetDeviceId() *wrappers.StringValue {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *SendMessageRequest) GetPort() *wrappers.Int32Value {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *SendMessageRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SendMessageRequest) GetTransport() *wrappers.StringValue {
	if m != nil {
		return m.Transport
	}
	return nil
}

func (m *SendMessageRequest) GetCoapPath() *wrappers.StringValue {
	if m != nil {
		return m.CoapPath
	}
	return nil
}

//
type SendMessageResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMessageResponse) Reset()         { *m = SendMessageResponse{} }
func (m *SendMessageResponse) String() string { return proto.CompactTextString(m) }
func (*SendMessageResponse) ProtoMessage()    {}
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{35}
}

func (m *SendMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendMessageResponse.Unmarshal(m, b)
}
func (m *SendMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendMessageResponse.Marshal(b, m, deterministic)
}
func (m *SendMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageResponse.Merge(m, src)
}
func (m *SendMessageResponse) XXX_Size() int {
	return xxx_messageInfo_SendMessageResponse.Size(m)
}
func (m *SendMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageResponse proto.InternalMessageInfo

// Error reported when message has failed to send to a device
type MessageSendResult struct {
	DeviceId             *wrappers.StringValue `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Message              *wrappers.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MessageSendResult) Reset()         { *m = MessageSendResult{} }
func (m *MessageSendResult) String() string { return proto.CompactTextString(m) }
func (*MessageSendResult) ProtoMessage()    {}
func (*MessageSendResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{36}
}

func (m *MessageSendResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageSendResult.Unmarshal(m, b)
}
func (m *MessageSendResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageSendResult.Marshal(b, m, deterministic)
}
func (m *MessageSendResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageSendResult.Merge(m, src)
}
func (m *MessageSendResult) XXX_Size() int {
	return xxx_messageInfo_MessageSendResult.Size(m)
}
func (m *MessageSendResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageSendResult.DiscardUnknown(m)
}

var xxx_messageInfo_MessageSendResult proto.InternalMessageInfo

func (m *MessageSendResult) GetDeviceId() *wrappers.StringValue {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *MessageSendResult) GetMessage() *wrappers.StringValue {
	if m != nil {
		return m.Message
	}
	return nil
}

// Broadcast message result. The errors array contains the list of errors
// ocurred when sending a message.
type MultiSendMessageResponse struct {
	Errors               []*MessageSendResult `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	Sent                 int32                `protobuf:"varint,2,opt,name=sent,proto3" json:"sent,omitempty"`
	Failed               int32                `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MultiSendMessageResponse) Reset()         { *m = MultiSendMessageResponse{} }
func (m *MultiSendMessageResponse) String() string { return proto.CompactTextString(m) }
func (*MultiSendMessageResponse) ProtoMessage()    {}
func (*MultiSendMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{37}
}

func (m *MultiSendMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiSendMessageResponse.Unmarshal(m, b)
}
func (m *MultiSendMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiSendMessageResponse.Marshal(b, m, deterministic)
}
func (m *MultiSendMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiSendMessageResponse.Merge(m, src)
}
func (m *MultiSendMessageResponse) XXX_Size() int {
	return xxx_messageInfo_MultiSendMessageResponse.Size(m)
}
func (m *MultiSendMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiSendMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MultiSendMessageResponse proto.InternalMessageInfo

func (m *MultiSendMessageResponse) GetErrors() []*MessageSendResult {
	if m != nil {
		return m.Errors
	}
	return nil
}

func (m *MultiSendMessageResponse) GetSent() int32 {
	if m != nil {
		return m.Sent
	}
	return 0
}

func (m *MultiSendMessageResponse) GetFailed() int32 {
	if m != nil {
		return m.Failed
	}
	return 0
}

// ###########################################################################
// Firmware resources
// ###########################################################################
type FirmwareRequest struct {
	CollectionId         *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	ImageId              *wrappers.StringValue `protobuf:"bytes,2,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FirmwareRequest) Reset()         { *m = FirmwareRequest{} }
func (m *FirmwareRequest) String() string { return proto.CompactTextString(m) }
func (*FirmwareRequest) ProtoMessage()    {}
func (*FirmwareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{38}
}

func (m *FirmwareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirmwareRequest.Unmarshal(m, b)
}
func (m *FirmwareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirmwareRequest.Marshal(b, m, deterministic)
}
func (m *FirmwareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirmwareRequest.Merge(m, src)
}
func (m *FirmwareRequest) XXX_Size() int {
	return xxx_messageInfo_FirmwareRequest.Size(m)
}
func (m *FirmwareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FirmwareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FirmwareRequest proto.InternalMessageInfo

func (m *FirmwareRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *FirmwareRequest) GetImageId() *wrappers.StringValue {
	if m != nil {
		return m.ImageId
	}
	return nil
}

type ListFirmwareRequest struct {
	CollectionId         *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListFirmwareRequest) Reset()         { *m = ListFirmwareRequest{} }
func (m *ListFirmwareRequest) String() string { return proto.CompactTextString(m) }
func (*ListFirmwareRequest) ProtoMessage()    {}
func (*ListFirmwareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{39}
}

func (m *ListFirmwareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFirmwareRequest.Unmarshal(m, b)
}
func (m *ListFirmwareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFirmwareRequest.Marshal(b, m, deterministic)
}
func (m *ListFirmwareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFirmwareRequest.Merge(m, src)
}
func (m *ListFirmwareRequest) XXX_Size() int {
	return xxx_messageInfo_ListFirmwareRequest.Size(m)
}
func (m *ListFirmwareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFirmwareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFirmwareRequest proto.InternalMessageInfo

func (m *ListFirmwareRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

type ListFirmwareResponse struct {
	Images               []*Firmware `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListFirmwareResponse) Reset()         { *m = ListFirmwareResponse{} }
func (m *ListFirmwareResponse) String() string { return proto.CompactTextString(m) }
func (*ListFirmwareResponse) ProtoMessage()    {}
func (*ListFirmwareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{40}
}

func (m *ListFirmwareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFirmwareResponse.Unmarshal(m, b)
}
func (m *ListFirmwareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFirmwareResponse.Marshal(b, m, deterministic)
}
func (m *ListFirmwareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFirmwareResponse.Merge(m, src)
}
func (m *ListFirmwareResponse) XXX_Size() int {
	return xxx_messageInfo_ListFirmwareResponse.Size(m)
}
func (m *ListFirmwareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFirmwareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFirmwareResponse proto.InternalMessageInfo

func (m *ListFirmwareResponse) GetImages() []*Firmware {
	if m != nil {
		return m.Images
	}
	return nil
}

type FirmwareUsageResponse struct {
	ImageId              *wrappers.StringValue `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	Targeted             []string              `protobuf:"bytes,2,rep,name=targeted,proto3" json:"targeted,omitempty"`
	Current              []string              `protobuf:"bytes,3,rep,name=current,proto3" json:"current,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FirmwareUsageResponse) Reset()         { *m = FirmwareUsageResponse{} }
func (m *FirmwareUsageResponse) String() string { return proto.CompactTextString(m) }
func (*FirmwareUsageResponse) ProtoMessage()    {}
func (*FirmwareUsageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{41}
}

func (m *FirmwareUsageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirmwareUsageResponse.Unmarshal(m, b)
}
func (m *FirmwareUsageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirmwareUsageResponse.Marshal(b, m, deterministic)
}
func (m *FirmwareUsageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirmwareUsageResponse.Merge(m, src)
}
func (m *FirmwareUsageResponse) XXX_Size() int {
	return xxx_messageInfo_FirmwareUsageResponse.Size(m)
}
func (m *FirmwareUsageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FirmwareUsageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FirmwareUsageResponse proto.InternalMessageInfo

func (m *FirmwareUsageResponse) GetImageId() *wrappers.StringValue {
	if m != nil {
		return m.ImageId
	}
	return nil
}

func (m *FirmwareUsageResponse) GetTargeted() []string {
	if m != nil {
		return m.Targeted
	}
	return nil
}

func (m *FirmwareUsageResponse) GetCurrent() []string {
	if m != nil {
		return m.Current
	}
	return nil
}

type CreateFirmwareRequest struct {
	CollectionId         *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Image                []byte                `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Version              *wrappers.StringValue `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Filename             *wrappers.StringValue `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	Tags                 map[string]string     `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateFirmwareRequest) Reset()         { *m = CreateFirmwareRequest{} }
func (m *CreateFirmwareRequest) String() string { return proto.CompactTextString(m) }
func (*CreateFirmwareRequest) ProtoMessage()    {}
func (*CreateFirmwareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{42}
}

func (m *CreateFirmwareRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateFirmwareRequest.Unmarshal(m, b)
}
func (m *CreateFirmwareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateFirmwareRequest.Marshal(b, m, deterministic)
}
func (m *CreateFirmwareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFirmwareRequest.Merge(m, src)
}
func (m *CreateFirmwareRequest) XXX_Size() int {
	return xxx_messageInfo_CreateFirmwareRequest.Size(m)
}
func (m *CreateFirmwareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFirmwareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFirmwareRequest proto.InternalMessageInfo

func (m *CreateFirmwareRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *CreateFirmwareRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *CreateFirmwareRequest) GetVersion() *wrappers.StringValue {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *CreateFirmwareRequest) GetFilename() *wrappers.StringValue {
	if m != nil {
		return m.Filename
	}
	return nil
}

func (m *CreateFirmwareRequest) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ListOutputResponse struct {
	CollectionId         *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Outputs              []*Output             `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListOutputResponse) Reset()         { *m = ListOutputResponse{} }
func (m *ListOutputResponse) String() string { return proto.CompactTextString(m) }
func (*ListOutputResponse) ProtoMessage()    {}
func (*ListOutputResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{43}
}

func (m *ListOutputResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOutputResponse.Unmarshal(m, b)
}
func (m *ListOutputResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOutputResponse.Marshal(b, m, deterministic)
}
func (m *ListOutputResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOutputResponse.Merge(m, src)
}
func (m *ListOutputResponse) XXX_Size() int {
	return xxx_messageInfo_ListOutputResponse.Size(m)
}
func (m *ListOutputResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOutputResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOutputResponse proto.InternalMessageInfo

func (m *ListOutputResponse) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *ListOutputResponse) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

type ListOutputRequest struct {
	CollectionId         *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListOutputRequest) Reset()         { *m = ListOutputRequest{} }
func (m *ListOutputRequest) String() string { return proto.CompactTextString(m) }
func (*ListOutputRequest) ProtoMessage()    {}
func (*ListOutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{44}
}

func (m *ListOutputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListOutputRequest.Unmarshal(m, b)
}
func (m *ListOutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListOutputRequest.Marshal(b, m, deterministic)
}
func (m *ListOutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOutputRequest.Merge(m, src)
}
func (m *ListOutputRequest) XXX_Size() int {
	return xxx_messageInfo_ListOutputRequest.Size(m)
}
func (m *ListOutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOutputRequest proto.InternalMessageInfo

func (m *ListOutputRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

type OutputRequest struct {
	CollectionId         *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	OutputId             *wrappers.StringValue `protobuf:"bytes,2,opt,name=output_id,json=outputId,proto3" json:"output_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *OutputRequest) Reset()         { *m = OutputRequest{} }
func (m *OutputRequest) String() string { return proto.CompactTextString(m) }
func (*OutputRequest) ProtoMessage()    {}
func (*OutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{45}
}

func (m *OutputRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputRequest.Unmarshal(m, b)
}
func (m *OutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputRequest.Marshal(b, m, deterministic)
}
func (m *OutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputRequest.Merge(m, src)
}
func (m *OutputRequest) XXX_Size() int {
	return xxx_messageInfo_OutputRequest.Size(m)
}
func (m *OutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OutputRequest proto.InternalMessageInfo

func (m *OutputRequest) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *OutputRequest) GetOutputId() *wrappers.StringValue {
	if m != nil {
		return m.OutputId
	}
	return nil
}

type OutputLogEntry struct {
	Time                 *wrappers.Int64Value  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Message              *wrappers.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Repeated             *wrappers.Int32Value  `protobuf:"bytes,3,opt,name=repeated,proto3" json:"repeated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *OutputLogEntry) Reset()         { *m = OutputLogEntry{} }
func (m *OutputLogEntry) String() string { return proto.CompactTextString(m) }
func (*OutputLogEntry) ProtoMessage()    {}
func (*OutputLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{46}
}

func (m *OutputLogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputLogEntry.Unmarshal(m, b)
}
func (m *OutputLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputLogEntry.Marshal(b, m, deterministic)
}
func (m *OutputLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputLogEntry.Merge(m, src)
}
func (m *OutputLogEntry) XXX_Size() int {
	return xxx_messageInfo_OutputLogEntry.Size(m)
}
func (m *OutputLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_OutputLogEntry proto.InternalMessageInfo

func (m *OutputLogEntry) GetTime() *wrappers.Int64Value {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *OutputLogEntry) GetMessage() *wrappers.StringValue {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *OutputLogEntry) GetRepeated() *wrappers.Int32Value {
	if m != nil {
		return m.Repeated
	}
	return nil
}

type OutputLogs struct {
	Logs                 []*OutputLogEntry `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *OutputLogs) Reset()         { *m = OutputLogs{} }
func (m *OutputLogs) String() string { return proto.CompactTextString(m) }
func (*OutputLogs) ProtoMessage()    {}
func (*OutputLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{47}
}

func (m *OutputLogs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputLogs.Unmarshal(m, b)
}
func (m *OutputLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputLogs.Marshal(b, m, deterministic)
}
func (m *OutputLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputLogs.Merge(m, src)
}
func (m *OutputLogs) XXX_Size() int {
	return xxx_messageInfo_OutputLogs.Size(m)
}
func (m *OutputLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputLogs.DiscardUnknown(m)
}

var xxx_messageInfo_OutputLogs proto.InternalMessageInfo

func (m *OutputLogs) GetLogs() []*OutputLogEntry {
	if m != nil {
		return m.Logs
	}
	return nil
}

type OutputStatus struct {
	CollectionId         *wrappers.StringValue `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	OutputId             *wrappers.StringValue `protobuf:"bytes,2,opt,name=output_id,json=outputId,proto3" json:"output_id,omitempty"`
	Enabled              *wrappers.BoolValue   `protobuf:"bytes,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ErrorCount           *wrappers.Int32Value  `protobuf:"bytes,4,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	Forwarded            *wrappers.Int32Value  `protobuf:"bytes,5,opt,name=forwarded,proto3" json:"forwarded,omitempty"`
	Received             *wrappers.Int32Value  `protobuf:"bytes,6,opt,name=received,proto3" json:"received,omitempty"`
	Retransmits          *wrappers.Int32Value  `protobuf:"bytes,7,opt,name=retransmits,proto3" json:"retransmits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *OutputStatus) Reset()         { *m = OutputStatus{} }
func (m *OutputStatus) String() string { return proto.CompactTextString(m) }
func (*OutputStatus) ProtoMessage()    {}
func (*OutputStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{48}
}

func (m *OutputStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutputStatus.Unmarshal(m, b)
}
func (m *OutputStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutputStatus.Marshal(b, m, deterministic)
}
func (m *OutputStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutputStatus.Merge(m, src)
}
func (m *OutputStatus) XXX_Size() int {
	return xxx_messageInfo_OutputStatus.Size(m)
}
func (m *OutputStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_OutputStatus.DiscardUnknown(m)
}

var xxx_messageInfo_OutputStatus proto.InternalMessageInfo

func (m *OutputStatus) GetCollectionId() *wrappers.StringValue {
	if m != nil {
		return m.CollectionId
	}
	return nil
}

func (m *OutputStatus) GetOutputId() *wrappers.StringValue {
	if m != nil {
		return m.OutputId
	}
	return nil
}

func (m *OutputStatus) GetEnabled() *wrappers.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

func (m *OutputStatus) GetErrorCount() *wrappers.Int32Value {
	if m != nil {
		return m.ErrorCount
	}
	return nil
}

func (m *OutputStatus) GetForwarded() *wrappers.Int32Value {
	if m != nil {
		return m.Forwarded
	}
	return nil
}

func (m *OutputStatus) GetReceived() *wrappers.Int32Value {
	if m != nil {
		return m.Received
	}
	return nil
}

func (m *OutputStatus) GetRetransmits() *wrappers.Int32Value {
	if m != nil {
		return m.Retransmits
	}
	return nil
}

// Field mask settings
type FieldMask struct {
	Imsi                 *wrappers.BoolValue `protobuf:"bytes,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	Imei                 *wrappers.BoolValue `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	Msisdn               *wrappers.BoolValue `protobuf:"bytes,3,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	Location             *wrappers.BoolValue `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FieldMask) Reset()         { *m = FieldMask{} }
func (m *FieldMask) String() string { return proto.CompactTextString(m) }
func (*FieldMask) ProtoMessage()    {}
func (*FieldMask) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{49}
}

func (m *FieldMask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldMask.Unmarshal(m, b)
}
func (m *FieldMask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldMask.Marshal(b, m, deterministic)
}
func (m *FieldMask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldMask.Merge(m, src)
}
func (m *FieldMask) XXX_Size() int {
	return xxx_messageInfo_FieldMask.Size(m)
}
func (m *FieldMask) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldMask.DiscardUnknown(m)
}

var xxx_messageInfo_FieldMask proto.InternalMessageInfo

func (m *FieldMask) GetImsi() *wrappers.BoolValue {
	if m != nil {
		return m.Imsi
	}
	return nil
}

func (m *FieldMask) GetImei() *wrappers.BoolValue {
	if m != nil {
		return m.Imei
	}
	return nil
}

func (m *FieldMask) GetMsisdn() *wrappers.BoolValue {
	if m != nil {
		return m.Msisdn
	}
	return nil
}

func (m *FieldMask) GetLocation() *wrappers.BoolValue {
	if m != nil {
		return m.Location
	}
	return nil
}

type SystemInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemInfoRequest) Reset()         { *m = SystemInfoRequest{} }
func (m *SystemInfoRequest) String() string { return proto.CompactTextString(m) }
func (*SystemInfoRequest) ProtoMessage()    {}
func (*SystemInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{50}
}

func (m *SystemInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemInfoRequest.Unmarshal(m, b)
}
func (m *SystemInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemInfoRequest.Marshal(b, m, deterministic)
}
func (m *SystemInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemInfoRequest.Merge(m, src)
}
func (m *SystemInfoRequest) XXX_Size() int {
	return xxx_messageInfo_SystemInfoRequest.Size(m)
}
func (m *SystemInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SystemInfoRequest proto.InternalMessageInfo

// System information structure
type SystemInfoResponse struct {
	Version              *wrappers.StringValue `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	BuildDate            *wrappers.StringValue `protobuf:"bytes,2,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`
	ReleaseName          *wrappers.StringValue `protobuf:"bytes,3,opt,name=release_name,json=releaseName,proto3" json:"release_name,omitempty"`
	DefaultFieldMask     *FieldMask            `protobuf:"bytes,4,opt,name=default_field_mask,json=defaultFieldMask,proto3" json:"default_field_mask,omitempty"`
	ForcedFieldMask      *FieldMask            `protobuf:"bytes,5,opt,name=forced_field_mask,json=forcedFieldMask,proto3" json:"forced_field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SystemInfoResponse) Reset()         { *m = SystemInfoResponse{} }
func (m *SystemInfoResponse) String() string { return proto.CompactTextString(m) }
func (*SystemInfoResponse) ProtoMessage()    {}
func (*SystemInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{51}
}

func (m *SystemInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemInfoResponse.Unmarshal(m, b)
}
func (m *SystemInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemInfoResponse.Marshal(b, m, deterministic)
}
func (m *SystemInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemInfoResponse.Merge(m, src)
}
func (m *SystemInfoResponse) XXX_Size() int {
	return xxx_messageInfo_SystemInfoResponse.Size(m)
}
func (m *SystemInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SystemInfoResponse proto.InternalMessageInfo

func (m *SystemInfoResponse) GetVersion() *wrappers.StringValue {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *SystemInfoResponse) GetBuildDate() *wrappers.StringValue {
	if m != nil {
		return m.BuildDate
	}
	return nil
}

func (m *SystemInfoResponse) GetReleaseName() *wrappers.StringValue {
	if m != nil {
		return m.ReleaseName
	}
	return nil
}

func (m *SystemInfoResponse) GetDefaultFieldMask() *FieldMask {
	if m != nil {
		return m.DefaultFieldMask
	}
	return nil
}

func (m *SystemInfoResponse) GetForcedFieldMask() *FieldMask {
	if m != nil {
		return m.ForcedFieldMask
	}
	return nil
}

// The collection dump
type DumpedCollection struct {
	Collection           *Collection     `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	Devices              []*DumpedDevice `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
	Outputs              []*Output       `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DumpedCollection) Reset()         { *m = DumpedCollection{} }
func (m *DumpedCollection) String() string { return proto.CompactTextString(m) }
func (*DumpedCollection) ProtoMessage()    {}
func (*DumpedCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{52}
}

func (m *DumpedCollection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DumpedCollection.Unmarshal(m, b)
}
func (m *DumpedCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DumpedCollection.Marshal(b, m, deterministic)
}
func (m *DumpedCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DumpedCollection.Merge(m, src)
}
func (m *DumpedCollection) XXX_Size() int {
	return xxx_messageInfo_DumpedCollection.Size(m)
}
func (m *DumpedCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_DumpedCollection.DiscardUnknown(m)
}

var xxx_messageInfo_DumpedCollection proto.InternalMessageInfo

func (m *DumpedCollection) GetCollection() *Collection {
	if m != nil {
		return m.Collection
	}
	return nil
}

func (m *DumpedCollection) GetDevices() []*DumpedDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *DumpedCollection) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

// The device dump
type DumpedDevice struct {
	// The device itself
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// The data for the device
	Data                 []*OutputDataMessage `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DumpedDevice) Reset()         { *m = DumpedDevice{} }
func (m *DumpedDevice) String() string { return proto.CompactTextString(m) }
func (*DumpedDevice) ProtoMessage()    {}
func (*DumpedDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{53}
}

func (m *DumpedDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DumpedDevice.Unmarshal(m, b)
}
func (m *DumpedDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DumpedDevice.Marshal(b, m, deterministic)
}
func (m *DumpedDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DumpedDevice.Merge(m, src)
}
func (m *DumpedDevice) XXX_Size() int {
	return xxx_messageInfo_DumpedDevice.Size(m)
}
func (m *DumpedDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_DumpedDevice.DiscardUnknown(m)
}

var xxx_messageInfo_DumpedDevice proto.InternalMessageInfo

func (m *DumpedDevice) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *DumpedDevice) GetData() []*OutputDataMessage {
	if m != nil {
		return m.Data
	}
	return nil
}

type DataDumpRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataDumpRequest) Reset()         { *m = DataDumpRequest{} }
func (m *DataDumpRequest) String() string { return proto.CompactTextString(m) }
func (*DataDumpRequest) ProtoMessage()    {}
func (*DataDumpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{54}
}

func (m *DataDumpRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataDumpRequest.Unmarshal(m, b)
}
func (m *DataDumpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataDumpRequest.Marshal(b, m, deterministic)
}
func (m *DataDumpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataDumpRequest.Merge(m, src)
}
func (m *DataDumpRequest) XXX_Size() int {
	return xxx_messageInfo_DataDumpRequest.Size(m)
}
func (m *DataDumpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DataDumpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DataDumpRequest proto.InternalMessageInfo

// This is the documentation for the data dump response
type DataDumpResponse struct {
	// This is the array of collections
	Collections []*DumpedCollection `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
	// This is your user profile
	Profile *UserProfile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	// This is your teams
	Teams []*Team `protobuf:"bytes,3,rep,name=teams,proto3" json:"teams,omitempty"`
	// This is your tokens
	Tokens               []*Token `protobuf:"bytes,4,rep,name=tokens,proto3" json:"tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataDumpResponse) Reset()         { *m = DataDumpResponse{} }
func (m *DataDumpResponse) String() string { return proto.CompactTextString(m) }
func (*DataDumpResponse) ProtoMessage()    {}
func (*DataDumpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{55}
}

func (m *DataDumpResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataDumpResponse.Unmarshal(m, b)
}
func (m *DataDumpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataDumpResponse.Marshal(b, m, deterministic)
}
func (m *DataDumpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataDumpResponse.Merge(m, src)
}
func (m *DataDumpResponse) XXX_Size() int {
	return xxx_messageInfo_DataDumpResponse.Size(m)
}
func (m *DataDumpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DataDumpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DataDumpResponse proto.InternalMessageInfo

func (m *DataDumpResponse) GetCollections() []*DumpedCollection {
	if m != nil {
		return m.Collections
	}
	return nil
}

func (m *DataDumpResponse) GetProfile() *UserProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *DataDumpResponse) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *DataDumpResponse) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type UserProfileRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserProfileRequest) Reset()         { *m = UserProfileRequest{} }
func (m *UserProfileRequest) String() string { return proto.CompactTextString(m) }
func (*UserProfileRequest) ProtoMessage()    {}
func (*UserProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{56}
}

func (m *UserProfileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserProfileRequest.Unmarshal(m, b)
}
func (m *UserProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserProfileRequest.Marshal(b, m, deterministic)
}
func (m *UserProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserProfileRequest.Merge(m, src)
}
func (m *UserProfileRequest) XXX_Size() int {
	return xxx_messageInfo_UserProfileRequest.Size(m)
}
func (m *UserProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserProfileRequest proto.InternalMessageInfo

type TeamRequest struct {
	TeamId               *wrappers.StringValue `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TeamRequest) Reset()         { *m = TeamRequest{} }
func (m *TeamRequest) String() string { return proto.CompactTextString(m) }
func (*TeamRequest) ProtoMessage()    {}
func (*TeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{57}
}

func (m *TeamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamRequest.Unmarshal(m, b)
}
func (m *TeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamRequest.Marshal(b, m, deterministic)
}
func (m *TeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamRequest.Merge(m, src)
}
func (m *TeamRequest) XXX_Size() int {
	return xxx_messageInfo_TeamRequest.Size(m)
}
func (m *TeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeamRequest proto.InternalMessageInfo

func (m *TeamRequest) GetTeamId() *wrappers.StringValue {
	if m != nil {
		return m.TeamId
	}
	return nil
}

type ListTeamRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTeamRequest) Reset()         { *m = ListTeamRequest{} }
func (m *ListTeamRequest) String() string { return proto.CompactTextString(m) }
func (*ListTeamRequest) ProtoMessage()    {}
func (*ListTeamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{58}
}

func (m *ListTeamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTeamRequest.Unmarshal(m, b)
}
func (m *ListTeamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTeamRequest.Marshal(b, m, deterministic)
}
func (m *ListTeamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTeamRequest.Merge(m, src)
}
func (m *ListTeamRequest) XXX_Size() int {
	return xxx_messageInfo_ListTeamRequest.Size(m)
}
func (m *ListTeamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTeamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTeamRequest proto.InternalMessageInfo

type TeamList struct {
	Teams                []*Team  `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamList) Reset()         { *m = TeamList{} }
func (m *TeamList) String() string { return proto.CompactTextString(m) }
func (*TeamList) ProtoMessage()    {}
func (*TeamList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{59}
}

func (m *TeamList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeamList.Unmarshal(m, b)
}
func (m *TeamList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeamList.Marshal(b, m, deterministic)
}
func (m *TeamList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamList.Merge(m, src)
}
func (m *TeamList) XXX_Size() int {
	return xxx_messageInfo_TeamList.Size(m)
}
func (m *TeamList) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamList.DiscardUnknown(m)
}

var xxx_messageInfo_TeamList proto.InternalMessageInfo

func (m *TeamList) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type MemberRequest struct {
	TeamId               *wrappers.StringValue `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	UserId               *wrappers.StringValue `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *MemberRequest) Reset()         { *m = MemberRequest{} }
func (m *MemberRequest) String() string { return proto.CompactTextString(m) }
func (*MemberRequest) ProtoMessage()    {}
func (*MemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{60}
}

func (m *MemberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemberRequest.Unmarshal(m, b)
}
func (m *MemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemberRequest.Marshal(b, m, deterministic)
}
func (m *MemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberRequest.Merge(m, src)
}
func (m *MemberRequest) XXX_Size() int {
	return xxx_messageInfo_MemberRequest.Size(m)
}
func (m *MemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MemberRequest proto.InternalMessageInfo

func (m *MemberRequest) GetTeamId() *wrappers.StringValue {
	if m != nil {
		return m.TeamId
	}
	return nil
}

func (m *MemberRequest) GetUserId() *wrappers.StringValue {
	if m != nil {
		return m.UserId
	}
	return nil
}

type Invite struct {
	Code                 *wrappers.StringValue `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	CreatedAt            *wrappers.Int64Value  `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Invite) Reset()         { *m = Invite{} }
func (m *Invite) String() string { return proto.CompactTextString(m) }
func (*Invite) ProtoMessage()    {}
func (*Invite) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{61}
}

func (m *Invite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Invite.Unmarshal(m, b)
}
func (m *Invite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Invite.Marshal(b, m, deterministic)
}
func (m *Invite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invite.Merge(m, src)
}
func (m *Invite) XXX_Size() int {
	return xxx_messageInfo_Invite.Size(m)
}
func (m *Invite) XXX_DiscardUnknown() {
	xxx_messageInfo_Invite.DiscardUnknown(m)
}

var xxx_messageInfo_Invite proto.InternalMessageInfo

func (m *Invite) GetCode() *wrappers.StringValue {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *Invite) GetCreatedAt() *wrappers.Int64Value {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type InviteList struct {
	Invites              []*Invite `protobuf:"bytes,1,rep,name=invites,proto3" json:"invites,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *InviteList) Reset()         { *m = InviteList{} }
func (m *InviteList) String() string { return proto.CompactTextString(m) }
func (*InviteList) ProtoMessage()    {}
func (*InviteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{62}
}

func (m *InviteList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InviteList.Unmarshal(m, b)
}
func (m *InviteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InviteList.Marshal(b, m, deterministic)
}
func (m *InviteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteList.Merge(m, src)
}
func (m *InviteList) XXX_Size() int {
	return xxx_messageInfo_InviteList.Size(m)
}
func (m *InviteList) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteList.DiscardUnknown(m)
}

var xxx_messageInfo_InviteList proto.InternalMessageInfo

func (m *InviteList) GetInvites() []*Invite {
	if m != nil {
		return m.Invites
	}
	return nil
}

type InviteRequest struct {
	TeamId               *wrappers.StringValue `protobuf:"bytes,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Code                 *wrappers.StringValue `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *InviteRequest) Reset()         { *m = InviteRequest{} }
func (m *InviteRequest) String() string { return proto.CompactTextString(m) }
func (*InviteRequest) ProtoMessage()    {}
func (*InviteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{63}
}

func (m *InviteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InviteRequest.Unmarshal(m, b)
}
func (m *InviteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InviteRequest.Marshal(b, m, deterministic)
}
func (m *InviteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteRequest.Merge(m, src)
}
func (m *InviteRequest) XXX_Size() int {
	return xxx_messageInfo_InviteRequest.Size(m)
}
func (m *InviteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InviteRequest proto.InternalMessageInfo

func (m *InviteRequest) GetTeamId() *wrappers.StringValue {
	if m != nil {
		return m.TeamId
	}
	return nil
}

func (m *InviteRequest) GetCode() *wrappers.StringValue {
	if m != nil {
		return m.Code
	}
	return nil
}

type AcceptInviteRequest struct {
	Code                 *wrappers.StringValue `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *AcceptInviteRequest) Reset()         { *m = AcceptInviteRequest{} }
func (m *AcceptInviteRequest) String() string { return proto.CompactTextString(m) }
func (*AcceptInviteRequest) ProtoMessage()    {}
func (*AcceptInviteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{64}
}

func (m *AcceptInviteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptInviteRequest.Unmarshal(m, b)
}
func (m *AcceptInviteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptInviteRequest.Marshal(b, m, deterministic)
}
func (m *AcceptInviteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptInviteRequest.Merge(m, src)
}
func (m *AcceptInviteRequest) XXX_Size() int {
	return xxx_messageInfo_AcceptInviteRequest.Size(m)
}
func (m *AcceptInviteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptInviteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptInviteRequest proto.InternalMessageInfo

func (m *AcceptInviteRequest) GetCode() *wrappers.StringValue {
	if m != nil {
		return m.Code
	}
	return nil
}

type DeleteInviteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteInviteResponse) Reset()         { *m = DeleteInviteResponse{} }
func (m *DeleteInviteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteInviteResponse) ProtoMessage()    {}
func (*DeleteInviteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{65}
}

func (m *DeleteInviteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteInviteResponse.Unmarshal(m, b)
}
func (m *DeleteInviteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteInviteResponse.Marshal(b, m, deterministic)
}
func (m *DeleteInviteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteInviteResponse.Merge(m, src)
}
func (m *DeleteInviteResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteInviteResponse.Size(m)
}
func (m *DeleteInviteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteInviteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteInviteResponse proto.InternalMessageInfo

type DeleteTokenRequest struct {
	Token                *wrappers.StringValue `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DeleteTokenRequest) Reset()         { *m = DeleteTokenRequest{} }
func (m *DeleteTokenRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTokenRequest) ProtoMessage()    {}
func (*DeleteTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{66}
}

func (m *DeleteTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTokenRequest.Unmarshal(m, b)
}
func (m *DeleteTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTokenRequest.Marshal(b, m, deterministic)
}
func (m *DeleteTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTokenRequest.Merge(m, src)
}
func (m *DeleteTokenRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteTokenRequest.Size(m)
}
func (m *DeleteTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTokenRequest proto.InternalMessageInfo

func (m *DeleteTokenRequest) GetToken() *wrappers.StringValue {
	if m != nil {
		return m.Token
	}
	return nil
}

type DeleteTokenResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTokenResponse) Reset()         { *m = DeleteTokenResponse{} }
func (m *DeleteTokenResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteTokenResponse) ProtoMessage()    {}
func (*DeleteTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{67}
}

func (m *DeleteTokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTokenResponse.Unmarshal(m, b)
}
func (m *DeleteTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTokenResponse.Marshal(b, m, deterministic)
}
func (m *DeleteTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTokenResponse.Merge(m, src)
}
func (m *DeleteTokenResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteTokenResponse.Size(m)
}
func (m *DeleteTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTokenResponse proto.InternalMessageInfo

type ListTokenRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTokenRequest) Reset()         { *m = ListTokenRequest{} }
func (m *ListTokenRequest) String() string { return proto.CompactTextString(m) }
func (*ListTokenRequest) ProtoMessage()    {}
func (*ListTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{68}
}

func (m *ListTokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTokenRequest.Unmarshal(m, b)
}
func (m *ListTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTokenRequest.Marshal(b, m, deterministic)
}
func (m *ListTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTokenRequest.Merge(m, src)
}
func (m *ListTokenRequest) XXX_Size() int {
	return xxx_messageInfo_ListTokenRequest.Size(m)
}
func (m *ListTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTokenRequest proto.InternalMessageInfo

type TokenList struct {
	Tokens               []*Token `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenList) Reset()         { *m = TokenList{} }
func (m *TokenList) String() string { return proto.CompactTextString(m) }
func (*TokenList) ProtoMessage()    {}
func (*TokenList) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{69}
}

func (m *TokenList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenList.Unmarshal(m, b)
}
func (m *TokenList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenList.Marshal(b, m, deterministic)
}
func (m *TokenList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenList.Merge(m, src)
}
func (m *TokenList) XXX_Size() int {
	return xxx_messageInfo_TokenList.Size(m)
}
func (m *TokenList) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenList.DiscardUnknown(m)
}

var xxx_messageInfo_TokenList proto.InternalMessageInfo

func (m *TokenList) GetTokens() []*Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type TokenRequest struct {
	Token                *wrappers.StringValue `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TokenRequest) Reset()         { *m = TokenRequest{} }
func (m *TokenRequest) String() string { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()    {}
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{70}
}

func (m *TokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenRequest.Unmarshal(m, b)
}
func (m *TokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenRequest.Marshal(b, m, deterministic)
}
func (m *TokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenRequest.Merge(m, src)
}
func (m *TokenRequest) XXX_Size() int {
	return xxx_messageInfo_TokenRequest.Size(m)
}
func (m *TokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokenRequest proto.InternalMessageInfo

func (m *TokenRequest) GetToken() *wrappers.StringValue {
	if m != nil {
		return m.Token
	}
	return nil
}

func init() {
	proto.RegisterEnum("apipb.CollectionFirmware_FirmwareManagement", CollectionFirmware_FirmwareManagement_name, CollectionFirmware_FirmwareManagement_value)
	proto.RegisterEnum("apipb.FirmwareMetadata_FirmwareState", FirmwareMetadata_FirmwareState_name, FirmwareMetadata_FirmwareState_value)
	proto.RegisterEnum("apipb.OutputDataMessage_OutputMessageType", OutputDataMessage_OutputMessageType_name, OutputDataMessage_OutputMessageType_value)
	proto.RegisterEnum("apipb.Output_Type", Output_Type_name, Output_Type_value)
	proto.RegisterType((*ErrorDetails)(nil), "apipb.ErrorDetails")
	proto.RegisterMapType((map[string]string)(nil), "apipb.ErrorDetails.MessagesEntry")
	proto.RegisterType((*TagResponse)(nil), "apipb.TagResponse")
	proto.RegisterMapType((map[string]string)(nil), "apipb.TagResponse.TagsEntry")
	proto.RegisterType((*TagValueResponse)(nil), "apipb.TagValueResponse")
	proto.RegisterType((*UpdateTagRequest)(nil), "apipb.UpdateTagRequest")
	proto.RegisterMapType((map[string]string)(nil), "apipb.UpdateTagRequest.TagsEntry")
	proto.RegisterType((*TagRequest)(nil), "apipb.TagRequest")
	proto.RegisterType((*CollectionFirmware)(nil), "apipb.CollectionFirmware")
	proto.RegisterType((*Collection)(nil), "apipb.Collection")
	proto.RegisterMapType((map[string]string)(nil), "apipb.Collection.TagsEntry")
	proto.RegisterType((*NetworkMetadata)(nil), "apipb.NetworkMetadata")
	proto.RegisterType((*FirmwareMetadata)(nil), "apipb.FirmwareMetadata")
	proto.RegisterType((*DeviceMetadata)(nil), "apipb.DeviceMetadata")
	proto.RegisterType((*Device)(nil), "apipb.Device")
	proto.RegisterMapType((map[string]string)(nil), "apipb.Device.TagsEntry")
	proto.RegisterType((*UpdateDeviceRequest)(nil), "apipb.UpdateDeviceRequest")
	proto.RegisterMapType((map[string]string)(nil), "apipb.UpdateDeviceRequest.TagsEntry")
	proto.RegisterType((*UDPMetadata)(nil), "apipb.UDPMetadata")
	proto.RegisterType((*CoAPMetadata)(nil), "apipb.CoAPMetadata")
	proto.RegisterType((*OutputDataMessage)(nil), "apipb.OutputDataMessage")
	proto.RegisterType((*OutputConfig)(nil), "apipb.OutputConfig")
	proto.RegisterType((*Output)(nil), "apipb.Output")
	proto.RegisterMapType((map[string]string)(nil), "apipb.Output.TagsEntry")
	proto.RegisterType((*Token)(nil), "apipb.Token")
	proto.RegisterMapType((map[string]string)(nil), "apipb.Token.TagsEntry")
	proto.RegisterType((*Member)(nil), "apipb.Member")
	proto.RegisterType((*MemberList)(nil), "apipb.MemberList")
	proto.RegisterType((*Team)(nil), "apipb.Team")
	proto.RegisterMapType((map[string]string)(nil), "apipb.Team.TagsEntry")
	proto.RegisterType((*Firmware)(nil), "apipb.Firmware")
	proto.RegisterMapType((map[string]string)(nil), "apipb.Firmware.TagsEntry")
	proto.RegisterType((*ListMessagesRequest)(nil), "apipb.ListMessagesRequest")
	proto.RegisterType((*ListMessagesResponse)(nil), "apipb.ListMessagesResponse")
	proto.RegisterType((*UserProfile)(nil), "apipb.UserProfile")
	proto.RegisterType((*DeleteCollectionRequest)(nil), "apipb.DeleteCollectionRequest")
	proto.RegisterType((*ListCollectionRequest)(nil), "apipb.ListCollectionRequest")
	proto.RegisterType((*ListCollectionResponse)(nil), "apipb.ListCollectionResponse")
	proto.RegisterType((*RetrieveCollectionRequest)(nil), "apipb.RetrieveCollectionRequest")
	proto.RegisterType((*MessageStreamRequest)(nil), "apipb.MessageStreamRequest")
	proto.RegisterType((*DeviceRequest)(nil), "apipb.DeviceRequest")
	proto.RegisterType((*ListDevicesRequest)(nil), "apipb.ListDevicesRequest")
	proto.RegisterType((*ListDevicesResponse)(nil), "apipb.ListDevicesResponse")
	proto.RegisterType((*ClearFirmwareErrorResponse)(nil), "apipb.ClearFirmwareErrorResponse")
	proto.RegisterType((*SendMessageRequest)(nil), "apipb.SendMessageRequest")
	proto.RegisterType((*SendMessageResponse)(nil), "apipb.SendMessageResponse")
	proto.RegisterType((*MessageSendResult)(nil), "apipb.MessageSendResult")
	proto.RegisterType((*MultiSendMessageResponse)(nil), "apipb.MultiSendMessageResponse")
	proto.RegisterType((*FirmwareRequest)(nil), "apipb.FirmwareRequest")
	proto.RegisterType((*ListFirmwareRequest)(nil), "apipb.ListFirmwareRequest")
	proto.RegisterType((*ListFirmwareResponse)(nil), "apipb.ListFirmwareResponse")
	proto.RegisterType((*FirmwareUsageResponse)(nil), "apipb.FirmwareUsageResponse")
	proto.RegisterType((*CreateFirmwareRequest)(nil), "apipb.CreateFirmwareRequest")
	proto.RegisterMapType((map[string]string)(nil), "apipb.CreateFirmwareRequest.TagsEntry")
	proto.RegisterType((*ListOutputResponse)(nil), "apipb.ListOutputResponse")
	proto.RegisterType((*ListOutputRequest)(nil), "apipb.ListOutputRequest")
	proto.RegisterType((*OutputRequest)(nil), "apipb.OutputRequest")
	proto.RegisterType((*OutputLogEntry)(nil), "apipb.OutputLogEntry")
	proto.RegisterType((*OutputLogs)(nil), "apipb.OutputLogs")
	proto.RegisterType((*OutputStatus)(nil), "apipb.OutputStatus")
	proto.RegisterType((*FieldMask)(nil), "apipb.FieldMask")
	proto.RegisterType((*SystemInfoRequest)(nil), "apipb.SystemInfoRequest")
	proto.RegisterType((*SystemInfoResponse)(nil), "apipb.SystemInfoResponse")
	proto.RegisterType((*DumpedCollection)(nil), "apipb.DumpedCollection")
	proto.RegisterType((*DumpedDevice)(nil), "apipb.DumpedDevice")
	proto.RegisterType((*DataDumpRequest)(nil), "apipb.DataDumpRequest")
	proto.RegisterType((*DataDumpResponse)(nil), "apipb.DataDumpResponse")
	proto.RegisterType((*UserProfileRequest)(nil), "apipb.UserProfileRequest")
	proto.RegisterType((*TeamRequest)(nil), "apipb.TeamRequest")
	proto.RegisterType((*ListTeamRequest)(nil), "apipb.ListTeamRequest")
	proto.RegisterType((*TeamList)(nil), "apipb.TeamList")
	proto.RegisterType((*MemberRequest)(nil), "apipb.MemberRequest")
	proto.RegisterType((*Invite)(nil), "apipb.Invite")
	proto.RegisterType((*InviteList)(nil), "apipb.InviteList")
	proto.RegisterType((*InviteRequest)(nil), "apipb.InviteRequest")
	proto.RegisterType((*AcceptInviteRequest)(nil), "apipb.AcceptInviteRequest")
	proto.RegisterType((*DeleteInviteResponse)(nil), "apipb.DeleteInviteResponse")
	proto.RegisterType((*DeleteTokenRequest)(nil), "apipb.DeleteTokenRequest")
	proto.RegisterType((*DeleteTokenResponse)(nil), "apipb.DeleteTokenResponse")
	proto.RegisterType((*ListTokenRequest)(nil), "apipb.ListTokenRequest")
	proto.RegisterType((*TokenList)(nil), "apipb.TokenList")
	proto.RegisterType((*TokenRequest)(nil), "apipb.TokenRequest")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 5221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7c, 0x5b, 0x73, 0x1b, 0x47,
	0x76, 0xf0, 0x0e, 0x6e, 0x24, 0x0e, 0x00, 0x12, 0x6c, 0x51, 0x12, 0x05, 0xc9, 0x6b, 0x68, 0xac,
	0xb5, 0x6c, 0xae, 0x45, 0x50, 0xd0, 0x5d, 0xb6, 0x64, 0x51, 0xa4, 0x2e, 0xdc, 0x4f, 0xb2, 0x65,
	0x48, 0xb2, 0x77, 0xfd, 0x65, 0x8d, 0x6a, 0x62, 0x9a, 0xe0, 0x84, 0x83, 0x19, 0x78, 0xa6, 0x87,
	0xb4, 0xac, 0xa8, 0x92, 0x38, 0xde, 0x6c, 0x55, 0xb2, 0x49, 0xaa, 0x92, 0x54, 0xaa, 0xf2, 0x90,
	0xfd, 0x05, 0x79, 0x49, 0xf2, 0x90, 0xca, 0x53, 0x5e, 0xf2, 0xb0, 0x95, 0xaa, 0x3c, 0x6d, 0xaa,
	0x9c, 0x1f, 0xb0, 0x95, 0x3f, 0x90, 0x3f, 0x90, 0xea, 0xdb, 0x60, 0x06, 0x37, 0x36, 0x40, 0x3a,
	0xeb, 0x27, 0x62, 0x66, 0xce, 0xad, 0x4f, 0x9f, 0x5b, 0x9f, 0x33, 0x43, 0xc8, 0xe3, 0xae, 0xbd,
	0xd2, 0xf5, 0x3d, 0xea, 0xa1, 0x2c, 0xee, 0xda, 0xdd, 0xad, 0xca, 0x99, 0xb6, 0xe7, 0xb5, 0x1d,
	0x52, 0xc3, 0x5d, 0xbb, 0x86, 0x5d, 0xd7, 0xa3, 0x98, 0xda, 0x9e, 0x1b, 0x08, 0xa0, 0xca, 0x3b,
	0xfc, 0x4f, 0xeb, 0x42, 0x9b, 0xb8, 0x17, 0x82, 0x7d, 0xdc, 0x6e, 0x13, 0xbf, 0xe6, 0x75, 0x39,
	0xc4, 0x10, 0xe8, 0xef, 0x4b, 0x5a, 0xfc, 0x6a, 0x2b, 0xdc, 0xae, 0xed, 0xfb, 0xb8, 0xdb, 0x25,
	0xbe, 0x7c, 0x6e, 0xfe, 0x89, 0x01, 0xc5, 0x7b, 0xbe, 0xef, 0xf9, 0x1b, 0x84, 0x62, 0xdb, 0x09,
	0xd0, 0x2d, 0x98, 0xed, 0x90, 0x20, 0xc0, 0x6d, 0x12, 0x2c, 0x19, 0xd5, 0xf4, 0x5b, 0x85, 0xfa,
	0xd9, 0x15, 0x2e, 0xd6, 0x4a, 0x1c, 0x6c, 0xe5, 0xb1, 0x84, 0xb9, 0xe7, 0x52, 0xff, 0x45, 0x23,
	0x42, 0xa9, 0xbc, 0x0b, 0xa5, 0xc4, 0x23, 0x54, 0x86, 0xf4, 0x2e, 0x79, 0xb1, 0x64, 0x54, 0x8d,
	0xb7, 0xf2, 0x0d, 0xf6, 0x13, 0x2d, 0x42, 0x76, 0x0f, 0x3b, 0x21, 0x59, 0x4a, 0xf1, 0x7b, 0xe2,
	0xe2, 0x66, 0xea, 0xba, 0x61, 0x7e, 0x01, 0x85, 0x67, 0xb8, 0xdd, 0x20, 0x41, 0xd7, 0x73, 0x03,
	0x82, 0x56, 0x21, 0x43, 0x71, 0x5b, 0x89, 0x71, 0x46, 0x8a, 0x11, 0x83, 0x60, 0xbf, 0xa5, 0x04,
	0x1c, 0xb2, 0x72, 0x0d, 0xf2, 0xd1, 0xad, 0x89, 0x38, 0xdf, 0x87, 0xf2, 0x33, 0xdc, 0xfe, 0x98,
	0x5d, 0x47, 0xec, 0xeb, 0x0a, 0x9a, 0x51, 0x60, 0xfc, 0x85, 0x2a, 0x57, 0x94, 0x2a, 0x57, 0x9e,
	0x52, 0xdf, 0x76, 0x25, 0x92, 0x00, 0x35, 0xff, 0x28, 0x05, 0xe5, 0xe7, 0x5d, 0x0b, 0x53, 0xc2,
	0xc5, 0xfc, 0x3c, 0x24, 0x01, 0x45, 0xef, 0x01, 0xd8, 0x16, 0x71, 0xa9, 0xbd, 0x6d, 0x13, 0x5f,
	0x8b, 0x5a, 0x0c, 0x1e, 0x5d, 0x91, 0x5a, 0x48, 0x25, 0x36, 0xa3, 0x9f, 0x49, 0xbf, 0x2a, 0xd0,
	0x1a, 0x94, 0x5a, 0x9e, 0xe3, 0x90, 0x16, 0xb3, 0x86, 0xa6, 0x6d, 0x2d, 0xa5, 0x35, 0xf8, 0x16,
	0x7b, 0x28, 0x9b, 0xd6, 0xf4, 0xda, 0xfc, 0x1f, 0x03, 0xe0, 0xc8, 0xd6, 0xbf, 0x0a, 0x19, 0x17,
	0x77, 0x04, 0x97, 0x83, 0xf0, 0x38, 0x64, 0x6f, 0xe3, 0xd2, 0xda, 0x1b, 0x37, 0xa8, 0xae, 0xcc,
	0xa4, 0xea, 0x32, 0xff, 0x23, 0x05, 0x68, 0x3d, 0xba, 0x71, 0xdf, 0xf6, 0x3b, 0xfb, 0xd8, 0x27,
	0xe8, 0x11, 0x1c, 0x6b, 0x85, 0xbe, 0x4f, 0x5c, 0xda, 0xdc, 0x96, 0xf7, 0x18, 0x7d, 0x1d, 0x35,
	0x2c, 0x48, 0x44, 0x45, 0x6b, 0xd3, 0x42, 0x3f, 0x02, 0x44, 0xb1, 0xdf, 0x26, 0x49, 0x62, 0x3a,
	0xba, 0x29, 0x0b, 0xbc, 0x18, 0xad, 0x47, 0x00, 0x1d, 0xec, 0xe2, 0x36, 0xe9, 0x10, 0x97, 0x72,
	0x65, 0xcd, 0xd5, 0xdf, 0x91, 0xf6, 0x35, 0xb8, 0x90, 0x15, 0xf5, 0xe3, 0x71, 0x84, 0xd3, 0x88,
	0xe1, 0x9b, 0x1f, 0x02, 0x1a, 0x84, 0x40, 0xf3, 0x50, 0x08, 0xdd, 0xa0, 0x4b, 0x5a, 0x6c, 0x33,
	0xad, 0xf2, 0xf7, 0x50, 0x11, 0x66, 0x2d, 0x3b, 0xc0, 0x5b, 0x0e, 0xb1, 0xca, 0x06, 0x9a, 0x03,
	0xe8, 0xe9, 0xb0, 0x9c, 0x42, 0x00, 0x39, 0x8b, 0xec, 0xd9, 0x2d, 0x52, 0x4e, 0x9b, 0xff, 0x95,
	0x02, 0xe8, 0x89, 0x31, 0xb8, 0x43, 0xc6, 0xa4, 0x3b, 0x84, 0xae, 0xc0, 0x0c, 0x25, 0xb8, 0xa3,
	0xab, 0xb1, 0x1c, 0x03, 0xde, 0xb4, 0x50, 0x0d, 0x60, 0xdb, 0x26, 0x8e, 0xd5, 0xec, 0xe0, 0x60,
	0x57, 0x1a, 0x55, 0x59, 0xea, 0xe9, 0x3e, 0x7b, 0xf0, 0x18, 0x07, 0xbb, 0x8d, 0xfc, 0xb6, 0xfa,
	0x89, 0xae, 0xc0, 0xac, 0xda, 0x1d, 0x69, 0x47, 0xa7, 0x46, 0xaa, 0xb5, 0x11, 0x81, 0xa2, 0x9a,
	0xf4, 0xf4, 0x2c, 0xf7, 0xf4, 0xd3, 0x03, 0x28, 0x47, 0x17, 0xee, 0x7e, 0x65, 0xc0, 0xfc, 0x07,
	0x84, 0xee, 0x7b, 0xfe, 0xee, 0x63, 0x42, 0xb1, 0x85, 0x29, 0x46, 0xef, 0x43, 0x11, 0x3b, 0x8e,
	0xd7, 0xc2, 0x94, 0x58, 0x4d, 0xbb, 0xab, 0xa5, 0xde, 0x42, 0x84, 0xb1, 0xd9, 0x45, 0xb7, 0xe3,
	0x04, 0x30, 0x95, 0x2a, 0x3e, 0x3d, 0x40, 0x60, 0xd3, 0xa5, 0x57, 0x2f, 0xf7, 0xe3, 0xaf, 0x51,
	0x74, 0x19, 0x66, 0x5a, 0xc4, 0x71, 0x7a, 0xb1, 0x6a, 0x2c, 0x6a, 0x8e, 0xc1, 0x6e, 0x5a, 0xe6,
	0x7f, 0x67, 0xa1, 0x1c, 0xd9, 0x9d, 0x5a, 0xcb, 0x77, 0xd7, 0xe7, 0x1e, 0x40, 0x39, 0x22, 0xb2,
	0x47, 0xfc, 0xc0, 0xf6, 0x5c, 0xad, 0x30, 0x35, 0xaf, 0xb0, 0x3e, 0x16, 0x48, 0xcc, 0x1d, 0x02,
	0xe2, 0xdb, 0xd8, 0x69, 0xba, 0x61, 0x67, 0x8b, 0xf8, 0x7a, 0x01, 0x4b, 0xa0, 0x7c, 0xc0, 0x31,
	0xd8, 0x8e, 0x77, 0x3c, 0x8b, 0x44, 0x14, 0xb2, 0x3a, 0x3b, 0xce, 0x31, 0x24, 0x81, 0x3b, 0x50,
	0xec, 0x60, 0x37, 0xdc, 0xc6, 0x2d, 0x1a, 0xfa, 0xc4, 0x5f, 0xca, 0xe9, 0x88, 0x10, 0xc7, 0x60,
	0xa1, 0x3a, 0xa0, 0x98, 0x92, 0xa5, 0x19, 0x9d, 0x50, 0xcd, 0x41, 0xf9, 0xca, 0xd9, 0x8f, 0xa6,
	0x2c, 0x3a, 0x96, 0x66, 0xb5, 0x56, 0xce, 0x50, 0x64, 0x69, 0x62, 0xfe, 0x83, 0x01, 0x25, 0xb5,
	0x29, 0x4f, 0x39, 0xd1, 0x02, 0xcc, 0x3c, 0x77, 0x77, 0x5d, 0x6f, 0xdf, 0x2d, 0x7f, 0x8f, 0x5d,
	0xac, 0x0b, 0x2b, 0x28, 0x1b, 0xec, 0xe2, 0x09, 0x71, 0x2d, 0xdb, 0x6d, 0x97, 0x53, 0xa8, 0x0c,
	0xc5, 0x4d, 0xd7, 0xa6, 0x36, 0x76, 0xec, 0x2f, 0xd9, 0x9d, 0x34, 0x8b, 0x67, 0xcf, 0xec, 0x0e,
	0xb1, 0x3e, 0x0c, 0x69, 0x39, 0x83, 0xf2, 0x90, 0xe5, 0x65, 0x52, 0x39, 0xcb, 0x22, 0xdf, 0x86,
	0xb7, 0xef, 0x3a, 0x1e, 0xe6, 0xb8, 0x39, 0x16, 0xeb, 0xd4, 0x0d, 0x62, 0x95, 0x67, 0x18, 0x66,
	0x83, 0xec, 0x11, 0x9f, 0x12, 0xab, 0x3c, 0xcb, 0x28, 0x8b, 0x9c, 0x7e, 0x1f, 0xdb, 0x2c, 0x36,
	0xe6, 0x51, 0x09, 0xf2, 0xeb, 0x5e, 0xa7, 0xeb, 0x10, 0x06, 0x00, 0x66, 0x19, 0xe6, 0x36, 0x78,
	0x68, 0x54, 0x56, 0x6e, 0xfe, 0x73, 0x1a, 0x72, 0xe2, 0x16, 0xba, 0x01, 0x79, 0x11, 0x37, 0x75,
	0xcd, 0x7c, 0x56, 0x80, 0x6f, 0x5a, 0x83, 0x71, 0x35, 0x35, 0x71, 0x5c, 0x5d, 0x85, 0x8c, 0xdd,
	0x09, 0x6c, 0x2d, 0x43, 0xe6, 0x90, 0x02, 0x83, 0xd8, 0x5a, 0x46, 0xcb, 0x21, 0xd1, 0x0f, 0x13,
	0xc1, 0xf1, 0xa4, 0x0c, 0x8e, 0x62, 0xf9, 0x03, 0xc5, 0xcf, 0x2a, 0xcc, 0xb8, 0x22, 0xbc, 0x49,
	0x9b, 0x3c, 0x21, 0xe1, 0xfb, 0x82, 0x5e, 0x43, 0x81, 0xa1, 0x4b, 0xb1, 0x90, 0x2d, 0x6c, 0xf1,
	0x64, 0x14, 0xe1, 0x93, 0xc1, 0xa5, 0x17, 0xb0, 0x0f, 0x51, 0x20, 0xa5, 0xe1, 0x98, 0xd8, 0x6d,
	0xb1, 0x00, 0x55, 0x29, 0x35, 0xe0, 0x04, 0xf9, 0xc2, 0x0e, 0xa8, 0xed, 0xb6, 0x9b, 0x93, 0x27,
	0xbb, 0x45, 0x85, 0xbb, 0x1e, 0xdf, 0x9c, 0x84, 0x69, 0xa4, 0x0e, 0x67, 0x1a, 0xe9, 0xa9, 0x4d,
	0x23, 0x33, 0xb1, 0x69, 0x64, 0xb5, 0x4d, 0xe3, 0xba, 0x34, 0x8d, 0x1c, 0x37, 0x8d, 0x73, 0x89,
	0x0a, 0x39, 0xa1, 0xdf, 0x01, 0x3b, 0xf9, 0xbf, 0xdd, 0xf5, 0x9f, 0x1b, 0x50, 0x78, 0xbe, 0xf1,
	0x24, 0xca, 0x52, 0x37, 0x01, 0x58, 0xf6, 0x73, 0x9a, 0x5d, 0xcf, 0xa7, 0x72, 0x87, 0x87, 0xe6,
	0xbc, 0x4b, 0x75, 0xb1, 0xdc, 0x3c, 0x07, 0x7f, 0xe2, 0xf9, 0xac, 0xa6, 0x2e, 0xf8, 0xa4, 0xe3,
	0x51, 0x22, 0x90, 0x53, 0x07, 0x23, 0x83, 0x80, 0x67, 0xd8, 0xa6, 0x0f, 0xc5, 0x75, 0x6f, 0xad,
	0x27, 0xc9, 0x2a, 0x64, 0x5a, 0x9e, 0xa5, 0x77, 0xd2, 0xe1, 0x90, 0x0c, 0xa3, 0x8b, 0xe9, 0x8e,
	0x5e, 0x55, 0xce, 0x20, 0xcd, 0xbf, 0x4d, 0xc3, 0xc2, 0x87, 0x21, 0xed, 0x86, 0x74, 0x03, 0x53,
	0x2c, 0x23, 0x31, 0xba, 0x0d, 0x19, 0xfa, 0xa2, 0x2b, 0x38, 0xcf, 0xd5, 0x97, 0xa5, 0xf6, 0x07,
	0xe0, 0xe4, 0x1d, 0x79, 0xf5, 0xec, 0x45, 0x97, 0x34, 0x38, 0x1e, 0xfa, 0x81, 0x2a, 0x18, 0xa5,
	0x24, 0xa5, 0x44, 0x60, 0x68, 0xc8, 0x87, 0x68, 0x09, 0x66, 0xba, 0xf8, 0x05, 0x0b, 0xbd, 0xdc,
	0x86, 0x8b, 0x0d, 0x75, 0x89, 0xae, 0xc1, 0xac, 0x4f, 0x5a, 0xc4, 0xde, 0x23, 0xaa, 0xe6, 0x1f,
	0xab, 0xc5, 0x08, 0x18, 0x9d, 0x81, 0x3c, 0xf5, 0xb1, 0x1b, 0x70, 0xfd, 0x67, 0xf9, 0x5e, 0xf7,
	0x6e, 0xa0, 0xab, 0x50, 0x0a, 0xad, 0x6e, 0xb3, 0x43, 0x28, 0x6e, 0x32, 0x15, 0xcb, 0x38, 0x84,
	0x94, 0x71, 0xf6, 0xcc, 0xa0, 0x51, 0x08, 0xad, 0x2e, 0xbb, 0x60, 0xcb, 0x45, 0x37, 0x60, 0xae,
	0xe5, 0xe1, 0x38, 0xa2, 0xb0, 0xcb, 0x63, 0x51, 0x35, 0xd8, 0xdb, 0x36, 0xe6, 0x6a, 0x38, 0x42,
	0x35, 0x6f, 0x28, 0xfd, 0xc6, 0xb4, 0xc4, 0xb2, 0x57, 0x18, 0xe5, 0xb5, 0x12, 0xe4, 0x77, 0x09,
	0xe9, 0x62, 0xc7, 0xde, 0x23, 0x65, 0x03, 0xcd, 0x42, 0x86, 0x91, 0x29, 0xa7, 0xcc, 0xdf, 0xcc,
	0x40, 0x51, 0xe0, 0xae, 0x7b, 0xee, 0xb6, 0xdd, 0x46, 0x2b, 0x90, 0x0e, 0x7d, 0x47, 0xcb, 0x1e,
	0x18, 0x20, 0xda, 0x80, 0xf9, 0x2d, 0x1c, 0xd8, 0xad, 0x26, 0x0e, 0xe9, 0x4e, 0x33, 0x0c, 0x88,
	0xaf, 0x65, 0x19, 0x25, 0x8e, 0xb4, 0x16, 0xd2, 0x9d, 0xe7, 0x01, 0xf1, 0xfb, 0xa8, 0x74, 0x71,
	0x10, 0x68, 0x45, 0x9c, 0x1e, 0x95, 0x27, 0x38, 0x08, 0x58, 0xb9, 0xd6, 0x0a, 0x03, 0xea, 0x75,
	0x9a, 0x3b, 0x04, 0x5b, 0xc4, 0x6f, 0xf2, 0xe3, 0xa3, 0x4e, 0x00, 0x2a, 0x0b, 0xbc, 0x87, 0x1c,
	0xed, 0x03, 0x76, 0x94, 0xe4, 0x85, 0x64, 0x9c, 0x96, 0x70, 0xed, 0xac, 0x5e, 0x21, 0xd9, 0x23,
	0xc6, 0x6f, 0x31, 0xa7, 0xd9, 0xf1, 0x02, 0xaa, 0x55, 0x27, 0x71, 0x48, 0x76, 0x24, 0xe0, 0xf6,
	0x35, 0x73, 0xb0, 0x65, 0x72, 0x40, 0xb6, 0x71, 0x2c, 0x1e, 0xe9, 0x94, 0x44, 0x3c, 0x5a, 0xbd,
	0x0b, 0x40, 0xf6, 0x58, 0x9d, 0xcc, 0x95, 0x94, 0xd7, 0x40, 0xcb, 0x73, 0x78, 0xae, 0x9d, 0xdb,
	0x50, 0xc2, 0x41, 0xd3, 0x0e, 0x9a, 0xca, 0xb7, 0x80, 0xe3, 0x57, 0x06, 0xf0, 0xef, 0x7a, 0x9e,
	0xa3, 0x2a, 0xfe, 0x60, 0x33, 0x78, 0x22, 0x7d, 0xef, 0x3a, 0xcc, 0x12, 0xd7, 0xea, 0x7a, 0xb6,
	0x4b, 0x97, 0x0a, 0x3a, 0x99, 0x49, 0x41, 0xa3, 0x87, 0x80, 0xe4, 0x29, 0xb2, 0xd9, 0x22, 0x3e,
	0x6d, 0xb6, 0x76, 0x48, 0x6b, 0x77, 0xa9, 0x78, 0x20, 0xfb, 0xb2, 0xc4, 0x5a, 0x27, 0x3e, 0x5d,
	0x67, 0x38, 0x4c, 0x06, 0x66, 0xae, 0x7c, 0xf9, 0x25, 0x1d, 0x19, 0x14, 0x34, 0xc3, 0x64, 0x26,
	0xba, 0xef, 0xf9, 0xd6, 0xd2, 0x9c, 0x0e, 0xa6, 0x82, 0x66, 0x29, 0xb9, 0xe5, 0xd8, 0x4c, 0xeb,
	0xb6, 0xb5, 0x34, 0xaf, 0x83, 0x2a, 0xc0, 0x37, 0x2d, 0xb6, 0x5f, 0xd4, 0xeb, 0xda, 0x2d, 0xb1,
	0x5f, 0x65, 0x9d, 0xfd, 0xe2, 0xf0, 0x6c, 0xbf, 0xcc, 0x7f, 0x49, 0x43, 0x4e, 0xb8, 0x39, 0x13,
	0xc1, 0xe3, 0xbf, 0xb4, 0x0b, 0x46, 0x01, 0x7e, 0x34, 0x05, 0xe3, 0x9b, 0x32, 0xea, 0x8b, 0x9e,
	0x03, 0x4a, 0x44, 0xfd, 0x95, 0x58, 0x74, 0xff, 0x21, 0xe4, 0x5a, 0x3c, 0x20, 0x49, 0xf7, 0x3d,
	0x96, 0x80, 0x14, 0xb1, 0xaa, 0x21, 0x41, 0xd8, 0xf9, 0x91, 0xb8, 0xbc, 0xb1, 0x20, 0xfd, 0x73,
	0x9c, 0x21, 0x28, 0xd0, 0xa8, 0xae, 0xcc, 0x25, 0xea, 0x4a, 0x25, 0xca, 0x51, 0x1d, 0xb8, 0xef,
	0x40, 0x86, 0x87, 0xe3, 0x12, 0xe4, 0x43, 0xd7, 0x22, 0xdb, 0xb6, 0xcb, 0x9b, 0x21, 0x05, 0x98,
	0xd9, 0x27, 0x5b, 0x3b, 0x9e, 0xb7, 0x5b, 0x36, 0xd0, 0x0c, 0xa4, 0x43, 0xab, 0x5b, 0x4e, 0xb1,
	0xb8, 0xdc, 0xf9, 0x9c, 0xd2, 0x72, 0x9a, 0x1d, 0x27, 0xec, 0x6d, 0x4a, 0x69, 0x39, 0x63, 0xfe,
	0x22, 0x05, 0xd9, 0x67, 0xde, 0x2e, 0x71, 0x99, 0xdd, 0xf9, 0x24, 0xf0, 0x42, 0xbf, 0xa5, 0x97,
	0xb0, 0x23, 0x68, 0xb4, 0x0a, 0xd9, 0x7d, 0xdf, 0xa6, 0x2a, 0x57, 0x8e, 0xd3, 0x8f, 0x00, 0x64,
	0xe7, 0x33, 0xca, 0x98, 0xea, 0xb5, 0xd2, 0x38, 0x28, 0x5a, 0x96, 0x1a, 0xcd, 0x70, 0x8d, 0xaa,
	0xca, 0x9b, 0xcb, 0x7e, 0x74, 0x0a, 0xfd, 0xd7, 0x2c, 0xe4, 0x1e, 0x13, 0x7e, 0x0a, 0xbd, 0x02,
	0x33, 0xcc, 0x27, 0x75, 0x0d, 0x39, 0xc7, 0x80, 0xa7, 0x6f, 0x06, 0xad, 0x42, 0xc6, 0xf7, 0x1c,
	0xbd, 0xde, 0x22, 0x87, 0x8c, 0x1a, 0x98, 0x99, 0x49, 0x1a, 0x98, 0xa4, 0x83, 0x6d, 0x47, 0x2b,
	0xcf, 0x08, 0x50, 0x86, 0xd3, 0xdd, 0xf1, 0x5c, 0xa2, 0x95, 0x5c, 0x04, 0x28, 0x0b, 0x26, 0x78,
	0x0f, 0x53, 0xec, 0x37, 0x59, 0xb2, 0xd7, 0x39, 0x82, 0xe7, 0x05, 0xfc, 0x73, 0xdf, 0x61, 0xc8,
	0x2d, 0xcf, 0x75, 0x49, 0x8b, 0x87, 0x10, 0x9d, 0x84, 0x93, 0x97, 0xf0, 0x9b, 0x16, 0xba, 0x03,
	0xa5, 0xb6, 0x4d, 0x9b, 0x3b, 0xe1, 0x56, 0xd3, 0xf1, 0xda, 0xb6, 0xab, 0x95, 0x79, 0x0a, 0x6d,
	0x9b, 0x3e, 0x0c, 0xb7, 0x1e, 0x31, 0x04, 0xb4, 0x06, 0x73, 0x7b, 0xc4, 0xe7, 0x5d, 0xc5, 0xa6,
	0x50, 0xd6, 0xc1, 0xc9, 0xa7, 0xa4, 0x30, 0xee, 0x71, 0x95, 0xc5, 0x49, 0x08, 0xdd, 0x15, 0xf4,
	0x49, 0x3c, 0xe1, 0x1a, 0xbc, 0x01, 0x79, 0x5e, 0xab, 0xf0, 0x68, 0x56, 0xd4, 0x71, 0x46, 0x06,
	0xce, 0x42, 0x81, 0x79, 0x05, 0x40, 0x18, 0xf0, 0x23, 0x3b, 0xa0, 0xe8, 0x3c, 0xcc, 0x74, 0xf8,
	0x95, 0x1a, 0x77, 0xa8, 0x42, 0x56, 0xc0, 0x34, 0xd4, 0x53, 0xf3, 0xdf, 0x0d, 0xc8, 0x3c, 0x23,
	0xb8, 0x13, 0xb7, 0x5f, 0x63, 0x02, 0xfb, 0x7d, 0x3b, 0x31, 0x4e, 0x38, 0xae, 0xbc, 0x93, 0xe0,
	0xce, 0xc0, 0xe9, 0x28, 0x26, 0x53, 0x7a, 0x9c, 0x4c, 0xd3, 0x7b, 0xf1, 0x57, 0x19, 0x98, 0x8d,
	0x1a, 0xe5, 0xd7, 0x60, 0xd6, 0xee, 0xe0, 0xb6, 0x76, 0x0b, 0x63, 0x86, 0x43, 0x6f, 0x5a, 0xe8,
	0x2a, 0xcc, 0xa8, 0x56, 0x9a, 0x8e, 0x27, 0x2b, 0x60, 0x16, 0x48, 0xb7, 0x6d, 0x87, 0x70, 0xe7,
	0xd4, 0x71, 0xe7, 0x08, 0x1a, 0x5d, 0x86, 0x5c, 0xb0, 0x83, 0xeb, 0x57, 0xae, 0x6a, 0x39, 0xb5,
	0x84, 0x45, 0x97, 0x20, 0xe7, 0x10, 0xb7, 0x4d, 0x77, 0xa4, 0x5f, 0x8f, 0x2d, 0xe7, 0x24, 0xe8,
	0x60, 0xb6, 0xcd, 0x4d, 0xd3, 0xf6, 0x6e, 0xf9, 0x04, 0x53, 0x62, 0x8d, 0xab, 0x23, 0x55, 0x63,
	0x55, 0xc1, 0xa2, 0x0b, 0xd2, 0x52, 0x66, 0xf9, 0xde, 0x9f, 0xea, 0x3b, 0x18, 0x1f, 0x5d, 0x28,
	0xff, 0xfb, 0x14, 0x1c, 0x63, 0x3e, 0xa0, 0xe6, 0x86, 0xaa, 0x19, 0x72, 0x04, 0x0d, 0xff, 0x43,
	0xf4, 0x3e, 0x2e, 0x42, 0xd6, 0xb1, 0x3b, 0x36, 0x1d, 0xd7, 0x8b, 0x56, 0x7b, 0x25, 0x20, 0x19,
	0x4a, 0x60, 0xbb, 0x2d, 0x32, 0xee, 0x1c, 0xa9, 0xb4, 0x2c, 0x20, 0x19, 0x4a, 0xe8, 0xd2, 0x28,
	0xd2, 0x8f, 0x47, 0xe1, 0x90, 0xe6, 0x23, 0x58, 0x4c, 0x6a, 0x4b, 0x8e, 0x2b, 0x2f, 0x0f, 0x0c,
	0x6e, 0x97, 0x46, 0x9d, 0xa6, 0x7b, 0xf3, 0x5a, 0xf3, 0x97, 0x59, 0x28, 0xb0, 0xb3, 0xd7, 0x13,
	0xdf, 0x63, 0xd6, 0xdd, 0x4b, 0x3d, 0xc6, 0x14, 0xa9, 0x27, 0xa5, 0x9f, 0x7a, 0x06, 0xc3, 0x77,
	0xfa, 0xf0, 0xe1, 0x3b, 0x33, 0x69, 0xf8, 0x4e, 0x26, 0xc0, 0xec, 0x64, 0x09, 0x50, 0xe5, 0xf5,
	0x9c, 0x76, 0x5e, 0xbf, 0x05, 0x85, 0xae, 0xd0, 0xb3, 0x76, 0xc2, 0x05, 0x89, 0xc0, 0x18, 0xbe,
	0x0f, 0xc5, 0xb6, 0x4d, 0x7b, 0x39, 0xb3, 0xa1, 0x99, 0x33, 0x77, 0x54, 0xce, 0x64, 0x27, 0x16,
	0xdf, 0xdb, 0xb3, 0x2d, 0xe2, 0x6b, 0x25, 0xdc, 0x08, 0x9a, 0x29, 0xca, 0xf1, 0xda, 0x5e, 0x48,
	0xb9, 0xe0, 0xa0, 0xa3, 0x28, 0x01, 0x3f, 0x58, 0x29, 0x14, 0x26, 0xaa, 0x14, 0xcc, 0xdf, 0x81,
	0x93, 0x1b, 0xc4, 0x21, 0x94, 0xf4, 0x9a, 0x9a, 0x47, 0x17, 0x20, 0xcc, 0x93, 0x70, 0x9c, 0x39,
	0xd3, 0x00, 0x6d, 0xf3, 0x31, 0x9c, 0xe8, 0x7f, 0x20, 0xfd, 0xec, 0x12, 0x14, 0x7a, 0x24, 0x94,
	0xab, 0x2d, 0x0c, 0x0c, 0xeb, 0x1a, 0x71, 0x28, 0xf3, 0x33, 0x38, 0xd5, 0x20, 0xd4, 0xb7, 0xc9,
	0xde, 0xb7, 0xb3, 0x8e, 0xbf, 0x36, 0x60, 0x51, 0x3a, 0xf7, 0x53, 0xea, 0x13, 0xdc, 0xf9, 0x4e,
	0x04, 0x51, 0xf3, 0xcf, 0x0c, 0x28, 0x25, 0x3b, 0xdc, 0xbf, 0x5d, 0x79, 0x3e, 0x01, 0xc4, 0x76,
	0x55, 0x88, 0x74, 0x84, 0x89, 0xc6, 0xbc, 0x2d, 0x52, 0x58, 0x44, 0x58, 0xda, 0xca, 0x79, 0x98,
	0x11, 0xbc, 0xfb, 0xab, 0x3a, 0xa9, 0x14, 0xf5, 0xd4, 0x3c, 0x03, 0x95, 0x75, 0x87, 0x60, 0x5f,
	0x65, 0x57, 0x3e, 0x44, 0x52, 0x64, 0xcc, 0xff, 0x4c, 0x01, 0x7a, 0x4a, 0x5c, 0x4b, 0x85, 0xef,
	0xef, 0x44, 0x82, 0x54, 0xad, 0xa9, 0xb4, 0x6e, 0x6b, 0x2a, 0xd6, 0x83, 0xcd, 0x24, 0x7b, 0xb0,
	0x37, 0xfb, 0x5b, 0xa9, 0x07, 0xf7, 0x34, 0xa2, 0x46, 0xeb, 0x0d, 0xc8, 0xf3, 0x86, 0x29, 0xef,
	0x46, 0xe7, 0xb4, 0x7a, 0x29, 0x1e, 0xee, 0x3e, 0xc1, 0x74, 0xc7, 0x3c, 0x0e, 0xc7, 0x12, 0x5a,
	0x95, 0xda, 0xfe, 0x63, 0x03, 0x16, 0x94, 0x2f, 0x11, 0xd7, 0x6a, 0x90, 0x20, 0x74, 0xe8, 0x61,
	0x26, 0x6c, 0x57, 0x59, 0x1d, 0x2d, 0x46, 0x95, 0x5a, 0xf5, 0xa9, 0x04, 0x36, 0xbf, 0x80, 0xa5,
	0xc7, 0xa1, 0x43, 0xed, 0x21, 0x42, 0xa2, 0x55, 0xc8, 0x11, 0x66, 0x23, 0xfd, 0xb9, 0x7e, 0x40,
	0xf0, 0x86, 0x84, 0x43, 0x08, 0x32, 0x01, 0x71, 0xc5, 0xa8, 0x20, 0xdb, 0xe0, 0xbf, 0xd1, 0x09,
	0xc8, 0x6d, 0xf3, 0x71, 0x23, 0xdf, 0xc5, 0x6c, 0x43, 0x5e, 0x31, 0xbf, 0x9d, 0x8f, 0x5e, 0x50,
	0x38, 0x3a, 0x6b, 0x8b, 0x57, 0xf8, 0xa9, 0x09, 0x2a, 0x7c, 0xf3, 0xc7, 0xc2, 0xbd, 0x8e, 0x5e,
	0x24, 0xf3, 0x7d, 0x51, 0x4d, 0xf5, 0x28, 0x47, 0x9e, 0x9b, 0xe3, 0xcc, 0x95, 0x7e, 0xe7, 0xfb,
	0xca, 0xdf, 0x86, 0x7c, 0xcc, 0xac, 0xe5, 0xb8, 0xba, 0xf9, 0x3c, 0xb1, 0x45, 0x53, 0x9f, 0x67,
	0x2a, 0x30, 0x2b, 0xde, 0x1b, 0x20, 0x16, 0x3f, 0xa6, 0xe5, 0x1b, 0xd1, 0x35, 0x73, 0x22, 0xf9,
	0x82, 0x02, 0x3f, 0x93, 0xe5, 0x1b, 0xea, 0xd2, 0xfc, 0x26, 0x05, 0xc7, 0xd7, 0x79, 0xe9, 0xfe,
	0x2d, 0xec, 0xdc, 0x22, 0x64, 0xb9, 0x74, 0x7c, 0xdb, 0x8a, 0x0d, 0x71, 0x11, 0x3f, 0x78, 0xa5,
	0xa7, 0x3d, 0x78, 0x65, 0x26, 0x3a, 0x78, 0xdd, 0x4c, 0x4c, 0x81, 0xdf, 0x54, 0x59, 0x77, 0xd8,
	0xb2, 0x8f, 0xee, 0x80, 0xf2, 0x07, 0x86, 0x48, 0x1b, 0xa2, 0x8e, 0x8e, 0xf6, 0xf7, 0x08, 0xd4,
	0x7a, 0x1e, 0x66, 0x44, 0x5b, 0x55, 0x9d, 0xc7, 0x4b, 0x89, 0x92, 0xbd, 0xa1, 0x9e, 0x9a, 0x1f,
	0xc3, 0x42, 0x5c, 0x82, 0x23, 0x33, 0x7f, 0x96, 0xa0, 0x8f, 0x9a, 0x68, 0xb2, 0xb7, 0x9c, 0x9a,
	0xa4, 0xb7, 0x6c, 0xfe, 0xa3, 0x01, 0x73, 0x42, 0x9e, 0x47, 0x5e, 0x5b, 0xec, 0x54, 0x0d, 0x32,
	0xd4, 0xee, 0x90, 0x71, 0xf3, 0x51, 0x75, 0x42, 0xe2, 0x80, 0xd3, 0x86, 0x5b, 0x31, 0x09, 0xec,
	0x8a, 0x73, 0x72, 0x5a, 0x6b, 0x12, 0x28, 0x80, 0xcd, 0x6b, 0x00, 0x91, 0xcc, 0x01, 0x7a, 0x1b,
	0x32, 0x8e, 0x17, 0xbd, 0xb5, 0x7a, 0x3c, 0xb1, 0xa1, 0x6a, 0x51, 0x0d, 0x0e, 0x62, 0xfe, 0x53,
	0x5a, 0x8d, 0xdd, 0x9e, 0x52, 0x4c, 0xc3, 0xe0, 0xb7, 0xab, 0xfc, 0x78, 0x03, 0x3d, 0xad, 0xdf,
	0x40, 0x7f, 0x0f, 0x0a, 0x3c, 0xc3, 0x34, 0x5b, 0x5e, 0xe8, 0x52, 0x9d, 0x19, 0x2a, 0x70, 0xf8,
	0x75, 0x06, 0xce, 0xc4, 0xdd, 0xf6, 0xfc, 0x7d, 0xec, 0x5b, 0x51, 0xdb, 0x7e, 0xfc, 0x08, 0x3c,
	0x82, 0x4e, 0x4c, 0x6e, 0x73, 0x93, 0x4c, 0x6e, 0x6f, 0x41, 0xc1, 0x27, 0xbc, 0x82, 0xe8, 0xd8,
	0x34, 0xd0, 0x99, 0xad, 0xc5, 0xe1, 0xcd, 0x6f, 0x0c, 0xc8, 0x47, 0xaf, 0xfd, 0xa1, 0x15, 0xf9,
	0x82, 0x83, 0x71, 0xa0, 0xc6, 0xc4, 0xeb, 0x0d, 0x2b, 0xf2, 0xf5, 0x86, 0x94, 0x0e, 0x3c, 0xb1,
	0x51, 0x1d, 0x72, 0x9d, 0xc0, 0x0e, 0x2c, 0x57, 0x63, 0x4f, 0x24, 0x24, 0xba, 0x0a, 0xb3, 0xfc,
	0xb5, 0x3a, 0x16, 0x98, 0x0f, 0x3e, 0x13, 0x47, 0xb0, 0xe6, 0x31, 0x58, 0x78, 0xfa, 0x22, 0xa0,
	0xa4, 0xb3, 0xe9, 0x6e, 0x7b, 0xea, 0x24, 0xf4, 0x2b, 0x56, 0x7c, 0xc6, 0xee, 0xca, 0xe8, 0x17,
	0x8b, 0xfd, 0xc6, 0x24, 0xb1, 0xff, 0x5d, 0x80, 0xad, 0xd0, 0x76, 0xac, 0xa6, 0x85, 0xa9, 0x9e,
	0x83, 0xe6, 0x39, 0xfc, 0x06, 0xa6, 0x84, 0x9d, 0x80, 0x7d, 0xe2, 0x10, 0x1c, 0x90, 0xa6, 0x76,
	0xd7, 0xae, 0x20, 0x31, 0xe4, 0xc4, 0x12, 0x59, 0x64, 0x1b, 0x87, 0x0e, 0x6d, 0xc6, 0x5e, 0xe9,
	0xcc, 0x8c, 0x78, 0xa5, 0xb3, 0x2c, 0x61, 0x7b, 0xbb, 0xfd, 0x1e, 0x2c, 0x6c, 0x7b, 0x7e, 0x8b,
	0x58, 0x71, 0xf4, 0xec, 0x08, 0xf4, 0x79, 0x01, 0x1a, 0xdd, 0x30, 0xff, 0xce, 0x80, 0xf2, 0x46,
	0xd8, 0xe9, 0x12, 0x2b, 0xf6, 0x5e, 0xeb, 0xc5, 0xf8, 0x2b, 0xb0, 0x52, 0x97, 0x43, 0x8e, 0x93,
	0x31, 0x20, 0x74, 0xa1, 0x77, 0xac, 0x10, 0x69, 0x43, 0xcd, 0xc5, 0x04, 0xf1, 0xbe, 0xc3, 0x45,
	0x3c, 0xcb, 0xa4, 0xc7, 0x66, 0x99, 0x16, 0x14, 0xe3, 0x14, 0x62, 0x2f, 0x57, 0x18, 0xe3, 0x5e,
	0xae, 0x78, 0x47, 0xbc, 0x47, 0x20, 0x65, 0x19, 0xdd, 0x75, 0xe2, 0x50, 0xe6, 0x02, 0xcc, 0xb3,
	0x9b, 0x8c, 0x91, 0x32, 0xb1, 0x7f, 0x63, 0x7a, 0x89, 0xee, 0x49, 0x03, 0xbb, 0x31, 0xec, 0x9c,
	0x7d, 0x32, 0xb1, 0xd0, 0x11, 0xa7, 0x6d, 0xf4, 0x0e, 0xcc, 0xc8, 0xb6, 0x89, 0x34, 0xb0, 0xe8,
	0xb5, 0x8b, 0x5e, 0xa7, 0xab, 0xa1, 0x40, 0xd0, 0x59, 0xc8, 0x52, 0x82, 0x3b, 0x4a, 0x39, 0x85,
	0x58, 0x4b, 0xbc, 0x21, 0x9e, 0xa0, 0x73, 0x90, 0xe3, 0xb3, 0x2d, 0x35, 0xd4, 0x2a, 0xc6, 0x87,
	0x5a, 0x0d, 0xf9, 0xcc, 0x5c, 0x04, 0x14, 0x67, 0x20, 0x17, 0xb7, 0x01, 0x85, 0x67, 0xb1, 0x03,
	0xf9, 0x74, 0x6d, 0x7b, 0xa6, 0x35, 0x56, 0x00, 0xc4, 0x28, 0x99, 0x17, 0x60, 0x96, 0x5d, 0xf2,
	0xf1, 0x41, 0xb4, 0x06, 0x63, 0xd4, 0x1a, 0xcc, 0x57, 0x50, 0x92, 0x7d, 0xfb, 0x43, 0x49, 0x12,
	0x1f, 0xb7, 0xa5, 0xf4, 0xc7, 0x6d, 0xe6, 0x1e, 0xe4, 0x36, 0xdd, 0x3d, 0x9b, 0x92, 0x29, 0x5e,
	0x36, 0xba, 0x09, 0x20, 0x9b, 0xd2, 0x9a, 0xef, 0x15, 0xe7, 0x25, 0xf8, 0x1a, 0x35, 0xaf, 0x00,
	0x08, 0xbe, 0x6a, 0xcc, 0x62, 0xf3, 0xab, 0xfe, 0x03, 0xb9, 0x80, 0x69, 0xa8, 0xa7, 0xe6, 0x17,
	0x50, 0x92, 0xb7, 0x0e, 0xa7, 0x2d, 0xb5, 0xd8, 0x94, 0xee, 0x62, 0xcd, 0x07, 0x70, 0x6c, 0xad,
	0xd5, 0x22, 0x5d, 0x9a, 0xe4, 0x3f, 0xb1, 0xd6, 0xcc, 0x13, 0xb0, 0x28, 0x3a, 0x67, 0x8a, 0x90,
	0x3c, 0xdf, 0x3e, 0x04, 0x24, 0xee, 0x0b, 0xeb, 0x95, 0xf4, 0xa3, 0x49, 0xaf, 0xa1, 0x3d, 0xe9,
	0x65, 0x07, 0xe8, 0x04, 0x25, 0xc9, 0x00, 0x41, 0x99, 0xdb, 0x6a, 0x8c, 0xbc, 0x79, 0x11, 0xf2,
	0xfc, 0x9a, 0xef, 0x42, 0xcf, 0x9d, 0x8c, 0x31, 0xee, 0x74, 0x17, 0x8a, 0x87, 0x95, 0xb0, 0xfe,
	0xcb, 0x0d, 0xc8, 0x3e, 0xf4, 0x7c, 0x8b, 0xa0, 0x8f, 0xa0, 0x2c, 0x8e, 0x09, 0xb1, 0xd0, 0x3b,
	0x18, 0x66, 0x2b, 0x83, 0xb7, 0xcc, 0x93, 0x5f, 0xfd, 0xfa, 0x37, 0x7f, 0x95, 0x5a, 0x30, 0x8b,
	0xb5, 0x58, 0x8c, 0xb9, 0x69, 0x2c, 0x23, 0xac, 0xbe, 0xf5, 0x99, 0x98, 0xe4, 0x79, 0x4e, 0xf2,
	0x6c, 0xfd, 0x4c, 0x9c, 0x64, 0xed, 0x65, 0xa2, 0xf6, 0x7b, 0xc5, 0x58, 0xec, 0x42, 0xb9, 0xbf,
	0xfb, 0x89, 0xbe, 0x1f, 0x45, 0xe1, 0xa1, 0x6d, 0xd1, 0x61, 0xfc, 0xce, 0x71, 0x7e, 0xdf, 0x5f,
	0x1e, 0xcb, 0x0f, 0x59, 0x22, 0xc6, 0xac, 0xc7, 0x22, 0xa9, 0xfa, 0xe8, 0x6a, 0x68, 0x93, 0xb4,
	0xf2, 0xda, 0x88, 0xa7, 0xd2, 0x0e, 0x16, 0x39, 0xd7, 0x39, 0x94, 0x50, 0x1c, 0xf2, 0x00, 0x0d,
	0xb6, 0x42, 0x51, 0x55, 0x92, 0x1a, 0xd9, 0x25, 0x1d, 0xb3, 0x2c, 0x34, 0x7e, 0x59, 0xbf, 0xd7,
	0xdf, 0xca, 0x55, 0xa3, 0x13, 0x54, 0x89, 0xc9, 0xdf, 0x37, 0x7d, 0xaa, 0x9c, 0x1e, 0xfa, 0x4c,
	0xae, 0xec, 0x6d, 0xce, 0xf8, 0x0d, 0x74, 0x76, 0x1c, 0xe3, 0x1a, 0x7f, 0xb5, 0xf2, 0x4b, 0x28,
	0xdf, 0xf5, 0x3d, 0x6c, 0xb5, 0x70, 0x44, 0x07, 0xa9, 0x59, 0xda, 0x60, 0x4f, 0xaf, 0xf2, 0xba,
	0xea, 0xe3, 0x8c, 0x68, 0xfc, 0x98, 0xcb, 0x9c, 0xf5, 0x39, 0xf3, 0xf5, 0xb1, 0xac, 0xa9, 0xc7,
	0xac, 0xe7, 0x47, 0xd1, 0xc7, 0x78, 0xa2, 0x29, 0x8c, 0x4e, 0xf7, 0x75, 0x89, 0xe2, 0xad, 0xe2,
	0xca, 0xc8, 0xc4, 0x6d, 0x7e, 0x6f, 0xd5, 0x40, 0xdb, 0xe2, 0x0c, 0xdc, 0xd3, 0x22, 0x3b, 0x4b,
	0x47, 0xe6, 0xde, 0xfb, 0xda, 0xab, 0x82, 0x06, 0xbf, 0xd3, 0xd3, 0xd4, 0x17, 0x1f, 0x3a, 0x7f,
	0x0e, 0x8b, 0xfd, 0x4e, 0xc5, 0x39, 0x9d, 0x1c, 0xf1, 0xe1, 0xdb, 0x50, 0x7e, 0xef, 0x70, 0x7e,
	0x6f, 0xd6, 0x0f, 0xe6, 0xc7, 0xd4, 0xd4, 0x85, 0xf2, 0x03, 0x92, 0x5c, 0xd9, 0xb0, 0x85, 0x9d,
	0xec, 0xdd, 0x4a, 0x7c, 0x28, 0x68, 0xae, 0x72, 0x6e, 0xcb, 0xe8, 0xad, 0x03, 0xb9, 0xd5, 0x5e,
	0xb2, 0xb2, 0xf5, 0x15, 0x0a, 0x54, 0xe0, 0x3c, 0x34, 0xd3, 0x65, 0x7d, 0xa6, 0x5f, 0xaa, 0x77,
	0xce, 0xa7, 0x67, 0x7a, 0x8d, 0x33, 0xbd, 0x58, 0xd7, 0x66, 0x7a, 0x53, 0x7e, 0x5e, 0xf7, 0x53,
	0x28, 0x8a, 0xe8, 0x2b, 0x2b, 0xcb, 0x64, 0x25, 0x59, 0x49, 0x5e, 0x9a, 0x35, 0xce, 0xe6, 0x6d,
	0xf3, 0xdc, 0x78, 0xf7, 0x12, 0xe5, 0x2d, 0xdb, 0x41, 0x0f, 0xe6, 0x54, 0xe0, 0x90, 0x0c, 0x16,
	0x93, 0xa5, 0xaa, 0x5c, 0x58, 0x1f, 0x9f, 0xeb, 0x9c, 0x4f, 0x1d, 0xad, 0xea, 0xf0, 0xa9, 0xbd,
	0x8c, 0xfa, 0xbf, 0xaf, 0xd0, 0xef, 0xab, 0xaf, 0x35, 0x24, 0xbb, 0xca, 0xe8, 0x97, 0xce, 0xfb,
	0x99, 0x6e, 0x70, 0xa6, 0xb7, 0xeb, 0x37, 0x92, 0x4c, 0x87, 0xbf, 0xf7, 0x3f, 0x94, 0x3b, 0x5b,
	0x71, 0x07, 0x8a, 0xc2, 0x82, 0xa6, 0x58, 0xef, 0xf2, 0xe4, 0xeb, 0xf5, 0xa1, 0x10, 0x9b, 0x6f,
	0x44, 0x01, 0x6c, 0x70, 0x98, 0x52, 0xa9, 0x0c, 0x7b, 0x94, 0x74, 0x4b, 0xa4, 0xb5, 0xaf, 0xe8,
	0x17, 0x46, 0x7c, 0x5a, 0x73, 0xf8, 0xa0, 0x7d, 0x8b, 0x73, 0xbf, 0x86, 0xae, 0x4c, 0xba, 0x7a,
	0x11, 0xc8, 0xbf, 0x36, 0xa0, 0x10, 0x0b, 0xc8, 0xe3, 0x82, 0x78, 0x65, 0xd8, 0x23, 0x29, 0xc5,
	0x6d, 0x2e, 0xc5, 0x75, 0xf3, 0xd2, 0xc4, 0x52, 0x88, 0x98, 0xfe, 0x17, 0x06, 0xa0, 0xc1, 0x51,
	0xd1, 0x88, 0xfd, 0x57, 0x5f, 0x0b, 0x8f, 0x99, 0x2d, 0xdd, 0xe1, 0xf2, 0xdc, 0x5c, 0xbe, 0x3e,
	0xb1, 0x3c, 0xdb, 0xfb, 0xbc, 0x8f, 0x83, 0xf6, 0x61, 0xae, 0xb7, 0x4d, 0x93, 0x64, 0x05, 0xa9,
	0x0a, 0x74, 0x55, 0x8f, 0x75, 0xef, 0x9b, 0x60, 0x99, 0x2a, 0xbe, 0x32, 0x54, 0x01, 0x16, 0xe3,
	0x3d, 0x51, 0x9e, 0x58, 0xe3, 0x12, 0xbc, 0x5b, 0x9f, 0x52, 0x02, 0xb6, 0x1f, 0x7f, 0x68, 0x40,
	0xf1, 0x01, 0xe9, 0xad, 0x7e, 0xa2, 0x78, 0x7a, 0x8f, 0xf3, 0x7f, 0x1f, 0xdd, 0x9a, 0x8e, 0xbf,
	0x8a, 0xec, 0x5f, 0x1b, 0x30, 0x1f, 0x8f, 0x06, 0x53, 0x8a, 0xb1, 0x7c, 0x48, 0x31, 0xfe, 0xd4,
	0x80, 0xf9, 0xbe, 0xfd, 0x98, 0x48, 0x8c, 0x47, 0x5c, 0x8c, 0xfb, 0xf5, 0xc3, 0x89, 0xa1, 0x52,
	0xce, 0xe7, 0x30, 0x97, 0x9c, 0x0b, 0x44, 0xc5, 0xec, 0xd0, 0x71, 0x41, 0xa5, 0x7f, 0xc2, 0xa3,
	0x32, 0xac, 0xf9, 0x83, 0xb1, 0xe2, 0xa8, 0xcf, 0x82, 0x98, 0x2d, 0x84, 0x50, 0x56, 0x69, 0x28,
	0x62, 0x7a, 0xa2, 0x7f, 0x70, 0x34, 0x8a, 0x9d, 0x5e, 0x32, 0x52, 0xec, 0x6a, 0x2f, 0xd5, 0x6c,
	0xe9, 0x15, 0xcb, 0x7e, 0xf2, 0xd3, 0x41, 0xc5, 0xb4, 0x9f, 0xf8, 0x20, 0xb7, 0x77, 0x39, 0xb7,
	0x2b, 0xf5, 0x89, 0xb9, 0xb1, 0x75, 0x06, 0x30, 0x27, 0xcc, 0x6d, 0xea, 0x55, 0x2e, 0x4f, 0xbe,
	0xca, 0x3d, 0x28, 0xc6, 0x27, 0x75, 0x89, 0x3c, 0xd0, 0xcf, 0xf6, 0xf4, 0xd0, 0x67, 0xd2, 0xcc,
	0x2e, 0x70, 0x11, 0xce, 0x23, 0xbd, 0x7d, 0x45, 0x3f, 0x8b, 0x7d, 0x2b, 0xca, 0x07, 0x7c, 0x23,
	0x17, 0x7b, 0xa6, 0xef, 0xfe, 0xf3, 0x61, 0x81, 0xff, 0x80, 0x58, 0x33, 0x64, 0xe5, 0xb5, 0x90,
	0x73, 0xfd, 0x52, 0x9c, 0xaa, 0x15, 0xf1, 0x49, 0x02, 0xed, 0xfb, 0x9c, 0xf5, 0x0d, 0x74, 0x4d,
	0x97, 0x75, 0x7f, 0xa4, 0xfd, 0x99, 0x01, 0x28, 0x69, 0x62, 0x93, 0xc7, 0xda, 0xbb, 0x5c, 0x88,
	0xf7, 0xea, 0xd3, 0x0a, 0xc1, 0x0c, 0xef, 0x6b, 0x03, 0xe6, 0x1e, 0x90, 0xb8, 0x0e, 0x26, 0x0a,
	0x30, 0xf7, 0xb9, 0x08, 0x77, 0xd0, 0xed, 0x29, 0x45, 0x50, 0x81, 0xee, 0xe7, 0x06, 0x2c, 0x24,
	0x1d, 0x60, 0x4a, 0x49, 0x96, 0x0f, 0x2b, 0xc9, 0x9f, 0x1b, 0xb0, 0x30, 0xb0, 0x31, 0x13, 0x49,
	0xf2, 0x98, 0x4b, 0xf2, 0xa0, 0x7e, 0x48, 0x49, 0x06, 0x0a, 0x7d, 0xf9, 0x9d, 0x49, 0xb2, 0xd5,
	0x5c, 0x49, 0x5e, 0x6a, 0x16, 0xfa, 0xb2, 0x3d, 0xdd, 0x57, 0xe8, 0x4b, 0x06, 0x8b, 0xc9, 0x5e,
	0x76, 0x5f, 0xe1, 0x2b, 0xf9, 0xe8, 0xc5, 0x56, 0xc9, 0xa7, 0xf6, 0x32, 0x1a, 0xa0, 0xbd, 0x42,
	0xb6, 0x2a, 0xf4, 0xb5, 0xd6, 0xa3, 0x17, 0x55, 0x87, 0xf0, 0x49, 0x94, 0xf4, 0x53, 0xac, 0x6c,
	0x79, 0xf2, 0x95, 0x75, 0x45, 0x49, 0x2f, 0xe8, 0x04, 0x68, 0x29, 0x16, 0x32, 0x93, 0x1c, 0x4f,
	0x0d, 0x79, 0x32, 0x51, 0x41, 0x2f, 0xb9, 0x23, 0x17, 0x32, 0x7c, 0x42, 0x3a, 0x7c, 0x61, 0x0b,
	0xfd, 0x93, 0xd2, 0x40, 0xb3, 0x62, 0x1f, 0xb2, 0xb8, 0x9a, 0xc3, 0xf8, 0x50, 0xc8, 0xc9, 0xb9,
	0xea, 0x70, 0x8e, 0xc9, 0xaf, 0x89, 0x04, 0xa8, 0x66, 0xac, 0x1c, 0xc6, 0x33, 0x10, 0xbc, 0x64,
	0x39, 0x2c, 0x88, 0x1e, 0x7d, 0x39, 0x1c, 0x71, 0x1e, 0x53, 0x0e, 0xc7, 0x78, 0x7f, 0x0b, 0xe5,
	0xf0, 0x48, 0x09, 0x62, 0xe5, 0x70, 0x24, 0xc1, 0xb7, 0x50, 0x0e, 0x8f, 0xe4, 0x3f, 0x58, 0x0e,
	0x1f, 0x4a, 0x8c, 0xe5, 0x43, 0x8a, 0xd1, 0x2b, 0x87, 0xa7, 0x13, 0x43, 0xaf, 0x1c, 0x3e, 0x48,
	0x0c, 0x15, 0x98, 0x9f, 0x43, 0xe9, 0x01, 0xa1, 0xbd, 0x41, 0x6e, 0xe4, 0xf0, 0x03, 0x13, 0xdf,
	0xc8, 0xe1, 0x07, 0xa7, 0xbe, 0xe6, 0x3c, 0x97, 0x29, 0x8f, 0x66, 0x6a, 0x01, 0x7f, 0x88, 0x3e,
	0x82, 0x59, 0x35, 0xb9, 0x8b, 0xea, 0xa2, 0xbe, 0xf1, 0x5e, 0xb4, 0xc2, 0xfe, 0x11, 0x9f, 0x6a,
	0x10, 0x9b, 0x79, 0x7e, 0xc2, 0xb6, 0xc2, 0x4e, 0x97, 0x99, 0xd0, 0x47, 0x3c, 0xc7, 0xc7, 0x5f,
	0x4a, 0x3f, 0x35, 0x64, 0x7c, 0xd7, 0x67, 0xc6, 0xb1, 0x47, 0x66, 0x99, 0x93, 0x05, 0x34, 0x5b,
	0x53, 0x23, 0xbe, 0x1b, 0x00, 0x22, 0x2b, 0xf1, 0x2f, 0x67, 0xe2, 0xd3, 0xb1, 0x4a, 0xfc, 0xc2,
	0x5c, 0xe0, 0x98, 0x05, 0x33, 0x57, 0xe3, 0x33, 0x33, 0x26, 0xcd, 0x26, 0x14, 0x55, 0xc6, 0xe1,
	0xc8, 0x28, 0x3e, 0x5a, 0x93, 0x42, 0x24, 0x68, 0x2c, 0x71, 0x1a, 0x08, 0x95, 0x05, 0x8d, 0xda,
	0x4b, 0x39, 0x36, 0x7a, 0x85, 0x3e, 0x83, 0x63, 0x71, 0x52, 0x62, 0x1a, 0x17, 0x0c, 0xa5, 0xb8,
	0x90, 0xf8, 0xd2, 0x86, 0xc5, 0x13, 0xb3, 0xca, 0xe9, 0x56, 0xd0, 0x52, 0x3f, 0xdd, 0x9a, 0xfc,
	0x0c, 0x07, 0xe1, 0x5e, 0x72, 0x94, 0x9f, 0xc6, 0x2d, 0x26, 0x3f, 0xd8, 0xe9, 0x4b, 0x21, 0xe2,
	0xae, 0xea, 0x28, 0x23, 0x73, 0x14, 0xe1, 0xda, 0x4b, 0x39, 0xf0, 0x7b, 0x85, 0xfe, 0xbf, 0x4a,
	0x87, 0x92, 0x41, 0x92, 0x54, 0x3f, 0x65, 0x59, 0x69, 0xd7, 0x35, 0x28, 0x33, 0x55, 0x37, 0x55,
	0x02, 0x9c, 0x42, 0xfa, 0x65, 0x1d, 0xe9, 0xd7, 0x01, 0x64, 0x1c, 0x1c, 0x6f, 0x06, 0xa7, 0x39,
	0xcd, 0xe3, 0xf5, 0x81, 0x2d, 0x64, 0x52, 0x3e, 0x00, 0x90, 0x43, 0xaf, 0x49, 0xcc, 0x61, 0x79,
	0xd0, 0x1c, 0x36, 0x20, 0xaf, 0x46, 0xba, 0x41, 0xe4, 0x3b, 0x7d, 0x43, 0xde, 0xe8, 0x00, 0xa5,
	0x26, 0xbd, 0xe6, 0x1c, 0xa7, 0x37, 0x8b, 0xa4, 0x89, 0xa2, 0x4f, 0x99, 0xb7, 0xb8, 0xc4, 0xc7,
	0x6a, 0xce, 0x17, 0xa9, 0x2d, 0x31, 0x3f, 0xac, 0x24, 0x07, 0x9d, 0xe6, 0x1b, 0x9c, 0xcc, 0x6b,
	0xe6, 0xa0, 0x35, 0xc9, 0x09, 0x28, 0x5b, 0xea, 0xc7, 0xa2, 0x44, 0x10, 0x28, 0xe3, 0x0d, 0xb5,
	0x37, 0x63, 0x1d, 0x63, 0xa8, 0x92, 0x34, 0xfa, 0xac, 0x67, 0xa8, 0x93, 0xc8, 0x2c, 0xa7, 0x66,
	0xe8, 0xf5, 0x51, 0x84, 0x59, 0x70, 0xb4, 0xc8, 0x2b, 0xf4, 0x11, 0x14, 0xe3, 0x23, 0xd4, 0xe8,
	0xa8, 0x38, 0x64, 0xae, 0x3a, 0x74, 0xb3, 0xcc, 0x92, 0xe4, 0x80, 0x39, 0x02, 0x53, 0xc5, 0xef,
	0x2a, 0xdb, 0x1c, 0x2b, 0xf0, 0xe9, 0xc4, 0x68, 0xae, 0x6f, 0xee, 0x2a, 0xc5, 0x5f, 0x3e, 0x50,
	0xfc, 0x4f, 0xc4, 0x49, 0x97, 0x49, 0x34, 0x49, 0xfd, 0x30, 0xa0, 0xf7, 0x81, 0x0a, 0x61, 0x4b,
	0x35, 0x0a, 0x22, 0xd2, 0x13, 0x95, 0x07, 0xd2, 0x66, 0xea, 0x23, 0x19, 0x88, 0xa1, 0x28, 0x3c,
	0x20, 0x4a, 0xf6, 0x89, 0xf2, 0xdd, 0xc0, 0xf6, 0x8e, 0x4a, 0xac, 0x16, 0x94, 0x7a, 0x1e, 0x38,
	0x25, 0x97, 0xe5, 0x03, 0xb9, 0xec, 0x42, 0x29, 0xa1, 0xac, 0x89, 0xb8, 0xac, 0x70, 0x2e, 0x6f,
	0xd5, 0x0f, 0xe2, 0xa2, 0xb2, 0xf3, 0x2d, 0x28, 0xc8, 0x04, 0xc5, 0x3f, 0xa1, 0x4e, 0x0c, 0xc4,
	0x2b, 0x89, 0x2b, 0x13, 0x71, 0xd2, 0x45, 0x73, 0xa6, 0x26, 0xe6, 0xe4, 0x4c, 0xe9, 0x3f, 0x85,
	0x42, 0x6c, 0x10, 0x1f, 0xe5, 0xcb, 0xc1, 0x31, 0x7f, 0xd4, 0x9a, 0x1e, 0x36, 0xb7, 0x97, 0x83,
	0xee, 0xe5, 0x79, 0x49, 0xb9, 0xf6, 0x92, 0xff, 0x7d, 0x85, 0x1e, 0x02, 0x44, 0x03, 0xfd, 0x9e,
	0xcd, 0xf4, 0xcf, 0xf8, 0x2b, 0xe5, 0xb8, 0x9c, 0x3c, 0x14, 0xf4, 0xca, 0x05, 0x41, 0x11, 0xfd,
	0x3f, 0x28, 0x45, 0x29, 0x90, 0x8b, 0x7a, 0x2c, 0x31, 0xfa, 0x97, 0x84, 0x92, 0x0b, 0x96, 0x62,
	0xa1, 0x01, 0xb1, 0xee, 0x41, 0x41, 0xee, 0xd0, 0x81, 0x4a, 0xab, 0x70, 0x1a, 0x8b, 0xf5, 0x7e,
	0x1a, 0x4c, 0x79, 0x3f, 0x81, 0x52, 0xb4, 0x94, 0x49, 0xfc, 0xed, 0x2c, 0xa7, 0x79, 0x1a, 0x9d,
	0x8a, 0x68, 0x0e, 0x38, 0x9c, 0xa5, 0x2a, 0xc0, 0x1e, 0xf1, 0x89, 0x3c, 0x4e, 0x0e, 0xb8, 0xeb,
	0xa3, 0x59, 0xb0, 0x05, 0xb4, 0xa0, 0xc0, 0x5c, 0x4e, 0xb2, 0x98, 0xc8, 0x4e, 0xdf, 0xe2, 0x0c,
	0x4c, 0x54, 0x1d, 0xc9, 0x40, 0xb9, 0xc3, 0xb6, 0xea, 0xf9, 0x1d, 0x86, 0xcf, 0xf2, 0xc1, 0x7c,
	0x3a, 0x51, 0x8c, 0x9a, 0x86, 0x8f, 0x6c, 0x28, 0xd4, 0x0f, 0xe4, 0x23, 0x1d, 0xef, 0xee, 0x37,
	0xe9, 0xbf, 0x5c, 0xfb, 0x75, 0x1a, 0xfd, 0x8d, 0x01, 0xa5, 0x67, 0x3b, 0xa4, 0xca, 0xdf, 0x15,
	0xa9, 0xae, 0x3d, 0xd9, 0x44, 0xcb, 0x77, 0x49, 0x0b, 0x87, 0x01, 0xa9, 0x6e, 0x7a, 0xcf, 0xaa,
	0x0f, 0x30, 0x25, 0xfb, 0xf8, 0x45, 0xd5, 0x0e, 0xaa, 0xd8, 0xad, 0x92, 0x3d, 0xe2, 0x56, 0xf7,
	0x3d, 0x3f, 0x20, 0x55, 0x46, 0x6b, 0xc5, 0x6c, 0xc0, 0xc9, 0x7b, 0x5f, 0x74, 0x1d, 0xcf, 0xc7,
	0xd4, 0xf3, 0x5f, 0x54, 0xef, 0xb9, 0x6d, 0xdb, 0x25, 0xc4, 0xb7, 0xdd, 0x36, 0xaa, 0xee, 0x50,
	0xda, 0x0d, 0x6e, 0xd6, 0x6a, 0xa4, 0x07, 0xb0, 0x42, 0x7a, 0x00, 0xb5, 0xca, 0x71, 0x42, 0xee,
	0x50, 0xe2, 0x10, 0xd7, 0xf3, 0x2d, 0xbb, 0x6d, 0x53, 0xec, 0xac, 0xb4, 0xbc, 0x4e, 0x3d, 0x5b,
	0x5f, 0x59, 0x5d, 0x59, 0x6d, 0x98, 0x90, 0xbe, 0xbc, 0xba, 0x8a, 0x4e, 0xc3, 0x29, 0x26, 0x9e,
	0x2f, 0xd6, 0x5f, 0xdd, 0xc1, 0x42, 0x10, 0xdf, 0xf7, 0xfc, 0x95, 0xc6, 0x39, 0x06, 0x73, 0x19,
	0xbd, 0x06, 0xa7, 0xd7, 0xbd, 0xd0, 0xb1, 0xdc, 0xf3, 0xb4, 0xba, 0x6d, 0xbb, 0x56, 0x95, 0x72,
	0x0c, 0xf1, 0xbf, 0x1f, 0x56, 0x1a, 0xcb, 0x0c, 0xea, 0x06, 0x7a, 0x03, 0xce, 0x3e, 0xdb, 0x21,
	0x3e, 0x39, 0x1f, 0x54, 0x71, 0xf4, 0xb4, 0xda, 0xf2, 0xdc, 0x6d, 0xc7, 0x6e, 0xd1, 0x2a, 0x7b,
	0xb4, 0xd2, 0x38, 0x01, 0xe9, 0xfa, 0xea, 0x45, 0x34, 0x0f, 0xa5, 0x4d, 0x7a, 0x3e, 0xa8, 0xca,
	0xb7, 0xa9, 0x56, 0x1a, 0xaf, 0x31, 0x1a, 0x17, 0xd1, 0x09, 0x58, 0xfc, 0x89, 0x17, 0x56, 0x5b,
	0x98, 0xb1, 0xa2, 0x5e, 0xd8, 0xda, 0xa9, 0xd2, 0x1d, 0x3b, 0x68, 0x9c, 0x85, 0xf4, 0x95, 0xd5,
	0x55, 0x54, 0x81, 0xa5, 0xcd, 0xf3, 0x9d, 0x6a, 0xe0, 0xf9, 0xfe, 0x8b, 0x95, 0xea, 0x27, 0xa4,
	0x8a, 0x7d, 0x52, 0xdd, 0xf2, 0xd9, 0x86, 0x7c, 0xba, 0x03, 0xdb, 0x30, 0xbb, 0xd6, 0xb5, 0x85,
	0xcb, 0x7e, 0x3a, 0x9b, 0x42, 0x0f, 0xd6, 0x9e, 0x6c, 0x56, 0xf9, 0x6e, 0x55, 0xe9, 0x0e, 0xa6,
	0xd5, 0x4e, 0x18, 0xd0, 0xea, 0x16, 0xa9, 0xda, 0x6e, 0xcb, 0x09, 0x2d, 0x62, 0x55, 0x6d, 0x97,
	0xaf, 0x44, 0xfc, 0x03, 0x9e, 0xa0, 0x1a, 0xba, 0x0e, 0x09, 0x82, 0xea, 0x0b, 0x2f, 0xe4, 0x74,
	0x1d, 0xaf, 0xdd, 0xe6, 0x40, 0x95, 0xc2, 0x8f, 0x2f, 0xac, 0x3d, 0xd9, 0xbc, 0xc0, 0x29, 0x57,
	0x53, 0x5b, 0x39, 0xfe, 0x5e, 0xd0, 0xa5, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xdb, 0x47,
	0xf7, 0x60, 0x59, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HordeClient is the client API for Horde service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HordeClient interface {
	// Create a new collection. The returned collection is the collection stored
	// in the backend. Defaults have been set. There are no required fields in a
	// collection
	CreateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*Collection, error)
	// Update the collection
	UpdateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*Collection, error)
	// Delete a collection. You must have read and write access to the collection
	DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*Collection, error)
	// List the collections you have access to.
	ListCollections(ctx context.Context, in *ListCollectionRequest, opts ...grpc.CallOption) (*ListCollectionResponse, error)
	// Retrieve a single collection
	RetrieveCollection(ctx context.Context, in *RetrieveCollectionRequest, opts ...grpc.CallOption) (*Collection, error)
	// List messages sent by the devices in this collection.
	ListCollectionMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// Broadcast a message to all devices in the collection. This request will
	// always succeed if the collection exists, even if there are one or more send
	// errors. Individual errors are returned as an array of error messages in the
	// response. Use equivalent to resource for devices to send a message to
	// single device.
	BroadcastMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*MultiSendMessageResponse, error)
	// Get a stream of messages. If the device ID is set on the request the stream
	// will be limited to only messages from that particular device.
	MessageStream(ctx context.Context, in *MessageStreamRequest, opts ...grpc.CallOption) (Horde_MessageStreamClient, error)
	// List tags on collection.
	ListCollectionTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// Update tags on token. This will add and update tags. Existing tags that
	// aren't updated or added will be kept. If a tag has a blank value it will
	// be removed.
	UpdateCollectionTags(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// Get the value of a particular tag
	GetCollectionTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Delete a tag from the collection
	DeleteCollectionTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Update a single tag value. If the tag value is empty the tag will be
	// removed.
	UpdateCollectionTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Create a new device. This will add a device to the collection. You must
	// have write access to the collection.
	CreateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error)
	// Retrieve the device
	RetrieveDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// Update the device
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// Remove a device
	DeleteDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*Device, error)
	// List the devices
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	// List messages sent by the device
	ListDeviceMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// Send a message to the device
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	ClearFirmwareError(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*ClearFirmwareErrorResponse, error)
	// List tags on device.
	ListDeviceTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// Update tags on device. This will add and update tags. Existing tags that
	// aren't updated or added will be kept. If a tag has a blank value it will
	// be removed.
	UpdateDeviceTags(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// Get the value of a particular tag
	GetDeviceTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Delete a tag from its name.
	DeleteDeviceTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Update a single tag value. If the tag value is empty the tag will be
	// removed.
	UpdateDeviceTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Create a new firmware image. This is also invoked by the custom HTTP
	// uploader if the POST uses multipart/formdata for the request.
	CreateFirmware(ctx context.Context, in *CreateFirmwareRequest, opts ...grpc.CallOption) (*Firmware, error)
	RetrieveFirmware(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (*Firmware, error)
	UpdateFirmware(ctx context.Context, in *Firmware, opts ...grpc.CallOption) (*Firmware, error)
	DeleteFirmware(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (*Firmware, error)
	ListFirmware(ctx context.Context, in *ListFirmwareRequest, opts ...grpc.CallOption) (*ListFirmwareResponse, error)
	FirmwareUsage(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (*FirmwareUsageResponse, error)
	// List tags on firmware image.
	ListFirmwareTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// Update tags on firmware images
	UpdateFirmwareTags(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// Get the value of a particular tag
	GetFirmwareTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Delete a tag from its name.
	DeleteFirmwareTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Update a single tag value. If the tag value is empty the tag will be
	// removed.
	UpdateFirmwareTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Create a new output
	CreateOutput(ctx context.Context, in *Output, opts ...grpc.CallOption) (*Output, error)
	// Retrieve an output
	RetrieveOutput(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*Output, error)
	// Update output. Running outputs will be restarted if required. Note that
	// the collection ID can't be changed on an existing output.
	UpdateOutput(ctx context.Context, in *Output, opts ...grpc.CallOption) (*Output, error)
	// Delete output
	DeleteOutput(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*Output, error)
	// Get a list of outputs
	ListOutputs(ctx context.Context, in *ListOutputRequest, opts ...grpc.CallOption) (*ListOutputResponse, error)
	// Get logs for output
	Logs(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputLogs, error)
	// Get output status
	Status(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputStatus, error)
	// List tags on token.
	ListOutputTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// Update tags on output.
	UpdateOutputTags(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// Get the value of a particular tag
	GetOutputTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Delete a tag from its name.
	DeleteOutputTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Update a single tag value. If the tag value is empty the tag will be
	// removed.
	UpdateOutputTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Get system information
	GetSystemInfo(ctx context.Context, in *SystemInfoRequest, opts ...grpc.CallOption) (*SystemInfoResponse, error)
	// DataDump does a complete data dump of your data, devices, outputs and
	// collections.
	DataDump(ctx context.Context, in *DataDumpRequest, opts ...grpc.CallOption) (*DataDumpResponse, error)
	// Get the profile of the logged in user.
	GetUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfile, error)
	// Create a new team.
	CreateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error)
	// Retrieve a team
	RetrieveTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*Team, error)
	// List the team members.
	RetrieveTeamMembers(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*MemberList, error)
	// Retrieve a member of the team.
	RetrieveMember(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*Member, error)
	// Update member settings. You must be an administrator to do this.
	UpdateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error)
	// Remove a member from the team. You must be an administrator to do this. You
	// can't remove yourself from the team.
	DeleteMember(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*Member, error)
	// Update the team. You must be an administrator of the team to edit it.
	UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error)
	// Remove a team. You must be administrator for the team and the team can't
	// have any members besides you.
	DeleteTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*Team, error)
	// List all teams that you are a member of.
	ListTeams(ctx context.Context, in *ListTeamRequest, opts ...grpc.CallOption) (*TeamList, error)
	// Genereate a new invite for the team
	GenerateInvite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*Invite, error)
	// List the invites generated for the team.
	ListInvites(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*InviteList, error)
	// Read a single invite from the team's set of non-redeemed invites.
	RetrieveInvite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*Invite, error)
	// Accept an invite from another user. This will add the currently logged in
	// user to the team as a regular memeber. When the invite is accepted it is
	// removed from the team's invites and cannot be reused.
	AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*Team, error)
	// Delete an invite created earlier. You must be an administrator of the team
	// to perform this action
	DeleteInvite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*DeleteInviteResponse, error)
	// List tags on team.
	ListTeamTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// Update tags on team. This will add and update tags. Existing tags that
	// aren't updated or added will be kept. If a tag has a blank value it will
	// be removed.
	UpdateTeamTags(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// Get the value of a particular tag
	GetTeamTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Delete a tag from the team.
	DeleteTeamTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Update a single tag value. If the tag value is empty the tag will be
	// removed.
	UpdateTeamTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	CreateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
	DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenResponse, error)
	ListTokens(ctx context.Context, in *ListTokenRequest, opts ...grpc.CallOption) (*TokenList, error)
	RetrieveToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*Token, error)
	UpdateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error)
	// List tags on token.
	ListTokenTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// Update tags on token. This will add and update tags. Existing tags that
	// aren't updated or added will be kept. If a tag has a blank value it will
	// be removed.
	UpdateTokenTags(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// Get the value of a particular tag
	GetTokenTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Delete a tag from its name.
	DeleteTokenTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
	// Update a single tag value. If the tag value is empty the tag will be
	// removed.
	UpdateTokenTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error)
}

type hordeClient struct {
	cc *grpc.ClientConn
}

func NewHordeClient(cc *grpc.ClientConn) HordeClient {
	return &hordeClient{cc}
}

func (c *hordeClient) CreateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/apipb.Horde/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateCollection(ctx context.Context, in *Collection, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListCollections(ctx context.Context, in *ListCollectionRequest, opts ...grpc.CallOption) (*ListCollectionResponse, error) {
	out := new(ListCollectionResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) RetrieveCollection(ctx context.Context, in *RetrieveCollectionRequest, opts ...grpc.CallOption) (*Collection, error) {
	out := new(Collection)
	err := c.cc.Invoke(ctx, "/apipb.Horde/RetrieveCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListCollectionMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListCollectionMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) BroadcastMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*MultiSendMessageResponse, error) {
	out := new(MultiSendMessageResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/BroadcastMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) MessageStream(ctx context.Context, in *MessageStreamRequest, opts ...grpc.CallOption) (Horde_MessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Horde_serviceDesc.Streams[0], "/apipb.Horde/MessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &hordeMessageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Horde_MessageStreamClient interface {
	Recv() (*OutputDataMessage, error)
	grpc.ClientStream
}

type hordeMessageStreamClient struct {
	grpc.ClientStream
}

func (x *hordeMessageStreamClient) Recv() (*OutputDataMessage, error) {
	m := new(OutputDataMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hordeClient) ListCollectionTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListCollectionTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateCollectionTags(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateCollectionTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) GetCollectionTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/GetCollectionTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteCollectionTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteCollectionTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateCollectionTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateCollectionTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) CreateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/apipb.Horde/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) RetrieveDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/apipb.Horde/RetrieveDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListDeviceMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListDeviceMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ClearFirmwareError(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*ClearFirmwareErrorResponse, error) {
	out := new(ClearFirmwareErrorResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ClearFirmwareError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListDeviceTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListDeviceTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateDeviceTags(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateDeviceTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) GetDeviceTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/GetDeviceTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteDeviceTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteDeviceTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateDeviceTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateDeviceTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) CreateFirmware(ctx context.Context, in *CreateFirmwareRequest, opts ...grpc.CallOption) (*Firmware, error) {
	out := new(Firmware)
	err := c.cc.Invoke(ctx, "/apipb.Horde/CreateFirmware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) RetrieveFirmware(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (*Firmware, error) {
	out := new(Firmware)
	err := c.cc.Invoke(ctx, "/apipb.Horde/RetrieveFirmware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateFirmware(ctx context.Context, in *Firmware, opts ...grpc.CallOption) (*Firmware, error) {
	out := new(Firmware)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateFirmware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteFirmware(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (*Firmware, error) {
	out := new(Firmware)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteFirmware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListFirmware(ctx context.Context, in *ListFirmwareRequest, opts ...grpc.CallOption) (*ListFirmwareResponse, error) {
	out := new(ListFirmwareResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListFirmware", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) FirmwareUsage(ctx context.Context, in *FirmwareRequest, opts ...grpc.CallOption) (*FirmwareUsageResponse, error) {
	out := new(FirmwareUsageResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/FirmwareUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListFirmwareTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListFirmwareTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateFirmwareTags(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateFirmwareTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) GetFirmwareTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/GetFirmwareTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteFirmwareTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteFirmwareTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateFirmwareTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateFirmwareTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) CreateOutput(ctx context.Context, in *Output, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/apipb.Horde/CreateOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) RetrieveOutput(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/apipb.Horde/RetrieveOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateOutput(ctx context.Context, in *Output, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteOutput(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListOutputs(ctx context.Context, in *ListOutputRequest, opts ...grpc.CallOption) (*ListOutputResponse, error) {
	out := new(ListOutputResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListOutputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) Logs(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputLogs, error) {
	out := new(OutputLogs)
	err := c.cc.Invoke(ctx, "/apipb.Horde/Logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) Status(ctx context.Context, in *OutputRequest, opts ...grpc.CallOption) (*OutputStatus, error) {
	out := new(OutputStatus)
	err := c.cc.Invoke(ctx, "/apipb.Horde/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListOutputTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListOutputTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateOutputTags(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateOutputTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) GetOutputTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/GetOutputTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteOutputTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteOutputTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateOutputTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateOutputTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) GetSystemInfo(ctx context.Context, in *SystemInfoRequest, opts ...grpc.CallOption) (*SystemInfoResponse, error) {
	out := new(SystemInfoResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/GetSystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DataDump(ctx context.Context, in *DataDumpRequest, opts ...grpc.CallOption) (*DataDumpResponse, error) {
	out := new(DataDumpResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DataDump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) GetUserProfile(ctx context.Context, in *UserProfileRequest, opts ...grpc.CallOption) (*UserProfile, error) {
	out := new(UserProfile)
	err := c.cc.Invoke(ctx, "/apipb.Horde/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) CreateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/apipb.Horde/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) RetrieveTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/apipb.Horde/RetrieveTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) RetrieveTeamMembers(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*MemberList, error) {
	out := new(MemberList)
	err := c.cc.Invoke(ctx, "/apipb.Horde/RetrieveTeamMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) RetrieveMember(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/apipb.Horde/RetrieveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteMember(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*Member, error) {
	out := new(Member)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteTeam(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListTeams(ctx context.Context, in *ListTeamRequest, opts ...grpc.CallOption) (*TeamList, error) {
	out := new(TeamList)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) GenerateInvite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*Invite, error) {
	out := new(Invite)
	err := c.cc.Invoke(ctx, "/apipb.Horde/GenerateInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListInvites(ctx context.Context, in *TeamRequest, opts ...grpc.CallOption) (*InviteList, error) {
	out := new(InviteList)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) RetrieveInvite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*Invite, error) {
	out := new(Invite)
	err := c.cc.Invoke(ctx, "/apipb.Horde/RetrieveInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) AcceptInvite(ctx context.Context, in *AcceptInviteRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/apipb.Horde/AcceptInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteInvite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*DeleteInviteResponse, error) {
	out := new(DeleteInviteResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListTeamTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListTeamTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateTeamTags(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateTeamTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) GetTeamTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/GetTeamTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteTeamTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteTeamTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateTeamTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateTeamTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) CreateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/apipb.Horde/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenResponse, error) {
	out := new(DeleteTokenResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListTokens(ctx context.Context, in *ListTokenRequest, opts ...grpc.CallOption) (*TokenList, error) {
	out := new(TokenList)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) RetrieveToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/apipb.Horde/RetrieveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) ListTokenTags(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/ListTokenTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateTokenTags(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateTokenTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) GetTokenTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/GetTokenTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) DeleteTokenTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/DeleteTokenTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeClient) UpdateTokenTag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagValueResponse, error) {
	out := new(TagValueResponse)
	err := c.cc.Invoke(ctx, "/apipb.Horde/UpdateTokenTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HordeServer is the server API for Horde service.
type HordeServer interface {
	// Create a new collection. The returned collection is the collection stored
	// in the backend. Defaults have been set. There are no required fields in a
	// collection
	CreateCollection(context.Context, *Collection) (*Collection, error)
	// Update the collection
	UpdateCollection(context.Context, *Collection) (*Collection, error)
	// Delete a collection. You must have read and write access to the collection
	DeleteCollection(context.Context, *DeleteCollectionRequest) (*Collection, error)
	// List the collections you have access to.
	ListCollections(context.Context, *ListCollectionRequest) (*ListCollectionResponse, error)
	// Retrieve a single collection
	RetrieveCollection(context.Context, *RetrieveCollectionRequest) (*Collection, error)
	// List messages sent by the devices in this collection.
	ListCollectionMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	// Broadcast a message to all devices in the collection. This request will
	// always succeed if the collection exists, even if there are one or more send
	// errors. Individual errors are returned as an array of error messages in the
	// response. Use equivalent to resource for devices to send a message to
	// single device.
	BroadcastMessage(context.Context, *SendMessageRequest) (*MultiSendMessageResponse, error)
	// Get a stream of messages. If the device ID is set on the request the stream
	// will be limited to only messages from that particular device.
	MessageStream(*MessageStreamRequest, Horde_MessageStreamServer) error
	// List tags on collection.
	ListCollectionTags(context.Context, *TagRequest) (*TagResponse, error)
	// Update tags on token. This will add and update tags. Existing tags that
	// aren't updated or added will be kept. If a tag has a blank value it will
	// be removed.
	UpdateCollectionTags(context.Context, *UpdateTagRequest) (*TagResponse, error)
	// Get the value of a particular tag
	GetCollectionTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Delete a tag from the collection
	DeleteCollectionTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Update a single tag value. If the tag value is empty the tag will be
	// removed.
	UpdateCollectionTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Create a new device. This will add a device to the collection. You must
	// have write access to the collection.
	CreateDevice(context.Context, *Device) (*Device, error)
	// Retrieve the device
	RetrieveDevice(context.Context, *DeviceRequest) (*Device, error)
	// Update the device
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*Device, error)
	// Remove a device
	DeleteDevice(context.Context, *DeviceRequest) (*Device, error)
	// List the devices
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	// List messages sent by the device
	ListDeviceMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	// Send a message to the device
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	ClearFirmwareError(context.Context, *DeviceRequest) (*ClearFirmwareErrorResponse, error)
	// List tags on device.
	ListDeviceTags(context.Context, *TagRequest) (*TagResponse, error)
	// Update tags on device. This will add and update tags. Existing tags that
	// aren't updated or added will be kept. If a tag has a blank value it will
	// be removed.
	UpdateDeviceTags(context.Context, *UpdateTagRequest) (*TagResponse, error)
	// Get the value of a particular tag
	GetDeviceTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Delete a tag from its name.
	DeleteDeviceTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Update a single tag value. If the tag value is empty the tag will be
	// removed.
	UpdateDeviceTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Create a new firmware image. This is also invoked by the custom HTTP
	// uploader if the POST uses multipart/formdata for the request.
	CreateFirmware(context.Context, *CreateFirmwareRequest) (*Firmware, error)
	RetrieveFirmware(context.Context, *FirmwareRequest) (*Firmware, error)
	UpdateFirmware(context.Context, *Firmware) (*Firmware, error)
	DeleteFirmware(context.Context, *FirmwareRequest) (*Firmware, error)
	ListFirmware(context.Context, *ListFirmwareRequest) (*ListFirmwareResponse, error)
	FirmwareUsage(context.Context, *FirmwareRequest) (*FirmwareUsageResponse, error)
	// List tags on firmware image.
	ListFirmwareTags(context.Context, *TagRequest) (*TagResponse, error)
	// Update tags on firmware images
	UpdateFirmwareTags(context.Context, *UpdateTagRequest) (*TagResponse, error)
	// Get the value of a particular tag
	GetFirmwareTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Delete a tag from its name.
	DeleteFirmwareTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Update a single tag value. If the tag value is empty the tag will be
	// removed.
	UpdateFirmwareTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Create a new output
	CreateOutput(context.Context, *Output) (*Output, error)
	// Retrieve an output
	RetrieveOutput(context.Context, *OutputRequest) (*Output, error)
	// Update output. Running outputs will be restarted if required. Note that
	// the collection ID can't be changed on an existing output.
	UpdateOutput(context.Context, *Output) (*Output, error)
	// Delete output
	DeleteOutput(context.Context, *OutputRequest) (*Output, error)
	// Get a list of outputs
	ListOutputs(context.Context, *ListOutputRequest) (*ListOutputResponse, error)
	// Get logs for output
	Logs(context.Context, *OutputRequest) (*OutputLogs, error)
	// Get output status
	Status(context.Context, *OutputRequest) (*OutputStatus, error)
	// List tags on token.
	ListOutputTags(context.Context, *TagRequest) (*TagResponse, error)
	// Update tags on output.
	UpdateOutputTags(context.Context, *UpdateTagRequest) (*TagResponse, error)
	// Get the value of a particular tag
	GetOutputTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Delete a tag from its name.
	DeleteOutputTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Update a single tag value. If the tag value is empty the tag will be
	// removed.
	UpdateOutputTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Get system information
	GetSystemInfo(context.Context, *SystemInfoRequest) (*SystemInfoResponse, error)
	// DataDump does a complete data dump of your data, devices, outputs and
	// collections.
	DataDump(context.Context, *DataDumpRequest) (*DataDumpResponse, error)
	// Get the profile of the logged in user.
	GetUserProfile(context.Context, *UserProfileRequest) (*UserProfile, error)
	// Create a new team.
	CreateTeam(context.Context, *Team) (*Team, error)
	// Retrieve a team
	RetrieveTeam(context.Context, *TeamRequest) (*Team, error)
	// List the team members.
	RetrieveTeamMembers(context.Context, *TeamRequest) (*MemberList, error)
	// Retrieve a member of the team.
	RetrieveMember(context.Context, *MemberRequest) (*Member, error)
	// Update member settings. You must be an administrator to do this.
	UpdateMember(context.Context, *Member) (*Member, error)
	// Remove a member from the team. You must be an administrator to do this. You
	// can't remove yourself from the team.
	DeleteMember(context.Context, *MemberRequest) (*Member, error)
	// Update the team. You must be an administrator of the team to edit it.
	UpdateTeam(context.Context, *Team) (*Team, error)
	// Remove a team. You must be administrator for the team and the team can't
	// have any members besides you.
	DeleteTeam(context.Context, *TeamRequest) (*Team, error)
	// List all teams that you are a member of.
	ListTeams(context.Context, *ListTeamRequest) (*TeamList, error)
	// Genereate a new invite for the team
	GenerateInvite(context.Context, *InviteRequest) (*Invite, error)
	// List the invites generated for the team.
	ListInvites(context.Context, *TeamRequest) (*InviteList, error)
	// Read a single invite from the team's set of non-redeemed invites.
	RetrieveInvite(context.Context, *InviteRequest) (*Invite, error)
	// Accept an invite from another user. This will add the currently logged in
	// user to the team as a regular memeber. When the invite is accepted it is
	// removed from the team's invites and cannot be reused.
	AcceptInvite(context.Context, *AcceptInviteRequest) (*Team, error)
	// Delete an invite created earlier. You must be an administrator of the team
	// to perform this action
	DeleteInvite(context.Context, *InviteRequest) (*DeleteInviteResponse, error)
	// List tags on team.
	ListTeamTags(context.Context, *TagRequest) (*TagResponse, error)
	// Update tags on team. This will add and update tags. Existing tags that
	// aren't updated or added will be kept. If a tag has a blank value it will
	// be removed.
	UpdateTeamTags(context.Context, *UpdateTagRequest) (*TagResponse, error)
	// Get the value of a particular tag
	GetTeamTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Delete a tag from the team.
	DeleteTeamTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Update a single tag value. If the tag value is empty the tag will be
	// removed.
	UpdateTeamTag(context.Context, *TagRequest) (*TagValueResponse, error)
	CreateToken(context.Context, *Token) (*Token, error)
	DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteTokenResponse, error)
	ListTokens(context.Context, *ListTokenRequest) (*TokenList, error)
	RetrieveToken(context.Context, *TokenRequest) (*Token, error)
	UpdateToken(context.Context, *Token) (*Token, error)
	// List tags on token.
	ListTokenTags(context.Context, *TagRequest) (*TagResponse, error)
	// Update tags on token. This will add and update tags. Existing tags that
	// aren't updated or added will be kept. If a tag has a blank value it will
	// be removed.
	UpdateTokenTags(context.Context, *UpdateTagRequest) (*TagResponse, error)
	// Get the value of a particular tag
	GetTokenTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Delete a tag from its name.
	DeleteTokenTag(context.Context, *TagRequest) (*TagValueResponse, error)
	// Update a single tag value. If the tag value is empty the tag will be
	// removed.
	UpdateTokenTag(context.Context, *TagRequest) (*TagValueResponse, error)
}

// UnimplementedHordeServer can be embedded to have forward compatible implementations.
type UnimplementedHordeServer struct {
}

func (*UnimplementedHordeServer) CreateCollection(ctx context.Context, req *Collection) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (*UnimplementedHordeServer) UpdateCollection(ctx context.Context, req *Collection) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (*UnimplementedHordeServer) DeleteCollection(ctx context.Context, req *DeleteCollectionRequest) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (*UnimplementedHordeServer) ListCollections(ctx context.Context, req *ListCollectionRequest) (*ListCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (*UnimplementedHordeServer) RetrieveCollection(ctx context.Context, req *RetrieveCollectionRequest) (*Collection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCollection not implemented")
}
func (*UnimplementedHordeServer) ListCollectionMessages(ctx context.Context, req *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionMessages not implemented")
}
func (*UnimplementedHordeServer) BroadcastMessage(ctx context.Context, req *SendMessageRequest) (*MultiSendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastMessage not implemented")
}
func (*UnimplementedHordeServer) MessageStream(req *MessageStreamRequest, srv Horde_MessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MessageStream not implemented")
}
func (*UnimplementedHordeServer) ListCollectionTags(ctx context.Context, req *TagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionTags not implemented")
}
func (*UnimplementedHordeServer) UpdateCollectionTags(ctx context.Context, req *UpdateTagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionTags not implemented")
}
func (*UnimplementedHordeServer) GetCollectionTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionTag not implemented")
}
func (*UnimplementedHordeServer) DeleteCollectionTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollectionTag not implemented")
}
func (*UnimplementedHordeServer) UpdateCollectionTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionTag not implemented")
}
func (*UnimplementedHordeServer) CreateDevice(ctx context.Context, req *Device) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (*UnimplementedHordeServer) RetrieveDevice(ctx context.Context, req *DeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveDevice not implemented")
}
func (*UnimplementedHordeServer) UpdateDevice(ctx context.Context, req *UpdateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (*UnimplementedHordeServer) DeleteDevice(ctx context.Context, req *DeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (*UnimplementedHordeServer) ListDevices(ctx context.Context, req *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (*UnimplementedHordeServer) ListDeviceMessages(ctx context.Context, req *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceMessages not implemented")
}
func (*UnimplementedHordeServer) SendMessage(ctx context.Context, req *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedHordeServer) ClearFirmwareError(ctx context.Context, req *DeviceRequest) (*ClearFirmwareErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearFirmwareError not implemented")
}
func (*UnimplementedHordeServer) ListDeviceTags(ctx context.Context, req *TagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceTags not implemented")
}
func (*UnimplementedHordeServer) UpdateDeviceTags(ctx context.Context, req *UpdateTagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceTags not implemented")
}
func (*UnimplementedHordeServer) GetDeviceTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceTag not implemented")
}
func (*UnimplementedHordeServer) DeleteDeviceTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceTag not implemented")
}
func (*UnimplementedHordeServer) UpdateDeviceTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceTag not implemented")
}
func (*UnimplementedHordeServer) CreateFirmware(ctx context.Context, req *CreateFirmwareRequest) (*Firmware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFirmware not implemented")
}
func (*UnimplementedHordeServer) RetrieveFirmware(ctx context.Context, req *FirmwareRequest) (*Firmware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveFirmware not implemented")
}
func (*UnimplementedHordeServer) UpdateFirmware(ctx context.Context, req *Firmware) (*Firmware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFirmware not implemented")
}
func (*UnimplementedHordeServer) DeleteFirmware(ctx context.Context, req *FirmwareRequest) (*Firmware, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFirmware not implemented")
}
func (*UnimplementedHordeServer) ListFirmware(ctx context.Context, req *ListFirmwareRequest) (*ListFirmwareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFirmware not implemented")
}
func (*UnimplementedHordeServer) FirmwareUsage(ctx context.Context, req *FirmwareRequest) (*FirmwareUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirmwareUsage not implemented")
}
func (*UnimplementedHordeServer) ListFirmwareTags(ctx context.Context, req *TagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFirmwareTags not implemented")
}
func (*UnimplementedHordeServer) UpdateFirmwareTags(ctx context.Context, req *UpdateTagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFirmwareTags not implemented")
}
func (*UnimplementedHordeServer) GetFirmwareTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirmwareTag not implemented")
}
func (*UnimplementedHordeServer) DeleteFirmwareTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFirmwareTag not implemented")
}
func (*UnimplementedHordeServer) UpdateFirmwareTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFirmwareTag not implemented")
}
func (*UnimplementedHordeServer) CreateOutput(ctx context.Context, req *Output) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOutput not implemented")
}
func (*UnimplementedHordeServer) RetrieveOutput(ctx context.Context, req *OutputRequest) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveOutput not implemented")
}
func (*UnimplementedHordeServer) UpdateOutput(ctx context.Context, req *Output) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOutput not implemented")
}
func (*UnimplementedHordeServer) DeleteOutput(ctx context.Context, req *OutputRequest) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOutput not implemented")
}
func (*UnimplementedHordeServer) ListOutputs(ctx context.Context, req *ListOutputRequest) (*ListOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutputs not implemented")
}
func (*UnimplementedHordeServer) Logs(ctx context.Context, req *OutputRequest) (*OutputLogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (*UnimplementedHordeServer) Status(ctx context.Context, req *OutputRequest) (*OutputStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedHordeServer) ListOutputTags(ctx context.Context, req *TagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOutputTags not implemented")
}
func (*UnimplementedHordeServer) UpdateOutputTags(ctx context.Context, req *UpdateTagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOutputTags not implemented")
}
func (*UnimplementedHordeServer) GetOutputTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutputTag not implemented")
}
func (*UnimplementedHordeServer) DeleteOutputTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOutputTag not implemented")
}
func (*UnimplementedHordeServer) UpdateOutputTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOutputTag not implemented")
}
func (*UnimplementedHordeServer) GetSystemInfo(ctx context.Context, req *SystemInfoRequest) (*SystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (*UnimplementedHordeServer) DataDump(ctx context.Context, req *DataDumpRequest) (*DataDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataDump not implemented")
}
func (*UnimplementedHordeServer) GetUserProfile(ctx context.Context, req *UserProfileRequest) (*UserProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (*UnimplementedHordeServer) CreateTeam(ctx context.Context, req *Team) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (*UnimplementedHordeServer) RetrieveTeam(ctx context.Context, req *TeamRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTeam not implemented")
}
func (*UnimplementedHordeServer) RetrieveTeamMembers(ctx context.Context, req *TeamRequest) (*MemberList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTeamMembers not implemented")
}
func (*UnimplementedHordeServer) RetrieveMember(ctx context.Context, req *MemberRequest) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMember not implemented")
}
func (*UnimplementedHordeServer) UpdateMember(ctx context.Context, req *Member) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (*UnimplementedHordeServer) DeleteMember(ctx context.Context, req *MemberRequest) (*Member, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (*UnimplementedHordeServer) UpdateTeam(ctx context.Context, req *Team) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (*UnimplementedHordeServer) DeleteTeam(ctx context.Context, req *TeamRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (*UnimplementedHordeServer) ListTeams(ctx context.Context, req *ListTeamRequest) (*TeamList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (*UnimplementedHordeServer) GenerateInvite(ctx context.Context, req *InviteRequest) (*Invite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvite not implemented")
}
func (*UnimplementedHordeServer) ListInvites(ctx context.Context, req *TeamRequest) (*InviteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvites not implemented")
}
func (*UnimplementedHordeServer) RetrieveInvite(ctx context.Context, req *InviteRequest) (*Invite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveInvite not implemented")
}
func (*UnimplementedHordeServer) AcceptInvite(ctx context.Context, req *AcceptInviteRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvite not implemented")
}
func (*UnimplementedHordeServer) DeleteInvite(ctx context.Context, req *InviteRequest) (*DeleteInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvite not implemented")
}
func (*UnimplementedHordeServer) ListTeamTags(ctx context.Context, req *TagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamTags not implemented")
}
func (*UnimplementedHordeServer) UpdateTeamTags(ctx context.Context, req *UpdateTagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamTags not implemented")
}
func (*UnimplementedHordeServer) GetTeamTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamTag not implemented")
}
func (*UnimplementedHordeServer) DeleteTeamTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeamTag not implemented")
}
func (*UnimplementedHordeServer) UpdateTeamTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamTag not implemented")
}
func (*UnimplementedHordeServer) CreateToken(ctx context.Context, req *Token) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (*UnimplementedHordeServer) DeleteToken(ctx context.Context, req *DeleteTokenRequest) (*DeleteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (*UnimplementedHordeServer) ListTokens(ctx context.Context, req *ListTokenRequest) (*TokenList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokens not implemented")
}
func (*UnimplementedHordeServer) RetrieveToken(ctx context.Context, req *TokenRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveToken not implemented")
}
func (*UnimplementedHordeServer) UpdateToken(ctx context.Context, req *Token) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (*UnimplementedHordeServer) ListTokenTags(ctx context.Context, req *TagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokenTags not implemented")
}
func (*UnimplementedHordeServer) UpdateTokenTags(ctx context.Context, req *UpdateTagRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTokenTags not implemented")
}
func (*UnimplementedHordeServer) GetTokenTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenTag not implemented")
}
func (*UnimplementedHordeServer) DeleteTokenTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTokenTag not implemented")
}
func (*UnimplementedHordeServer) UpdateTokenTag(ctx context.Context, req *TagRequest) (*TagValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTokenTag not implemented")
}

func RegisterHordeServer(s *grpc.Server, srv HordeServer) {
	s.RegisterService(&_Horde_serviceDesc, srv)
}

func _Horde_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).CreateCollection(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Collection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateCollection(ctx, req.(*Collection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteCollection(ctx, req.(*DeleteCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListCollections(ctx, req.(*ListCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_RetrieveCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).RetrieveCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/RetrieveCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).RetrieveCollection(ctx, req.(*RetrieveCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListCollectionMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListCollectionMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListCollectionMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListCollectionMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_BroadcastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).BroadcastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/BroadcastMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).BroadcastMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_MessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessageStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HordeServer).MessageStream(m, &hordeMessageStreamServer{stream})
}

type Horde_MessageStreamServer interface {
	Send(*OutputDataMessage) error
	grpc.ServerStream
}

type hordeMessageStreamServer struct {
	grpc.ServerStream
}

func (x *hordeMessageStreamServer) Send(m *OutputDataMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Horde_ListCollectionTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListCollectionTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListCollectionTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListCollectionTags(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateCollectionTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateCollectionTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateCollectionTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateCollectionTags(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_GetCollectionTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).GetCollectionTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/GetCollectionTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).GetCollectionTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteCollectionTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteCollectionTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteCollectionTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteCollectionTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateCollectionTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateCollectionTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateCollectionTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateCollectionTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).CreateDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_RetrieveDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).RetrieveDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/RetrieveDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).RetrieveDevice(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteDevice(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListDeviceMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListDeviceMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListDeviceMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListDeviceMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ClearFirmwareError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ClearFirmwareError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ClearFirmwareError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ClearFirmwareError(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListDeviceTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListDeviceTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListDeviceTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListDeviceTags(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateDeviceTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateDeviceTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateDeviceTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateDeviceTags(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_GetDeviceTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).GetDeviceTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/GetDeviceTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).GetDeviceTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteDeviceTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteDeviceTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteDeviceTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteDeviceTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateDeviceTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateDeviceTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateDeviceTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateDeviceTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_CreateFirmware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFirmwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).CreateFirmware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/CreateFirmware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).CreateFirmware(ctx, req.(*CreateFirmwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_RetrieveFirmware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).RetrieveFirmware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/RetrieveFirmware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).RetrieveFirmware(ctx, req.(*FirmwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateFirmware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Firmware)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateFirmware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateFirmware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateFirmware(ctx, req.(*Firmware))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteFirmware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteFirmware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteFirmware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteFirmware(ctx, req.(*FirmwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListFirmware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFirmwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListFirmware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListFirmware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListFirmware(ctx, req.(*ListFirmwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_FirmwareUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).FirmwareUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/FirmwareUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).FirmwareUsage(ctx, req.(*FirmwareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListFirmwareTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListFirmwareTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListFirmwareTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListFirmwareTags(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateFirmwareTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateFirmwareTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateFirmwareTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateFirmwareTags(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_GetFirmwareTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).GetFirmwareTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/GetFirmwareTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).GetFirmwareTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteFirmwareTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteFirmwareTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteFirmwareTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteFirmwareTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateFirmwareTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateFirmwareTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateFirmwareTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateFirmwareTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_CreateOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Output)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).CreateOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/CreateOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).CreateOutput(ctx, req.(*Output))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_RetrieveOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).RetrieveOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/RetrieveOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).RetrieveOutput(ctx, req.(*OutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Output)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateOutput(ctx, req.(*Output))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteOutput(ctx, req.(*OutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListOutputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListOutputs(ctx, req.(*ListOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/Logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).Logs(ctx, req.(*OutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).Status(ctx, req.(*OutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListOutputTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListOutputTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListOutputTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListOutputTags(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateOutputTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateOutputTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateOutputTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateOutputTags(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_GetOutputTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).GetOutputTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/GetOutputTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).GetOutputTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteOutputTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteOutputTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteOutputTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteOutputTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateOutputTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateOutputTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateOutputTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateOutputTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/GetSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).GetSystemInfo(ctx, req.(*SystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DataDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DataDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DataDump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DataDump(ctx, req.(*DataDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).GetUserProfile(ctx, req.(*UserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).CreateTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_RetrieveTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).RetrieveTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/RetrieveTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).RetrieveTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_RetrieveTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).RetrieveTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/RetrieveTeamMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).RetrieveTeamMembers(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_RetrieveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).RetrieveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/RetrieveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).RetrieveMember(ctx, req.(*MemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteMember(ctx, req.(*MemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteTeam(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListTeams(ctx, req.(*ListTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_GenerateInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).GenerateInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/GenerateInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).GenerateInvite(ctx, req.(*InviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListInvites(ctx, req.(*TeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_RetrieveInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).RetrieveInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/RetrieveInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).RetrieveInvite(ctx, req.(*InviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_AcceptInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).AcceptInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/AcceptInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).AcceptInvite(ctx, req.(*AcceptInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteInvite(ctx, req.(*InviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListTeamTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListTeamTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListTeamTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListTeamTags(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateTeamTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateTeamTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateTeamTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateTeamTags(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_GetTeamTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).GetTeamTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/GetTeamTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).GetTeamTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteTeamTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteTeamTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteTeamTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteTeamTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateTeamTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateTeamTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateTeamTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateTeamTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).CreateToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteToken(ctx, req.(*DeleteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListTokens(ctx, req.(*ListTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_RetrieveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).RetrieveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/RetrieveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).RetrieveToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_ListTokenTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).ListTokenTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/ListTokenTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).ListTokenTags(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateTokenTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateTokenTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateTokenTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateTokenTags(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_GetTokenTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).GetTokenTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/GetTokenTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).GetTokenTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_DeleteTokenTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).DeleteTokenTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/DeleteTokenTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).DeleteTokenTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Horde_UpdateTokenTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeServer).UpdateTokenTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Horde/UpdateTokenTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeServer).UpdateTokenTag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Horde_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.Horde",
	HandlerType: (*HordeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _Horde_CreateCollection_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _Horde_UpdateCollection_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _Horde_DeleteCollection_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _Horde_ListCollections_Handler,
		},
		{
			MethodName: "RetrieveCollection",
			Handler:    _Horde_RetrieveCollection_Handler,
		},
		{
			MethodName: "ListCollectionMessages",
			Handler:    _Horde_ListCollectionMessages_Handler,
		},
		{
			MethodName: "BroadcastMessage",
			Handler:    _Horde_BroadcastMessage_Handler,
		},
		{
			MethodName: "ListCollectionTags",
			Handler:    _Horde_ListCollectionTags_Handler,
		},
		{
			MethodName: "UpdateCollectionTags",
			Handler:    _Horde_UpdateCollectionTags_Handler,
		},
		{
			MethodName: "GetCollectionTag",
			Handler:    _Horde_GetCollectionTag_Handler,
		},
		{
			MethodName: "DeleteCollectionTag",
			Handler:    _Horde_DeleteCollectionTag_Handler,
		},
		{
			MethodName: "UpdateCollectionTag",
			Handler:    _Horde_UpdateCollectionTag_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _Horde_CreateDevice_Handler,
		},
		{
			MethodName: "RetrieveDevice",
			Handler:    _Horde_RetrieveDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _Horde_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _Horde_DeleteDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _Horde_ListDevices_Handler,
		},
		{
			MethodName: "ListDeviceMessages",
			Handler:    _Horde_ListDeviceMessages_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Horde_SendMessage_Handler,
		},
		{
			MethodName: "ClearFirmwareError",
			Handler:    _Horde_ClearFirmwareError_Handler,
		},
		{
			MethodName: "ListDeviceTags",
			Handler:    _Horde_ListDeviceTags_Handler,
		},
		{
			MethodName: "UpdateDeviceTags",
			Handler:    _Horde_UpdateDeviceTags_Handler,
		},
		{
			MethodName: "GetDeviceTag",
			Handler:    _Horde_GetDeviceTag_Handler,
		},
		{
			MethodName: "DeleteDeviceTag",
			Handler:    _Horde_DeleteDeviceTag_Handler,
		},
		{
			MethodName: "UpdateDeviceTag",
			Handler:    _Horde_UpdateDeviceTag_Handler,
		},
		{
			MethodName: "CreateFirmware",
			Handler:    _Horde_CreateFirmware_Handler,
		},
		{
			MethodName: "RetrieveFirmware",
			Handler:    _Horde_RetrieveFirmware_Handler,
		},
		{
			MethodName: "UpdateFirmware",
			Handler:    _Horde_UpdateFirmware_Handler,
		},
		{
			MethodName: "DeleteFirmware",
			Handler:    _Horde_DeleteFirmware_Handler,
		},
		{
			MethodName: "ListFirmware",
			Handler:    _Horde_ListFirmware_Handler,
		},
		{
			MethodName: "FirmwareUsage",
			Handler:    _Horde_FirmwareUsage_Handler,
		},
		{
			MethodName: "ListFirmwareTags",
			Handler:    _Horde_ListFirmwareTags_Handler,
		},
		{
			MethodName: "UpdateFirmwareTags",
			Handler:    _Horde_UpdateFirmwareTags_Handler,
		},
		{
			MethodName: "GetFirmwareTag",
			Handler:    _Horde_GetFirmwareTag_Handler,
		},
		{
			MethodName: "DeleteFirmwareTag",
			Handler:    _Horde_DeleteFirmwareTag_Handler,
		},
		{
			MethodName: "UpdateFirmwareTag",
			Handler:    _Horde_UpdateFirmwareTag_Handler,
		},
		{
			MethodName: "CreateOutput",
			Handler:    _Horde_CreateOutput_Handler,
		},
		{
			MethodName: "RetrieveOutput",
			Handler:    _Horde_RetrieveOutput_Handler,
		},
		{
			MethodName: "UpdateOutput",
			Handler:    _Horde_UpdateOutput_Handler,
		},
		{
			MethodName: "DeleteOutput",
			Handler:    _Horde_DeleteOutput_Handler,
		},
		{
			MethodName: "ListOutputs",
			Handler:    _Horde_ListOutputs_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _Horde_Logs_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Horde_Status_Handler,
		},
		{
			MethodName: "ListOutputTags",
			Handler:    _Horde_ListOutputTags_Handler,
		},
		{
			MethodName: "UpdateOutputTags",
			Handler:    _Horde_UpdateOutputTags_Handler,
		},
		{
			MethodName: "GetOutputTag",
			Handler:    _Horde_GetOutputTag_Handler,
		},
		{
			MethodName: "DeleteOutputTag",
			Handler:    _Horde_DeleteOutputTag_Handler,
		},
		{
			MethodName: "UpdateOutputTag",
			Handler:    _Horde_UpdateOutputTag_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _Horde_GetSystemInfo_Handler,
		},
		{
			MethodName: "DataDump",
			Handler:    _Horde_DataDump_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _Horde_GetUserProfile_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _Horde_CreateTeam_Handler,
		},
		{
			MethodName: "RetrieveTeam",
			Handler:    _Horde_RetrieveTeam_Handler,
		},
		{
			MethodName: "RetrieveTeamMembers",
			Handler:    _Horde_RetrieveTeamMembers_Handler,
		},
		{
			MethodName: "RetrieveMember",
			Handler:    _Horde_RetrieveMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _Horde_UpdateMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _Horde_DeleteMember_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _Horde_UpdateTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _Horde_DeleteTeam_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _Horde_ListTeams_Handler,
		},
		{
			MethodName: "GenerateInvite",
			Handler:    _Horde_GenerateInvite_Handler,
		},
		{
			MethodName: "ListInvites",
			Handler:    _Horde_ListInvites_Handler,
		},
		{
			MethodName: "RetrieveInvite",
			Handler:    _Horde_RetrieveInvite_Handler,
		},
		{
			MethodName: "AcceptInvite",
			Handler:    _Horde_AcceptInvite_Handler,
		},
		{
			MethodName: "DeleteInvite",
			Handler:    _Horde_DeleteInvite_Handler,
		},
		{
			MethodName: "ListTeamTags",
			Handler:    _Horde_ListTeamTags_Handler,
		},
		{
			MethodName: "UpdateTeamTags",
			Handler:    _Horde_UpdateTeamTags_Handler,
		},
		{
			MethodName: "GetTeamTag",
			Handler:    _Horde_GetTeamTag_Handler,
		},
		{
			MethodName: "DeleteTeamTag",
			Handler:    _Horde_DeleteTeamTag_Handler,
		},
		{
			MethodName: "UpdateTeamTag",
			Handler:    _Horde_UpdateTeamTag_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _Horde_CreateToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _Horde_DeleteToken_Handler,
		},
		{
			MethodName: "ListTokens",
			Handler:    _Horde_ListTokens_Handler,
		},
		{
			MethodName: "RetrieveToken",
			Handler:    _Horde_RetrieveToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _Horde_UpdateToken_Handler,
		},
		{
			MethodName: "ListTokenTags",
			Handler:    _Horde_ListTokenTags_Handler,
		},
		{
			MethodName: "UpdateTokenTags",
			Handler:    _Horde_UpdateTokenTags_Handler,
		},
		{
			MethodName: "GetTokenTag",
			Handler:    _Horde_GetTokenTag_Handler,
		},
		{
			MethodName: "DeleteTokenTag",
			Handler:    _Horde_DeleteTokenTag_Handler,
		},
		{
			MethodName: "UpdateTokenTag",
			Handler:    _Horde_UpdateTokenTag_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessageStream",
			Handler:       _Horde_MessageStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
