// Code generated by protoc-gen-go. DO NOT EDIT.
// source: magpie.proto

package datastore

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DataMessage is both the input and the output from the data store. The
// sequence numbers aren't message identifiers. They are just counters for
// messages to keep track of acknowledgements.
type DataMessage struct {
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// sequence number assigned by the sender.
	CollectionId         string   `protobuf:"bytes,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	DeviceId             string   `protobuf:"bytes,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Created              int64    `protobuf:"varint,4,opt,name=created,proto3" json:"created,omitempty"`
	Metadata             []byte   `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Payload              []byte   `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataMessage) Reset()         { *m = DataMessage{} }
func (m *DataMessage) String() string { return proto.CompactTextString(m) }
func (*DataMessage) ProtoMessage()    {}
func (*DataMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f97d22a07cda9df9, []int{0}
}

func (m *DataMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataMessage.Unmarshal(m, b)
}
func (m *DataMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataMessage.Marshal(b, m, deterministic)
}
func (m *DataMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataMessage.Merge(m, src)
}
func (m *DataMessage) XXX_Size() int {
	return xxx_messageInfo_DataMessage.Size(m)
}
func (m *DataMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DataMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DataMessage proto.InternalMessageInfo

func (m *DataMessage) GetSequence() int64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *DataMessage) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *DataMessage) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DataMessage) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *DataMessage) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DataMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// DataFilter is the filtering parameters for data. collectionId is
type DataFilter struct {
	CollectionId         string   `protobuf:"bytes,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	DeviceId             string   `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	From                 int64    `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	To                   int64    `protobuf:"varint,4,opt,name=to,proto3" json:"to,omitempty"`
	Limit                int32    `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataFilter) Reset()         { *m = DataFilter{} }
func (m *DataFilter) String() string { return proto.CompactTextString(m) }
func (*DataFilter) ProtoMessage()    {}
func (*DataFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_f97d22a07cda9df9, []int{1}
}

func (m *DataFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataFilter.Unmarshal(m, b)
}
func (m *DataFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataFilter.Marshal(b, m, deterministic)
}
func (m *DataFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataFilter.Merge(m, src)
}
func (m *DataFilter) XXX_Size() int {
	return xxx_messageInfo_DataFilter.Size(m)
}
func (m *DataFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_DataFilter.DiscardUnknown(m)
}

var xxx_messageInfo_DataFilter proto.InternalMessageInfo

func (m *DataFilter) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *DataFilter) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DataFilter) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *DataFilter) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *DataFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// Receipt messages are sent by the data store to acknowledge receiption of
// messages.
type Receipt struct {
	Sequence             int64    `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Receipt) Reset()         { *m = Receipt{} }
func (m *Receipt) String() string { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()    {}
func (*Receipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_f97d22a07cda9df9, []int{2}
}

func (m *Receipt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Receipt.Unmarshal(m, b)
}
func (m *Receipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Receipt.Marshal(b, m, deterministic)
}
func (m *Receipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Receipt.Merge(m, src)
}
func (m *Receipt) XXX_Size() int {
	return xxx_messageInfo_Receipt.Size(m)
}
func (m *Receipt) XXX_DiscardUnknown() {
	xxx_messageInfo_Receipt.DiscardUnknown(m)
}

var xxx_messageInfo_Receipt proto.InternalMessageInfo

func (m *Receipt) GetSequence() int64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type DataMetrics struct {
	CollectionId         string   `protobuf:"bytes,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	DeviceId             string   `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	MessageCount         int64    `protobuf:"varint,3,opt,name=messageCount,proto3" json:"messageCount,omitempty"`
	FirstDataPoint       int64    `protobuf:"varint,4,opt,name=firstDataPoint,proto3" json:"firstDataPoint,omitempty"`
	LastDataPoint        int64    `protobuf:"varint,5,opt,name=lastDataPoint,proto3" json:"lastDataPoint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataMetrics) Reset()         { *m = DataMetrics{} }
func (m *DataMetrics) String() string { return proto.CompactTextString(m) }
func (*DataMetrics) ProtoMessage()    {}
func (*DataMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_f97d22a07cda9df9, []int{3}
}

func (m *DataMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataMetrics.Unmarshal(m, b)
}
func (m *DataMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataMetrics.Marshal(b, m, deterministic)
}
func (m *DataMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataMetrics.Merge(m, src)
}
func (m *DataMetrics) XXX_Size() int {
	return xxx_messageInfo_DataMetrics.Size(m)
}
func (m *DataMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_DataMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_DataMetrics proto.InternalMessageInfo

func (m *DataMetrics) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *DataMetrics) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DataMetrics) GetMessageCount() int64 {
	if m != nil {
		return m.MessageCount
	}
	return 0
}

func (m *DataMetrics) GetFirstDataPoint() int64 {
	if m != nil {
		return m.FirstDataPoint
	}
	return 0
}

func (m *DataMetrics) GetLastDataPoint() int64 {
	if m != nil {
		return m.LastDataPoint
	}
	return 0
}

func init() {
	proto.RegisterType((*DataMessage)(nil), "datastore.DataMessage")
	proto.RegisterType((*DataFilter)(nil), "datastore.DataFilter")
	proto.RegisterType((*Receipt)(nil), "datastore.Receipt")
	proto.RegisterType((*DataMetrics)(nil), "datastore.DataMetrics")
}

func init() { proto.RegisterFile("magpie.proto", fileDescriptor_f97d22a07cda9df9) }

var fileDescriptor_f97d22a07cda9df9 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcf, 0x4e, 0xe3, 0x30,
	0x10, 0xc6, 0xe5, 0xb4, 0x69, 0x36, 0xb3, 0xd9, 0x1e, 0xac, 0xdd, 0x55, 0xd4, 0x53, 0x15, 0x01,
	0xca, 0xa9, 0xaa, 0xe0, 0x80, 0xe0, 0xc2, 0x01, 0x04, 0xea, 0x01, 0xa9, 0x0a, 0x4f, 0x60, 0x92,
	0x69, 0x65, 0x29, 0x89, 0x83, 0x33, 0x45, 0xe2, 0x05, 0x78, 0x27, 0x4e, 0xbc, 0x18, 0x07, 0x64,
	0x27, 0x8d, 0xda, 0x22, 0xfe, 0x89, 0x5b, 0xbe, 0x99, 0xf9, 0x26, 0x3f, 0x8f, 0xc7, 0x10, 0x14,
	0x62, 0x59, 0x49, 0x9c, 0x54, 0x5a, 0x91, 0xe2, 0x7e, 0x26, 0x48, 0xd4, 0xa4, 0x34, 0x46, 0x4f,
	0x0c, 0x7e, 0x5f, 0x08, 0x12, 0xd7, 0x58, 0xd7, 0x62, 0x89, 0x7c, 0x04, 0xbf, 0x6a, 0xbc, 0x5b,
	0x61, 0x99, 0x62, 0xc8, 0xc6, 0x2c, 0xee, 0x25, 0x9d, 0xe6, 0x11, 0x04, 0xa9, 0xca, 0x73, 0x4c,
	0x49, 0xaa, 0x72, 0x96, 0x85, 0xce, 0x98, 0xc5, 0x7e, 0xb2, 0x15, 0x33, 0xfe, 0x0c, 0xef, 0x65,
	0x8a, 0xb3, 0x2c, 0xec, 0xd9, 0x7c, 0xa7, 0x79, 0x08, 0x5e, 0xaa, 0x51, 0x10, 0x66, 0x61, 0xdf,
	0xb6, 0x5e, 0x4b, 0xe3, 0x2a, 0x90, 0x84, 0xc1, 0x0a, 0xdd, 0x31, 0x8b, 0x83, 0xa4, 0xd3, 0xc6,
	0x55, 0x89, 0x87, 0x5c, 0x89, 0x2c, 0x1c, 0xd8, 0xd4, 0x5a, 0x46, 0x8f, 0x0c, 0xc0, 0xb0, 0x5f,
	0xca, 0x9c, 0x50, 0xbf, 0xc1, 0x63, 0x9f, 0xe0, 0x39, 0x3b, 0x78, 0x1c, 0xfa, 0x0b, 0xad, 0x0a,
	0x8b, 0xdd, 0x4b, 0xec, 0x37, 0x1f, 0x82, 0x43, 0xaa, 0xa5, 0x75, 0x48, 0xf1, 0xbf, 0xe0, 0xe6,
	0xb2, 0x90, 0x64, 0x29, 0xdd, 0xa4, 0x11, 0xd1, 0x3e, 0x78, 0x09, 0xa6, 0x28, 0x2b, 0xfa, 0x68,
	0x7e, 0xd1, 0x73, 0x37, 0x6b, 0xd2, 0x32, 0xad, 0x7f, 0x0c, 0x1c, 0x41, 0x50, 0x34, 0xd7, 0x76,
	0xae, 0x56, 0x25, 0xb5, 0xe0, 0x5b, 0x31, 0x7e, 0x00, 0xc3, 0x85, 0xd4, 0x35, 0x99, 0xff, 0xce,
	0x95, 0x2c, 0xa9, 0x3d, 0xcc, 0x4e, 0x94, 0xef, 0xc1, 0x9f, 0x5c, 0x6c, 0x96, 0xb9, 0xb6, 0x6c,
	0x3b, 0x78, 0xf8, 0xc2, 0xc0, 0x37, 0xea, 0xc6, 0xec, 0x0e, 0x3f, 0x01, 0x6f, 0xbe, 0xb2, 0x59,
	0xfe, 0x7f, 0xd2, 0xad, 0xd4, 0x64, 0x63, 0x9d, 0x46, 0x7c, 0x23, 0xde, 0x8e, 0x28, 0x66, 0x53,
	0xc6, 0x4f, 0xc1, 0xbb, 0xc2, 0xc6, 0xfa, 0x6f, 0xc7, 0xda, 0xdc, 0xe6, 0xe8, 0x9d, 0x8e, 0x53,
	0xc6, 0xcf, 0x60, 0xd8, 0x7a, 0xd7, 0x83, 0xfc, 0x72, 0x8b, 0xa6, 0xfc, 0x18, 0x7c, 0x7b, 0x80,
	0xef, 0x92, 0xdf, 0x0e, 0xec, 0xf3, 0x39, 0x7a, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x7a, 0x79,
	0xc7, 0x4e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataStoreClient is the client API for DataStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataStoreClient interface {
	// PutData stores messages. Messages are acknowledged when they are written
	// to the underlying data store (whatever that may be).
	PutData(ctx context.Context, opts ...grpc.CallOption) (DataStore_PutDataClient, error)
	// GetData returns data from either a collection (if just collection ID is
	// specified) or a particular device (if both collection ID and device ID is
	// supplied)
	GetData(ctx context.Context, in *DataFilter, opts ...grpc.CallOption) (DataStore_GetDataClient, error)
	// GetDataMetrics returns metrics on data stored. Filtering works similar to
	// the GetData method
	GetDataMetrics(ctx context.Context, in *DataFilter, opts ...grpc.CallOption) (*DataMetrics, error)
	// StoreData is a simpler version of the PutData interface. It's not as
	// performant but easier to implement.
	StoreData(ctx context.Context, in *DataMessage, opts ...grpc.CallOption) (*Receipt, error)
}

type dataStoreClient struct {
	cc *grpc.ClientConn
}

func NewDataStoreClient(cc *grpc.ClientConn) DataStoreClient {
	return &dataStoreClient{cc}
}

func (c *dataStoreClient) PutData(ctx context.Context, opts ...grpc.CallOption) (DataStore_PutDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataStore_serviceDesc.Streams[0], "/datastore.DataStore/PutData", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataStorePutDataClient{stream}
	return x, nil
}

type DataStore_PutDataClient interface {
	Send(*DataMessage) error
	Recv() (*Receipt, error)
	grpc.ClientStream
}

type dataStorePutDataClient struct {
	grpc.ClientStream
}

func (x *dataStorePutDataClient) Send(m *DataMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataStorePutDataClient) Recv() (*Receipt, error) {
	m := new(Receipt)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataStoreClient) GetData(ctx context.Context, in *DataFilter, opts ...grpc.CallOption) (DataStore_GetDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataStore_serviceDesc.Streams[1], "/datastore.DataStore/GetData", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataStoreGetDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataStore_GetDataClient interface {
	Recv() (*DataMessage, error)
	grpc.ClientStream
}

type dataStoreGetDataClient struct {
	grpc.ClientStream
}

func (x *dataStoreGetDataClient) Recv() (*DataMessage, error) {
	m := new(DataMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataStoreClient) GetDataMetrics(ctx context.Context, in *DataFilter, opts ...grpc.CallOption) (*DataMetrics, error) {
	out := new(DataMetrics)
	err := c.cc.Invoke(ctx, "/datastore.DataStore/GetDataMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) StoreData(ctx context.Context, in *DataMessage, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/datastore.DataStore/StoreData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataStoreServer is the server API for DataStore service.
type DataStoreServer interface {
	// PutData stores messages. Messages are acknowledged when they are written
	// to the underlying data store (whatever that may be).
	PutData(DataStore_PutDataServer) error
	// GetData returns data from either a collection (if just collection ID is
	// specified) or a particular device (if both collection ID and device ID is
	// supplied)
	GetData(*DataFilter, DataStore_GetDataServer) error
	// GetDataMetrics returns metrics on data stored. Filtering works similar to
	// the GetData method
	GetDataMetrics(context.Context, *DataFilter) (*DataMetrics, error)
	// StoreData is a simpler version of the PutData interface. It's not as
	// performant but easier to implement.
	StoreData(context.Context, *DataMessage) (*Receipt, error)
}

// UnimplementedDataStoreServer can be embedded to have forward compatible implementations.
type UnimplementedDataStoreServer struct {
}

func (*UnimplementedDataStoreServer) PutData(srv DataStore_PutDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PutData not implemented")
}
func (*UnimplementedDataStoreServer) GetData(req *DataFilter, srv DataStore_GetDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (*UnimplementedDataStoreServer) GetDataMetrics(ctx context.Context, req *DataFilter) (*DataMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataMetrics not implemented")
}
func (*UnimplementedDataStoreServer) StoreData(ctx context.Context, req *DataMessage) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreData not implemented")
}

func RegisterDataStoreServer(s *grpc.Server, srv DataStoreServer) {
	s.RegisterService(&_DataStore_serviceDesc, srv)
}

func _DataStore_PutData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataStoreServer).PutData(&dataStorePutDataServer{stream})
}

type DataStore_PutDataServer interface {
	Send(*Receipt) error
	Recv() (*DataMessage, error)
	grpc.ServerStream
}

type dataStorePutDataServer struct {
	grpc.ServerStream
}

func (x *dataStorePutDataServer) Send(m *Receipt) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataStorePutDataServer) Recv() (*DataMessage, error) {
	m := new(DataMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataStore_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataStoreServer).GetData(m, &dataStoreGetDataServer{stream})
}

type DataStore_GetDataServer interface {
	Send(*DataMessage) error
	grpc.ServerStream
}

type dataStoreGetDataServer struct {
	grpc.ServerStream
}

func (x *dataStoreGetDataServer) Send(m *DataMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _DataStore_GetDataMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).GetDataMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.DataStore/GetDataMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).GetDataMetrics(ctx, req.(*DataFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_StoreData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).StoreData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.DataStore/StoreData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).StoreData(ctx, req.(*DataMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datastore.DataStore",
	HandlerType: (*DataStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataMetrics",
			Handler:    _DataStore_GetDataMetrics_Handler,
		},
		{
			MethodName: "StoreData",
			Handler:    _DataStore_StoreData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutData",
			Handler:       _DataStore_PutData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetData",
			Handler:       _DataStore_GetData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "magpie.proto",
}
