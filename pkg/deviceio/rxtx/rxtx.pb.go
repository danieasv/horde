// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.5.1
// source: rxtx.proto

package rxtx

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Message types. CoAPPull is device-initated downstream messages, CoAP push is
// horde-initiated downstream messages and CoAP upstream is general CoAP
// upstream messages. Technically they're CoAP pull messages but it makes it
// easier to follow the logic when there's three kinds of coap messages.
// The UDP messages goes both ways; context determines wether it's upstream
// or downstream.
type MessageType int32

const (
	MessageType_UDP          MessageType = 0
	MessageType_CoAPUpstream MessageType = 1
	MessageType_CoAPPull     MessageType = 2
	MessageType_CoAPPush     MessageType = 3
	MessageType_UDPPull      MessageType = 4
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "UDP",
		1: "CoAPUpstream",
		2: "CoAPPull",
		3: "CoAPPush",
		4: "UDPPull",
	}
	MessageType_value = map[string]int32{
		"UDP":          0,
		"CoAPUpstream": 1,
		"CoAPPull":     2,
		"CoAPPush":     3,
		"UDPPull":      4,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_rxtx_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_rxtx_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{0}
}

type ErrorCode int32

const (
	ErrorCode_SUCCESS      ErrorCode = 0 // Success sending
	ErrorCode_TOO_LARGE    ErrorCode = 1 // Payload too large
	ErrorCode_NETWORK      ErrorCode = 2 // Network error
	ErrorCode_NOT_HANDLED  ErrorCode = 3 // Not handled for other reasons, resend later
	ErrorCode_CLIENT_ERROR ErrorCode = 4 // Client returned an error
	ErrorCode_PARAMETER    ErrorCode = 5 // Parameter error
	ErrorCode_INTERNAL     ErrorCode = 6 // Internal error
	ErrorCode_PENDING      ErrorCode = 7 // Result is pending
	ErrorCode_TIMEOUT      ErrorCode = 8 // Timeout waiting
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "SUCCESS",
		1: "TOO_LARGE",
		2: "NETWORK",
		3: "NOT_HANDLED",
		4: "CLIENT_ERROR",
		5: "PARAMETER",
		6: "INTERNAL",
		7: "PENDING",
		8: "TIMEOUT",
	}
	ErrorCode_value = map[string]int32{
		"SUCCESS":      0,
		"TOO_LARGE":    1,
		"NETWORK":      2,
		"NOT_HANDLED":  3,
		"CLIENT_ERROR": 4,
		"PARAMETER":    5,
		"INTERNAL":     6,
		"PENDING":      7,
		"TIMEOUT":      8,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_rxtx_proto_enumTypes[1].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_rxtx_proto_enumTypes[1]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{1}
}

type UDPOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UDPOptions) Reset() {
	*x = UDPOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rxtx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDPOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDPOptions) ProtoMessage() {}

func (x *UDPOptions) ProtoReflect() protoreflect.Message {
	mi := &file_rxtx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDPOptions.ProtoReflect.Descriptor instead.
func (*UDPOptions) Descriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{0}
}

type CoAPOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                                            // Code (GET, PUT, POST, DELETE)
	Type           int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                                            // Message type (confirmed, unconfirmed)
	LocationPath   []string `protobuf:"bytes,3,rep,name=location_path,json=locationPath,proto3" json:"location_path,omitempty"`         // CoAP location path (8)
	Path           string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`                                             // CoAP path option (11)
	ContentFormat  int32    `protobuf:"varint,5,opt,name=content_format,json=contentFormat,proto3" json:"content_format,omitempty"`     // CoAP content format (12)
	UriQuery       []string `protobuf:"bytes,6,rep,name=uri_query,json=uriQuery,proto3" json:"uri_query,omitempty"`                     // This is the URI query option (15)
	Accept         int32    `protobuf:"varint,7,opt,name=accept,proto3" json:"accept,omitempty"`                                        // Accept option (17)
	Token          int64    `protobuf:"varint,9,opt,name=token,proto3" json:"token,omitempty"`                                          // CoAP token
	TimeoutSeconds int32    `protobuf:"varint,10,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"` // Timeout for exchange
}

func (x *CoAPOptions) Reset() {
	*x = CoAPOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rxtx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoAPOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoAPOptions) ProtoMessage() {}

func (x *CoAPOptions) ProtoReflect() protoreflect.Message {
	mi := &file_rxtx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoAPOptions.ProtoReflect.Descriptor instead.
func (*CoAPOptions) Descriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{1}
}

func (x *CoAPOptions) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CoAPOptions) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CoAPOptions) GetLocationPath() []string {
	if x != nil {
		return x.LocationPath
	}
	return nil
}

func (x *CoAPOptions) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CoAPOptions) GetContentFormat() int32 {
	if x != nil {
		return x.ContentFormat
	}
	return 0
}

func (x *CoAPOptions) GetUriQuery() []string {
	if x != nil {
		return x.UriQuery
	}
	return nil
}

func (x *CoAPOptions) GetAccept() int32 {
	if x != nil {
		return x.Accept
	}
	return 0
}

func (x *CoAPOptions) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *CoAPOptions) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                           // This is the message ID
	Type          MessageType  `protobuf:"varint,2,opt,name=type,proto3,enum=rxtx.MessageType" json:"type,omitempty"`                 // This is the type of message
	Timestamp     int64        `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                             // This is the local time stamp of the message
	RemoteAddress []byte       `protobuf:"bytes,4,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"` // The address which the message was sent from
	RemotePort    int32        `protobuf:"varint,5,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`         // The remote port used when sending the message
	LocalPort     int32        `protobuf:"varint,6,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`            // The local port
	Payload       []byte       `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`                                  // Message payload
	Coap          *CoAPOptions `protobuf:"bytes,8,opt,name=coap,proto3" json:"coap,omitempty"`                                        // CoAP metadata
	Udp           *UDPOptions  `protobuf:"bytes,9,opt,name=udp,proto3" json:"udp,omitempty"`                                          // UDP metadata
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rxtx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_rxtx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{2}
}

func (x *Message) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Message) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_UDP
}

func (x *Message) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Message) GetRemoteAddress() []byte {
	if x != nil {
		return x.RemoteAddress
	}
	return nil
}

func (x *Message) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *Message) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *Message) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Message) GetCoap() *CoAPOptions {
	if x != nil {
		return x.Coap
	}
	return nil
}

func (x *Message) GetUdp() *UDPOptions {
	if x != nil {
		return x.Udp
	}
	return nil
}

// Origin tells the server where the request has originated. The APN ID must be
// set. The NAS ID is optional and can be set to -1 if it does not apply. If the
// listener is capable of routing messages to the entire APN the NAS ID can be
// omitted.
type Origin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnId int32   `protobuf:"varint,1,opt,name=apn_id,json=apnId,proto3" json:"apn_id,omitempty"`
	NasId []int32 `protobuf:"varint,2,rep,packed,name=nas_id,json=nasId,proto3" json:"nas_id,omitempty"`
}

func (x *Origin) Reset() {
	*x = Origin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rxtx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Origin) ProtoMessage() {}

func (x *Origin) ProtoReflect() protoreflect.Message {
	mi := &file_rxtx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Origin.ProtoReflect.Descriptor instead.
func (*Origin) Descriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{3}
}

func (x *Origin) GetApnId() int32 {
	if x != nil {
		return x.ApnId
	}
	return 0
}

func (x *Origin) GetNasId() []int32 {
	if x != nil {
		return x.NasId
	}
	return nil
}

// The upstream request is sent by the listener when upstream data (or a request
// is received)
type UpstreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin           *Origin  `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Redelivery       bool     `protobuf:"varint,2,opt,name=redelivery,proto3" json:"redelivery,omitempty"`
	Msg              *Message `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	ExpectDownstream bool     `protobuf:"varint,6,opt,name=expect_downstream,json=expectDownstream,proto3" json:"expect_downstream,omitempty"`
}

func (x *UpstreamRequest) Reset() {
	*x = UpstreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rxtx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpstreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamRequest) ProtoMessage() {}

func (x *UpstreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rxtx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamRequest.ProtoReflect.Descriptor instead.
func (*UpstreamRequest) Descriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{4}
}

func (x *UpstreamRequest) GetOrigin() *Origin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *UpstreamRequest) GetRedelivery() bool {
	if x != nil {
		return x.Redelivery
	}
	return false
}

func (x *UpstreamRequest) GetMsg() *Message {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *UpstreamRequest) GetExpectDownstream() bool {
	if x != nil {
		return x.ExpectDownstream
	}
	return false
}

//
type DownstreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg *Message `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *DownstreamResponse) Reset() {
	*x = DownstreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rxtx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamResponse) ProtoMessage() {}

func (x *DownstreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rxtx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamResponse.ProtoReflect.Descriptor instead.
func (*DownstreamResponse) Descriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{5}
}

func (x *DownstreamResponse) GetMsg() *Message {
	if x != nil {
		return x.Msg
	}
	return nil
}

// DownstreamRequest polls for
type DownstreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin *Origin     `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Type   MessageType `protobuf:"varint,2,opt,name=type,proto3,enum=rxtx.MessageType" json:"type,omitempty"`
}

func (x *DownstreamRequest) Reset() {
	*x = DownstreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rxtx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownstreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownstreamRequest) ProtoMessage() {}

func (x *DownstreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rxtx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownstreamRequest.ProtoReflect.Descriptor instead.
func (*DownstreamRequest) Descriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{6}
}

func (x *DownstreamRequest) GetOrigin() *Origin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *DownstreamRequest) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_UDP
}

// The AckRequest message is sent by the listener to the upstream server to ack
// or report errors. A missing result field is interpreted as success.
type AckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId int64     `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Result    ErrorCode `protobuf:"varint,2,opt,name=Result,proto3,enum=rxtx.ErrorCode" json:"Result,omitempty"`
	CoapToken int64     `protobuf:"varint,3,opt,name=coap_token,json=coapToken,proto3" json:"coap_token,omitempty"`
}

func (x *AckRequest) Reset() {
	*x = AckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rxtx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRequest) ProtoMessage() {}

func (x *AckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rxtx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRequest.ProtoReflect.Descriptor instead.
func (*AckRequest) Descriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{7}
}

func (x *AckRequest) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *AckRequest) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_SUCCESS
}

func (x *AckRequest) GetCoapToken() int64 {
	if x != nil {
		return x.CoapToken
	}
	return 0
}

// The AckResponse is sent back to the listener.
type AckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rxtx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rxtx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{8}
}

// AccessRequest is sent from the gRPC-backed RADIUS server to check if
// devices should be allowed to connect.
type AccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imsi             int64  `protobuf:"varint,1,opt,name=imsi,proto3" json:"imsi,omitempty"`
	NasIdentifier    string `protobuf:"bytes,2,opt,name=nas_identifier,json=nasIdentifier,proto3" json:"nas_identifier,omitempty"`
	Username         string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password         []byte `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	UserLocationInfo []byte `protobuf:"bytes,5,opt,name=user_location_info,json=userLocationInfo,proto3" json:"user_location_info,omitempty"`
	ImsiMccMnc       string `protobuf:"bytes,6,opt,name=imsi_mcc_mnc,json=imsiMccMnc,proto3" json:"imsi_mcc_mnc,omitempty"`
	MsTimezone       []byte `protobuf:"bytes,7,opt,name=ms_timezone,json=msTimezone,proto3" json:"ms_timezone,omitempty"`
	Imeisv           string `protobuf:"bytes,8,opt,name=imeisv,proto3" json:"imeisv,omitempty"`
	NasIpAddress     []byte `protobuf:"bytes,9,opt,name=nas_ip_address,json=nasIpAddress,proto3" json:"nas_ip_address,omitempty"`
}

func (x *AccessRequest) Reset() {
	*x = AccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rxtx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequest) ProtoMessage() {}

func (x *AccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rxtx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequest.ProtoReflect.Descriptor instead.
func (*AccessRequest) Descriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{9}
}

func (x *AccessRequest) GetImsi() int64 {
	if x != nil {
		return x.Imsi
	}
	return 0
}

func (x *AccessRequest) GetNasIdentifier() string {
	if x != nil {
		return x.NasIdentifier
	}
	return ""
}

func (x *AccessRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AccessRequest) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *AccessRequest) GetUserLocationInfo() []byte {
	if x != nil {
		return x.UserLocationInfo
	}
	return nil
}

func (x *AccessRequest) GetImsiMccMnc() string {
	if x != nil {
		return x.ImsiMccMnc
	}
	return ""
}

func (x *AccessRequest) GetMsTimezone() []byte {
	if x != nil {
		return x.MsTimezone
	}
	return nil
}

func (x *AccessRequest) GetImeisv() string {
	if x != nil {
		return x.Imeisv
	}
	return ""
}

func (x *AccessRequest) GetNasIpAddress() []byte {
	if x != nil {
		return x.NasIpAddress
	}
	return nil
}

// AccessResponse is the response to the gRPC-backed RADIUS server.
type AccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accepted  bool   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	IpAddress []byte `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AccessResponse) Reset() {
	*x = AccessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rxtx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessResponse) ProtoMessage() {}

func (x *AccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rxtx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessResponse.ProtoReflect.Descriptor instead.
func (*AccessResponse) Descriptor() ([]byte, []int) {
	return file_rxtx_proto_rawDescGZIP(), []int{10}
}

func (x *AccessResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

func (x *AccessResponse) GetIpAddress() []byte {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *AccessResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_rxtx_proto protoreflect.FileDescriptor

var file_rxtx_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x78, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72, 0x78,
	0x74, 0x78, 0x22, 0x0c, 0x0a, 0x0a, 0x55, 0x44, 0x50, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x89, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x41, 0x50, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x72, 0x69, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x75, 0x72, 0x69,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xaa, 0x02, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x78, 0x74, 0x78, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25,
	0x0a, 0x04, 0x63, 0x6f, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72,
	0x78, 0x74, 0x78, 0x2e, 0x43, 0x6f, 0x41, 0x50, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x04, 0x63, 0x6f, 0x61, 0x70, 0x12, 0x22, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x78, 0x74, 0x78, 0x2e, 0x55, 0x44, 0x50, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x75, 0x64, 0x70, 0x22, 0x36, 0x0a, 0x06, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x61,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x61, 0x73, 0x49,
	0x64, 0x22, 0xa5, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x78, 0x74, 0x78, 0x2e, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x72, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x78, 0x74, 0x78, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x11,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x35, 0x0a, 0x12, 0x44, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72,
	0x78, 0x74, 0x78, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x60, 0x0a, 0x11, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x78, 0x74, 0x78, 0x2e, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x72, 0x78, 0x74, 0x78,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x73, 0x0a, 0x0a, 0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x72, 0x78, 0x74, 0x78, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x61, 0x70,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x0d, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x12, 0x25, 0x0a, 0x0e,
	0x6e, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6d, 0x73,
	0x69, 0x5f, 0x6d, 0x63, 0x63, 0x5f, 0x6d, 0x6e, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6d, 0x73, 0x69, 0x4d, 0x63, 0x63, 0x4d, 0x6e, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x6d, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6d, 0x65, 0x69, 0x73, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d,
	0x65, 0x69, 0x73, 0x76, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x61, 0x73, 0x5f, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6e, 0x61,
	0x73, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x65, 0x0a, 0x0e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2a, 0x51, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x41,
	0x50, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x6f, 0x41, 0x50, 0x50, 0x75, 0x6c, 0x6c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x41,
	0x50, 0x50, 0x75, 0x73, 0x68, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x44, 0x50, 0x50, 0x75,
	0x6c, 0x6c, 0x10, 0x04, 0x2a, 0x8e, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x4f, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x08, 0x32, 0xb2, 0x01, 0x0a, 0x04, 0x52, 0x78, 0x74, 0x78, 0x12, 0x3d,
	0x0a, 0x0a, 0x50, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x72,
	0x78, 0x74, 0x78, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x78, 0x74, 0x78, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x72, 0x78,
	0x74, 0x78, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x78, 0x74, 0x78, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x03, 0x41, 0x63, 0x6b, 0x12, 0x10, 0x2e, 0x72, 0x78, 0x74, 0x78, 0x2e, 0x41, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x72, 0x78, 0x74, 0x78, 0x2e, 0x41,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x3d, 0x0a, 0x06, 0x52, 0x41,
	0x44, 0x49, 0x55, 0x53, 0x12, 0x33, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x13,
	0x2e, 0x72, 0x78, 0x74, 0x78, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x78, 0x74, 0x78, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_rxtx_proto_rawDescOnce sync.Once
	file_rxtx_proto_rawDescData = file_rxtx_proto_rawDesc
)

func file_rxtx_proto_rawDescGZIP() []byte {
	file_rxtx_proto_rawDescOnce.Do(func() {
		file_rxtx_proto_rawDescData = protoimpl.X.CompressGZIP(file_rxtx_proto_rawDescData)
	})
	return file_rxtx_proto_rawDescData
}

var file_rxtx_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rxtx_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_rxtx_proto_goTypes = []interface{}{
	(MessageType)(0),           // 0: rxtx.MessageType
	(ErrorCode)(0),             // 1: rxtx.ErrorCode
	(*UDPOptions)(nil),         // 2: rxtx.UDPOptions
	(*CoAPOptions)(nil),        // 3: rxtx.CoAPOptions
	(*Message)(nil),            // 4: rxtx.Message
	(*Origin)(nil),             // 5: rxtx.Origin
	(*UpstreamRequest)(nil),    // 6: rxtx.UpstreamRequest
	(*DownstreamResponse)(nil), // 7: rxtx.DownstreamResponse
	(*DownstreamRequest)(nil),  // 8: rxtx.DownstreamRequest
	(*AckRequest)(nil),         // 9: rxtx.AckRequest
	(*AckResponse)(nil),        // 10: rxtx.AckResponse
	(*AccessRequest)(nil),      // 11: rxtx.AccessRequest
	(*AccessResponse)(nil),     // 12: rxtx.AccessResponse
}
var file_rxtx_proto_depIdxs = []int32{
	0,  // 0: rxtx.Message.type:type_name -> rxtx.MessageType
	3,  // 1: rxtx.Message.coap:type_name -> rxtx.CoAPOptions
	2,  // 2: rxtx.Message.udp:type_name -> rxtx.UDPOptions
	5,  // 3: rxtx.UpstreamRequest.origin:type_name -> rxtx.Origin
	4,  // 4: rxtx.UpstreamRequest.msg:type_name -> rxtx.Message
	4,  // 5: rxtx.DownstreamResponse.msg:type_name -> rxtx.Message
	5,  // 6: rxtx.DownstreamRequest.origin:type_name -> rxtx.Origin
	0,  // 7: rxtx.DownstreamRequest.type:type_name -> rxtx.MessageType
	1,  // 8: rxtx.AckRequest.Result:type_name -> rxtx.ErrorCode
	6,  // 9: rxtx.Rxtx.PutMessage:input_type -> rxtx.UpstreamRequest
	8,  // 10: rxtx.Rxtx.GetMessage:input_type -> rxtx.DownstreamRequest
	9,  // 11: rxtx.Rxtx.Ack:input_type -> rxtx.AckRequest
	11, // 12: rxtx.RADIUS.Access:input_type -> rxtx.AccessRequest
	7,  // 13: rxtx.Rxtx.PutMessage:output_type -> rxtx.DownstreamResponse
	7,  // 14: rxtx.Rxtx.GetMessage:output_type -> rxtx.DownstreamResponse
	10, // 15: rxtx.Rxtx.Ack:output_type -> rxtx.AckResponse
	12, // 16: rxtx.RADIUS.Access:output_type -> rxtx.AccessResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_rxtx_proto_init() }
func file_rxtx_proto_init() {
	if File_rxtx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rxtx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDPOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rxtx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoAPOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rxtx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rxtx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Origin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rxtx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpstreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rxtx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rxtx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownstreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rxtx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rxtx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rxtx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rxtx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rxtx_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_rxtx_proto_goTypes,
		DependencyIndexes: file_rxtx_proto_depIdxs,
		EnumInfos:         file_rxtx_proto_enumTypes,
		MessageInfos:      file_rxtx_proto_msgTypes,
	}.Build()
	File_rxtx_proto = out.File
	file_rxtx_proto_rawDesc = nil
	file_rxtx_proto_goTypes = nil
	file_rxtx_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RxtxClient is the client API for Rxtx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RxtxClient interface {
	// PutMessage sends an upstream message. The service assumes responsibility
	// for the message when a response is sent.
	PutMessage(ctx context.Context, in *UpstreamRequest, opts ...grpc.CallOption) (*DownstreamResponse, error)
	// GetMessage returns an downstream/outbound (unsolicited) message to a
	// device.
	GetMessage(ctx context.Context, in *DownstreamRequest, opts ...grpc.CallOption) (*DownstreamResponse, error)
	// Ack acknowledges receipt and status of a message. If there's an error
	// handling the message the Result field in the request contains the error.
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
}

type rxtxClient struct {
	cc grpc.ClientConnInterface
}

func NewRxtxClient(cc grpc.ClientConnInterface) RxtxClient {
	return &rxtxClient{cc}
}

func (c *rxtxClient) PutMessage(ctx context.Context, in *UpstreamRequest, opts ...grpc.CallOption) (*DownstreamResponse, error) {
	out := new(DownstreamResponse)
	err := c.cc.Invoke(ctx, "/rxtx.Rxtx/PutMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rxtxClient) GetMessage(ctx context.Context, in *DownstreamRequest, opts ...grpc.CallOption) (*DownstreamResponse, error) {
	out := new(DownstreamResponse)
	err := c.cc.Invoke(ctx, "/rxtx.Rxtx/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rxtxClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, "/rxtx.Rxtx/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RxtxServer is the server API for Rxtx service.
type RxtxServer interface {
	// PutMessage sends an upstream message. The service assumes responsibility
	// for the message when a response is sent.
	PutMessage(context.Context, *UpstreamRequest) (*DownstreamResponse, error)
	// GetMessage returns an downstream/outbound (unsolicited) message to a
	// device.
	GetMessage(context.Context, *DownstreamRequest) (*DownstreamResponse, error)
	// Ack acknowledges receipt and status of a message. If there's an error
	// handling the message the Result field in the request contains the error.
	Ack(context.Context, *AckRequest) (*AckResponse, error)
}

// UnimplementedRxtxServer can be embedded to have forward compatible implementations.
type UnimplementedRxtxServer struct {
}

func (*UnimplementedRxtxServer) PutMessage(context.Context, *UpstreamRequest) (*DownstreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutMessage not implemented")
}
func (*UnimplementedRxtxServer) GetMessage(context.Context, *DownstreamRequest) (*DownstreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (*UnimplementedRxtxServer) Ack(context.Context, *AckRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}

func RegisterRxtxServer(s *grpc.Server, srv RxtxServer) {
	s.RegisterService(&_Rxtx_serviceDesc, srv)
}

func _Rxtx_PutMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpstreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RxtxServer).PutMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rxtx.Rxtx/PutMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RxtxServer).PutMessage(ctx, req.(*UpstreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rxtx_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownstreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RxtxServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rxtx.Rxtx/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RxtxServer).GetMessage(ctx, req.(*DownstreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rxtx_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RxtxServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rxtx.Rxtx/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RxtxServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rxtx_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rxtx.Rxtx",
	HandlerType: (*RxtxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutMessage",
			Handler:    _Rxtx_PutMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _Rxtx_GetMessage_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _Rxtx_Ack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rxtx.proto",
}

// RADIUSClient is the client API for RADIUS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RADIUSClient interface {
	Access(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error)
}

type rADIUSClient struct {
	cc grpc.ClientConnInterface
}

func NewRADIUSClient(cc grpc.ClientConnInterface) RADIUSClient {
	return &rADIUSClient{cc}
}

func (c *rADIUSClient) Access(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error) {
	out := new(AccessResponse)
	err := c.cc.Invoke(ctx, "/rxtx.RADIUS/Access", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RADIUSServer is the server API for RADIUS service.
type RADIUSServer interface {
	Access(context.Context, *AccessRequest) (*AccessResponse, error)
}

// UnimplementedRADIUSServer can be embedded to have forward compatible implementations.
type UnimplementedRADIUSServer struct {
}

func (*UnimplementedRADIUSServer) Access(context.Context, *AccessRequest) (*AccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Access not implemented")
}

func RegisterRADIUSServer(s *grpc.Server, srv RADIUSServer) {
	s.RegisterService(&_RADIUS_serviceDesc, srv)
}

func _RADIUS_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RADIUSServer).Access(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rxtx.RADIUS/Access",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RADIUSServer).Access(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RADIUS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rxtx.RADIUS",
	HandlerType: (*RADIUSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Access",
			Handler:    _RADIUS_Access_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rxtx.proto",
}
