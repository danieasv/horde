// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.5.1
// source: management.proto

//
// Copyright 2020 Telenor Digital AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package managementproto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Result is included in the response messages to indicate success/failure.
// the Result message will always be set but the actual values might be
// invalid.
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{0}
}

func (x *Result) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Result) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type APN struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnID int32  `protobuf:"varint,1,opt,name=ApnID,proto3" json:"ApnID,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *APN) Reset() {
	*x = APN{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APN) ProtoMessage() {}

func (x *APN) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APN.ProtoReflect.Descriptor instead.
func (*APN) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{1}
}

func (x *APN) GetApnID() int32 {
	if x != nil {
		return x.ApnID
	}
	return 0
}

func (x *APN) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// NASRange represents a single Network Authentication Server that emits
// RADIUS requests. Each server expects a particular range.
type NASRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NasID         int32  `protobuf:"varint,1,opt,name=NasID,proto3" json:"NasID,omitempty"`
	NasIdentifier string `protobuf:"bytes,2,opt,name=NasIdentifier,proto3" json:"NasIdentifier,omitempty"`
	CIDR          string `protobuf:"bytes,3,opt,name=CIDR,proto3" json:"CIDR,omitempty"`
}

func (x *NASRange) Reset() {
	*x = NASRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NASRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NASRange) ProtoMessage() {}

func (x *NASRange) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NASRange.ProtoReflect.Descriptor instead.
func (*NASRange) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{2}
}

func (x *NASRange) GetNasID() int32 {
	if x != nil {
		return x.NasID
	}
	return 0
}

func (x *NASRange) GetNasIdentifier() string {
	if x != nil {
		return x.NasIdentifier
	}
	return ""
}

func (x *NASRange) GetCIDR() string {
	if x != nil {
		return x.CIDR
	}
	return ""
}

// APNConfig is configuration for an entire APN.
type APNConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	APN       *APN        `protobuf:"bytes,1,opt,name=APN,proto3" json:"APN,omitempty"`
	NasRanges []*NASRange `protobuf:"bytes,3,rep,name=NasRanges,proto3" json:"NasRanges,omitempty"`
}

func (x *APNConfig) Reset() {
	*x = APNConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APNConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APNConfig) ProtoMessage() {}

func (x *APNConfig) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APNConfig.ProtoReflect.Descriptor instead.
func (*APNConfig) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{3}
}

func (x *APNConfig) GetAPN() *APN {
	if x != nil {
		return x.APN
	}
	return nil
}

func (x *APNConfig) GetNasRanges() []*NASRange {
	if x != nil {
		return x.NasRanges
	}
	return nil
}

type APNAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NasID   int32  `protobuf:"varint,1,opt,name=NasID,proto3" json:"NasID,omitempty"`
	IMSI    int64  `protobuf:"varint,2,opt,name=IMSI,proto3" json:"IMSI,omitempty"`
	IMEI    int64  `protobuf:"varint,3,opt,name=IMEI,proto3" json:"IMEI,omitempty"`
	IP      string `protobuf:"bytes,4,opt,name=IP,proto3" json:"IP,omitempty"`
	Created int64  `protobuf:"varint,5,opt,name=Created,proto3" json:"Created,omitempty"`
}

func (x *APNAllocation) Reset() {
	*x = APNAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APNAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APNAllocation) ProtoMessage() {}

func (x *APNAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APNAllocation.ProtoReflect.Descriptor instead.
func (*APNAllocation) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{4}
}

func (x *APNAllocation) GetNasID() int32 {
	if x != nil {
		return x.NasID
	}
	return 0
}

func (x *APNAllocation) GetIMSI() int64 {
	if x != nil {
		return x.IMSI
	}
	return 0
}

func (x *APNAllocation) GetIMEI() int64 {
	if x != nil {
		return x.IMEI
	}
	return 0
}

func (x *APNAllocation) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *APNAllocation) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

// AddAPNRequest is the request object when creating a new APN.
type AddAPNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewAPN *APN `protobuf:"bytes,1,opt,name=NewAPN,proto3" json:"NewAPN,omitempty"`
}

func (x *AddAPNRequest) Reset() {
	*x = AddAPNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAPNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAPNRequest) ProtoMessage() {}

func (x *AddAPNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAPNRequest.ProtoReflect.Descriptor instead.
func (*AddAPNRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{5}
}

func (x *AddAPNRequest) GetNewAPN() *APN {
	if x != nil {
		return x.NewAPN
	}
	return nil
}

// AddAPNResponse is the response sent when a new APN is created.
type AddAPNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *AddAPNResponse) Reset() {
	*x = AddAPNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAPNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAPNResponse) ProtoMessage() {}

func (x *AddAPNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAPNResponse.ProtoReflect.Descriptor instead.
func (*AddAPNResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{6}
}

func (x *AddAPNResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// RemoveAPNRequest is the request object for the RemoveAPN method.
type RemoveAPNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnID int32 `protobuf:"varint,1,opt,name=ApnID,proto3" json:"ApnID,omitempty"`
}

func (x *RemoveAPNRequest) Reset() {
	*x = RemoveAPNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAPNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAPNRequest) ProtoMessage() {}

func (x *RemoveAPNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAPNRequest.ProtoReflect.Descriptor instead.
func (*RemoveAPNRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{7}
}

func (x *RemoveAPNRequest) GetApnID() int32 {
	if x != nil {
		return x.ApnID
	}
	return 0
}

// RemoveAPNResponse is the response object for the RemoveAPN method.
type RemoveAPNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *RemoveAPNResponse) Reset() {
	*x = RemoveAPNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAPNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAPNResponse) ProtoMessage() {}

func (x *RemoveAPNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAPNResponse.ProtoReflect.Descriptor instead.
func (*RemoveAPNResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveAPNResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// ListAPNRequest is the request object for the ListAPN method.
type ListAPNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAPNRequest) Reset() {
	*x = ListAPNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAPNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAPNRequest) ProtoMessage() {}

func (x *ListAPNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAPNRequest.ProtoReflect.Descriptor instead.
func (*ListAPNRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{9}
}

// ListAPNResponse is the response object for the ListAPN method.
type ListAPNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result      `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	APNs   []*APNConfig `protobuf:"bytes,2,rep,name=APNs,proto3" json:"APNs,omitempty"`
}

func (x *ListAPNResponse) Reset() {
	*x = ListAPNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAPNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAPNResponse) ProtoMessage() {}

func (x *ListAPNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAPNResponse.ProtoReflect.Descriptor instead.
func (*ListAPNResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{10}
}

func (x *ListAPNResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ListAPNResponse) GetAPNs() []*APNConfig {
	if x != nil {
		return x.APNs
	}
	return nil
}

// ReloadAPNRequest is the request object for the ReloadAPN method
type ReloadAPNRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReloadAPNRequest) Reset() {
	*x = ReloadAPNRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadAPNRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadAPNRequest) ProtoMessage() {}

func (x *ReloadAPNRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadAPNRequest.ProtoReflect.Descriptor instead.
func (*ReloadAPNRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{11}
}

// ReloadAPNResponse is the response object for the ReloadAPN method
type ReloadAPNResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *ReloadAPNResponse) Reset() {
	*x = ReloadAPNResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadAPNResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadAPNResponse) ProtoMessage() {}

func (x *ReloadAPNResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadAPNResponse.ProtoReflect.Descriptor instead.
func (*ReloadAPNResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{12}
}

func (x *ReloadAPNResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type AddNASRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnID    int32     `protobuf:"varint,1,opt,name=ApnID,proto3" json:"ApnID,omitempty"`
	NewRange *NASRange `protobuf:"bytes,2,opt,name=NewRange,proto3" json:"NewRange,omitempty"`
}

func (x *AddNASRequest) Reset() {
	*x = AddNASRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNASRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNASRequest) ProtoMessage() {}

func (x *AddNASRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNASRequest.ProtoReflect.Descriptor instead.
func (*AddNASRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{13}
}

func (x *AddNASRequest) GetApnID() int32 {
	if x != nil {
		return x.ApnID
	}
	return 0
}

func (x *AddNASRequest) GetNewRange() *NASRange {
	if x != nil {
		return x.NewRange
	}
	return nil
}

type AddNASResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *AddNASResponse) Reset() {
	*x = AddNASResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNASResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNASResponse) ProtoMessage() {}

func (x *AddNASResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNASResponse.ProtoReflect.Descriptor instead.
func (*AddNASResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{14}
}

func (x *AddNASResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type AddAllocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnID int32  `protobuf:"varint,1,opt,name=ApnID,proto3" json:"ApnID,omitempty"`
	NasID int32  `protobuf:"varint,2,opt,name=NasID,proto3" json:"NasID,omitempty"`
	IMSI  int64  `protobuf:"varint,3,opt,name=IMSI,proto3" json:"IMSI,omitempty"`
	IP    string `protobuf:"bytes,4,opt,name=IP,proto3" json:"IP,omitempty"`
}

func (x *AddAllocationRequest) Reset() {
	*x = AddAllocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAllocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAllocationRequest) ProtoMessage() {}

func (x *AddAllocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAllocationRequest.ProtoReflect.Descriptor instead.
func (*AddAllocationRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{15}
}

func (x *AddAllocationRequest) GetApnID() int32 {
	if x != nil {
		return x.ApnID
	}
	return 0
}

func (x *AddAllocationRequest) GetNasID() int32 {
	if x != nil {
		return x.NasID
	}
	return 0
}

func (x *AddAllocationRequest) GetIMSI() int64 {
	if x != nil {
		return x.IMSI
	}
	return 0
}

func (x *AddAllocationRequest) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

type AddAllocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *AddAllocationResponse) Reset() {
	*x = AddAllocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAllocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAllocationResponse) ProtoMessage() {}

func (x *AddAllocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAllocationResponse.ProtoReflect.Descriptor instead.
func (*AddAllocationResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{16}
}

func (x *AddAllocationResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type RemoveNASRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnID int32 `protobuf:"varint,1,opt,name=ApnID,proto3" json:"ApnID,omitempty"`
	NasID int32 `protobuf:"varint,2,opt,name=NasID,proto3" json:"NasID,omitempty"`
}

func (x *RemoveNASRequest) Reset() {
	*x = RemoveNASRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNASRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNASRequest) ProtoMessage() {}

func (x *RemoveNASRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNASRequest.ProtoReflect.Descriptor instead.
func (*RemoveNASRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{17}
}

func (x *RemoveNASRequest) GetApnID() int32 {
	if x != nil {
		return x.ApnID
	}
	return 0
}

func (x *RemoveNASRequest) GetNasID() int32 {
	if x != nil {
		return x.NasID
	}
	return 0
}

type RemoveNASResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *RemoveNASResponse) Reset() {
	*x = RemoveNASResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNASResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNASResponse) ProtoMessage() {}

func (x *RemoveNASResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNASResponse.ProtoReflect.Descriptor instead.
func (*RemoveNASResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveNASResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ListAPNAllocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApnID int32 `protobuf:"varint,1,opt,name=ApnID,proto3" json:"ApnID,omitempty"`
	NasID int32 `protobuf:"varint,2,opt,name=NasID,proto3" json:"NasID,omitempty"`
}

func (x *ListAPNAllocationsRequest) Reset() {
	*x = ListAPNAllocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAPNAllocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAPNAllocationsRequest) ProtoMessage() {}

func (x *ListAPNAllocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAPNAllocationsRequest.ProtoReflect.Descriptor instead.
func (*ListAPNAllocationsRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{19}
}

func (x *ListAPNAllocationsRequest) GetApnID() int32 {
	if x != nil {
		return x.ApnID
	}
	return 0
}

func (x *ListAPNAllocationsRequest) GetNasID() int32 {
	if x != nil {
		return x.NasID
	}
	return 0
}

type ListAPNAllocationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result      *Result          `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	Allocations []*APNAllocation `protobuf:"bytes,2,rep,name=Allocations,proto3" json:"Allocations,omitempty"`
}

func (x *ListAPNAllocationsResponse) Reset() {
	*x = ListAPNAllocationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAPNAllocationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAPNAllocationsResponse) ProtoMessage() {}

func (x *ListAPNAllocationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAPNAllocationsResponse.ProtoReflect.Descriptor instead.
func (*ListAPNAllocationsResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{20}
}

func (x *ListAPNAllocationsResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ListAPNAllocationsResponse) GetAllocations() []*APNAllocation {
	if x != nil {
		return x.Allocations
	}
	return nil
}

type RemoveAPNAllocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APN ID is required and must be set.
	ApnID int32 `protobuf:"varint,1,opt,name=ApnID,proto3" json:"ApnID,omitempty"`
	// NasID is required  and must be set.
	NasID int32 `protobuf:"varint,2,opt,name=NasID,proto3" json:"NasID,omitempty"`
	// IMSI field is required and must be set.
	IMSI int64 `protobuf:"varint,3,opt,name=IMSI,proto3" json:"IMSI,omitempty"`
}

func (x *RemoveAPNAllocationRequest) Reset() {
	*x = RemoveAPNAllocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAPNAllocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAPNAllocationRequest) ProtoMessage() {}

func (x *RemoveAPNAllocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAPNAllocationRequest.ProtoReflect.Descriptor instead.
func (*RemoveAPNAllocationRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{21}
}

func (x *RemoveAPNAllocationRequest) GetApnID() int32 {
	if x != nil {
		return x.ApnID
	}
	return 0
}

func (x *RemoveAPNAllocationRequest) GetNasID() int32 {
	if x != nil {
		return x.NasID
	}
	return 0
}

func (x *RemoveAPNAllocationRequest) GetIMSI() int64 {
	if x != nil {
		return x.IMSI
	}
	return 0
}

type RemoveAPNAllocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *RemoveAPNAllocationResponse) Reset() {
	*x = RemoveAPNAllocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveAPNAllocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAPNAllocationResponse) ProtoMessage() {}

func (x *RemoveAPNAllocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAPNAllocationResponse.ProtoReflect.Descriptor instead.
func (*RemoveAPNAllocationResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{22}
}

func (x *RemoveAPNAllocationResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type AddUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=Email,proto3" json:"Email,omitempty"`
}

func (x *AddUserRequest) Reset() {
	*x = AddUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserRequest) ProtoMessage() {}

func (x *AddUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserRequest.ProtoReflect.Descriptor instead.
func (*AddUserRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{23}
}

func (x *AddUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type AddUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *Result `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	UserId   string  `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ApiToken string  `protobuf:"bytes,3,opt,name=ApiToken,proto3" json:"ApiToken,omitempty"`
}

func (x *AddUserResponse) Reset() {
	*x = AddUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserResponse) ProtoMessage() {}

func (x *AddUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserResponse.ProtoReflect.Descriptor instead.
func (*AddUserResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{24}
}

func (x *AddUserResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AddUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddUserResponse) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

type AddTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *AddTokenRequest) Reset() {
	*x = AddTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTokenRequest) ProtoMessage() {}

func (x *AddTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTokenRequest.ProtoReflect.Descriptor instead.
func (*AddTokenRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{25}
}

func (x *AddTokenRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AddTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *Result `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	ApiToken string  `protobuf:"bytes,2,opt,name=ApiToken,proto3" json:"ApiToken,omitempty"`
}

func (x *AddTokenResponse) Reset() {
	*x = AddTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTokenResponse) ProtoMessage() {}

func (x *AddTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTokenResponse.ProtoReflect.Descriptor instead.
func (*AddTokenResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{26}
}

func (x *AddTokenResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *AddTokenResponse) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

type RemoveTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ApiToken string `protobuf:"bytes,2,opt,name=ApiToken,proto3" json:"ApiToken,omitempty"`
}

func (x *RemoveTokenRequest) Reset() {
	*x = RemoveTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTokenRequest) ProtoMessage() {}

func (x *RemoveTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTokenRequest.ProtoReflect.Descriptor instead.
func (*RemoveTokenRequest) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{27}
}

func (x *RemoveTokenRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RemoveTokenRequest) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

type RemoveTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *Result `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *RemoveTokenResponse) Reset() {
	*x = RemoveTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTokenResponse) ProtoMessage() {}

func (x *RemoveTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_management_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTokenResponse.ProtoReflect.Descriptor instead.
func (*RemoveTokenResponse) Descriptor() ([]byte, []int) {
	return file_management_proto_rawDescGZIP(), []int{28}
}

func (x *RemoveTokenResponse) GetResult() *Result {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_management_proto protoreflect.FileDescriptor

var file_management_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2f, 0x0a,
	0x03, 0x41, 0x50, 0x4e, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x41, 0x70, 0x6e, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5a,
	0x0a, 0x08, 0x4e, 0x41, 0x53, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61,
	0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4e, 0x61, 0x73, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x61, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4e, 0x61, 0x73, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x49, 0x44, 0x52, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x49, 0x44, 0x52, 0x22, 0x6c, 0x0a, 0x09, 0x41, 0x50,
	0x4e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x03, 0x41, 0x50, 0x4e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x4e, 0x52, 0x03, 0x41, 0x50, 0x4e, 0x12,
	0x37, 0x0a, 0x09, 0x4e, 0x61, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x41, 0x53, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x4e,
	0x61, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x0d, 0x41, 0x50, 0x4e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x73,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4e, 0x61, 0x73, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x4d, 0x53, 0x49, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x49,
	0x4d, 0x53, 0x49, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x4d, 0x45, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x49, 0x4d, 0x45, 0x49, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x3d, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x4e, 0x65, 0x77, 0x41, 0x50, 0x4e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x4e, 0x52, 0x06, 0x4e, 0x65, 0x77, 0x41, 0x50, 0x4e,
	0x22, 0x41, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x28, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x50, 0x4e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x41, 0x70, 0x6e, 0x49, 0x44, 0x22, 0x44, 0x0a,
	0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x4e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x4e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x41, 0x50, 0x4e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x4e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x04, 0x41, 0x50, 0x4e, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x44, 0x0a,
	0x11, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x5c, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4e, 0x41, 0x53, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x41, 0x70, 0x6e, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x08, 0x4e, 0x65,
	0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x41, 0x53, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x4e, 0x65, 0x77, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x41, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4e, 0x41, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x66, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x70, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x41, 0x70, 0x6e,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4e, 0x61, 0x73, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x4d, 0x53, 0x49,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x49, 0x4d, 0x53, 0x49, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x22, 0x48, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3e, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4e, 0x41, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x41, 0x70, 0x6e, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4e, 0x61, 0x73, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4e, 0x41, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x47, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x4e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x41, 0x70, 0x6e, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x4e, 0x61, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4e, 0x61, 0x73, 0x49, 0x44, 0x22, 0x8f, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50,
	0x4e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x4e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x50, 0x4e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x41, 0x70, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x61, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4e, 0x61, 0x73, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x4d, 0x53, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x49, 0x4d, 0x53, 0x49, 0x22, 0x4e, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41,
	0x50, 0x4e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3a, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x76, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x29, 0x0a, 0x0f, 0x41, 0x64, 0x64,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x70, 0x69,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x70, 0x69,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x48, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x46, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xb2, 0x08, 0x0a, 0x16, 0x48, 0x6f, 0x72, 0x64,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x41, 0x50, 0x4e, 0x12, 0x1e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x64, 0x64, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x09, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x50, 0x4e, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x50, 0x4e, 0x12, 0x21,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x4e, 0x41, 0x53, 0x12,
	0x1e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x41, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x41, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x41, 0x53, 0x12, 0x21, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x41, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x41, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x4e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x50, 0x4e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x4e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x50, 0x4e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x41, 0x50, 0x4e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x50, 0x4e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x4e,
	0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x4e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x23, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_management_proto_rawDescOnce sync.Once
	file_management_proto_rawDescData = file_management_proto_rawDesc
)

func file_management_proto_rawDescGZIP() []byte {
	file_management_proto_rawDescOnce.Do(func() {
		file_management_proto_rawDescData = protoimpl.X.CompressGZIP(file_management_proto_rawDescData)
	})
	return file_management_proto_rawDescData
}

var file_management_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_management_proto_goTypes = []interface{}{
	(*Result)(nil),                      // 0: managementproto.Result
	(*APN)(nil),                         // 1: managementproto.APN
	(*NASRange)(nil),                    // 2: managementproto.NASRange
	(*APNConfig)(nil),                   // 3: managementproto.APNConfig
	(*APNAllocation)(nil),               // 4: managementproto.APNAllocation
	(*AddAPNRequest)(nil),               // 5: managementproto.AddAPNRequest
	(*AddAPNResponse)(nil),              // 6: managementproto.AddAPNResponse
	(*RemoveAPNRequest)(nil),            // 7: managementproto.RemoveAPNRequest
	(*RemoveAPNResponse)(nil),           // 8: managementproto.RemoveAPNResponse
	(*ListAPNRequest)(nil),              // 9: managementproto.ListAPNRequest
	(*ListAPNResponse)(nil),             // 10: managementproto.ListAPNResponse
	(*ReloadAPNRequest)(nil),            // 11: managementproto.ReloadAPNRequest
	(*ReloadAPNResponse)(nil),           // 12: managementproto.ReloadAPNResponse
	(*AddNASRequest)(nil),               // 13: managementproto.AddNASRequest
	(*AddNASResponse)(nil),              // 14: managementproto.AddNASResponse
	(*AddAllocationRequest)(nil),        // 15: managementproto.AddAllocationRequest
	(*AddAllocationResponse)(nil),       // 16: managementproto.AddAllocationResponse
	(*RemoveNASRequest)(nil),            // 17: managementproto.RemoveNASRequest
	(*RemoveNASResponse)(nil),           // 18: managementproto.RemoveNASResponse
	(*ListAPNAllocationsRequest)(nil),   // 19: managementproto.ListAPNAllocationsRequest
	(*ListAPNAllocationsResponse)(nil),  // 20: managementproto.ListAPNAllocationsResponse
	(*RemoveAPNAllocationRequest)(nil),  // 21: managementproto.RemoveAPNAllocationRequest
	(*RemoveAPNAllocationResponse)(nil), // 22: managementproto.RemoveAPNAllocationResponse
	(*AddUserRequest)(nil),              // 23: managementproto.AddUserRequest
	(*AddUserResponse)(nil),             // 24: managementproto.AddUserResponse
	(*AddTokenRequest)(nil),             // 25: managementproto.AddTokenRequest
	(*AddTokenResponse)(nil),            // 26: managementproto.AddTokenResponse
	(*RemoveTokenRequest)(nil),          // 27: managementproto.RemoveTokenRequest
	(*RemoveTokenResponse)(nil),         // 28: managementproto.RemoveTokenResponse
}
var file_management_proto_depIdxs = []int32{
	1,  // 0: managementproto.APNConfig.APN:type_name -> managementproto.APN
	2,  // 1: managementproto.APNConfig.NasRanges:type_name -> managementproto.NASRange
	1,  // 2: managementproto.AddAPNRequest.NewAPN:type_name -> managementproto.APN
	0,  // 3: managementproto.AddAPNResponse.Result:type_name -> managementproto.Result
	0,  // 4: managementproto.RemoveAPNResponse.Result:type_name -> managementproto.Result
	0,  // 5: managementproto.ListAPNResponse.Result:type_name -> managementproto.Result
	3,  // 6: managementproto.ListAPNResponse.APNs:type_name -> managementproto.APNConfig
	0,  // 7: managementproto.ReloadAPNResponse.Result:type_name -> managementproto.Result
	2,  // 8: managementproto.AddNASRequest.NewRange:type_name -> managementproto.NASRange
	0,  // 9: managementproto.AddNASResponse.Result:type_name -> managementproto.Result
	0,  // 10: managementproto.AddAllocationResponse.Result:type_name -> managementproto.Result
	0,  // 11: managementproto.RemoveNASResponse.Result:type_name -> managementproto.Result
	0,  // 12: managementproto.ListAPNAllocationsResponse.Result:type_name -> managementproto.Result
	4,  // 13: managementproto.ListAPNAllocationsResponse.Allocations:type_name -> managementproto.APNAllocation
	0,  // 14: managementproto.RemoveAPNAllocationResponse.Result:type_name -> managementproto.Result
	0,  // 15: managementproto.AddUserResponse.Result:type_name -> managementproto.Result
	0,  // 16: managementproto.AddTokenResponse.Result:type_name -> managementproto.Result
	0,  // 17: managementproto.RemoveTokenResponse.Result:type_name -> managementproto.Result
	5,  // 18: managementproto.HordeManagementService.AddAPN:input_type -> managementproto.AddAPNRequest
	15, // 19: managementproto.HordeManagementService.AddAllocation:input_type -> managementproto.AddAllocationRequest
	7,  // 20: managementproto.HordeManagementService.RemoveAPN:input_type -> managementproto.RemoveAPNRequest
	11, // 21: managementproto.HordeManagementService.ReloadAPN:input_type -> managementproto.ReloadAPNRequest
	13, // 22: managementproto.HordeManagementService.AddNAS:input_type -> managementproto.AddNASRequest
	17, // 23: managementproto.HordeManagementService.RemoveNAS:input_type -> managementproto.RemoveNASRequest
	19, // 24: managementproto.HordeManagementService.ListAPNAllocations:input_type -> managementproto.ListAPNAllocationsRequest
	21, // 25: managementproto.HordeManagementService.RemoveAPNAllocation:input_type -> managementproto.RemoveAPNAllocationRequest
	9,  // 26: managementproto.HordeManagementService.ListAPN:input_type -> managementproto.ListAPNRequest
	23, // 27: managementproto.HordeManagementService.AddUser:input_type -> managementproto.AddUserRequest
	25, // 28: managementproto.HordeManagementService.AddToken:input_type -> managementproto.AddTokenRequest
	27, // 29: managementproto.HordeManagementService.RemoveToken:input_type -> managementproto.RemoveTokenRequest
	6,  // 30: managementproto.HordeManagementService.AddAPN:output_type -> managementproto.AddAPNResponse
	16, // 31: managementproto.HordeManagementService.AddAllocation:output_type -> managementproto.AddAllocationResponse
	8,  // 32: managementproto.HordeManagementService.RemoveAPN:output_type -> managementproto.RemoveAPNResponse
	12, // 33: managementproto.HordeManagementService.ReloadAPN:output_type -> managementproto.ReloadAPNResponse
	14, // 34: managementproto.HordeManagementService.AddNAS:output_type -> managementproto.AddNASResponse
	18, // 35: managementproto.HordeManagementService.RemoveNAS:output_type -> managementproto.RemoveNASResponse
	20, // 36: managementproto.HordeManagementService.ListAPNAllocations:output_type -> managementproto.ListAPNAllocationsResponse
	22, // 37: managementproto.HordeManagementService.RemoveAPNAllocation:output_type -> managementproto.RemoveAPNAllocationResponse
	10, // 38: managementproto.HordeManagementService.ListAPN:output_type -> managementproto.ListAPNResponse
	24, // 39: managementproto.HordeManagementService.AddUser:output_type -> managementproto.AddUserResponse
	26, // 40: managementproto.HordeManagementService.AddToken:output_type -> managementproto.AddTokenResponse
	28, // 41: managementproto.HordeManagementService.RemoveToken:output_type -> managementproto.RemoveTokenResponse
	30, // [30:42] is the sub-list for method output_type
	18, // [18:30] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_management_proto_init() }
func file_management_proto_init() {
	if File_management_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_management_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APN); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NASRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APNConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APNAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAPNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAPNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAPNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAPNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAPNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAPNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadAPNRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadAPNResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNASRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNASResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAllocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAllocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNASRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNASResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAPNAllocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAPNAllocationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAPNAllocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveAPNAllocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_management_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_management_proto_goTypes,
		DependencyIndexes: file_management_proto_depIdxs,
		MessageInfos:      file_management_proto_msgTypes,
	}.Build()
	File_management_proto = out.File
	file_management_proto_rawDesc = nil
	file_management_proto_goTypes = nil
	file_management_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HordeManagementServiceClient is the client API for HordeManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HordeManagementServiceClient interface {
	// AddAPN creates a new APN. One or more NASRange elements must be supplied.
	AddAPN(ctx context.Context, in *AddAPNRequest, opts ...grpc.CallOption) (*AddAPNResponse, error)
	// AddAllocation allocates a new IP address for an APN. This is for
	// debugging and diagnostics; usually this is done through the RADISU service.
	AddAllocation(ctx context.Context, in *AddAllocationRequest, opts ...grpc.CallOption) (*AddAllocationResponse, error)
	// RemoveAPN removes an APN. The APN must not contain any allocations or
	// NAS CIDRs when it is deleted. ListAPNAllocations and RemoveAPNAllocation
	// must be used to remove allocations. This might seem cumbersome but it
	// might prevent the operators doing something *really* stupid.
	RemoveAPN(ctx context.Context, in *RemoveAPNRequest, opts ...grpc.CallOption) (*RemoveAPNResponse, error)
	// ReloadAPN reloads the APN and NAS list in memory
	ReloadAPN(ctx context.Context, in *ReloadAPNRequest, opts ...grpc.CallOption) (*ReloadAPNResponse, error)
	// AddNAS adds a NAS CIDR to the APN
	AddNAS(ctx context.Context, in *AddNASRequest, opts ...grpc.CallOption) (*AddNASResponse, error)
	//  RemoveNAS removes a NAS CIDR from an APN. The NAS CIDR cannot contain any
	// allocations.
	RemoveNAS(ctx context.Context, in *RemoveNASRequest, opts ...grpc.CallOption) (*RemoveNASResponse, error)
	// ListAPNAllocations lists all allocations for a particular APN. The first
	// 1000 allocations for that APN is included.
	ListAPNAllocations(ctx context.Context, in *ListAPNAllocationsRequest, opts ...grpc.CallOption) (*ListAPNAllocationsResponse, error)
	// RemoveAPNAllocation removes a single allocation from the APN. The total
	// number of allocations might be in the millions. This might seem
	// cumbersome but it's clunky for a reason. If you try to remove an APN
	// with millions of devices and the APN is still in use you'll be fighting
	// an uphill battle which is *exactly* what you want in that case :)
	RemoveAPNAllocation(ctx context.Context, in *RemoveAPNAllocationRequest, opts ...grpc.CallOption) (*RemoveAPNAllocationResponse, error)
	// ListAPN lists the configured APNs
	ListAPN(ctx context.Context, in *ListAPNRequest, opts ...grpc.CallOption) (*ListAPNResponse, error)
	// AddUser creates a new user in the backend store. This is mostly for
	// M2M users where there's no human on the other side, typically major
	// integrations with Horde. This user can not log in via the regular
	// authentication methods.
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error)
	// AddToken adds a new API token to a user created with AddUser. This method
	// will not work with users created through the usual authentication methods.
	AddToken(ctx context.Context, in *AddTokenRequest, opts ...grpc.CallOption) (*AddTokenResponse, error)
	// RemoveToken removes a token from an internal user created with AddUser.
	// Used in combination with AddToken this can be used to rotate API tokens
	// for M2M users.
	RemoveToken(ctx context.Context, in *RemoveTokenRequest, opts ...grpc.CallOption) (*RemoveTokenResponse, error)
}

type hordeManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHordeManagementServiceClient(cc grpc.ClientConnInterface) HordeManagementServiceClient {
	return &hordeManagementServiceClient{cc}
}

func (c *hordeManagementServiceClient) AddAPN(ctx context.Context, in *AddAPNRequest, opts ...grpc.CallOption) (*AddAPNResponse, error) {
	out := new(AddAPNResponse)
	err := c.cc.Invoke(ctx, "/managementproto.HordeManagementService/AddAPN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeManagementServiceClient) AddAllocation(ctx context.Context, in *AddAllocationRequest, opts ...grpc.CallOption) (*AddAllocationResponse, error) {
	out := new(AddAllocationResponse)
	err := c.cc.Invoke(ctx, "/managementproto.HordeManagementService/AddAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeManagementServiceClient) RemoveAPN(ctx context.Context, in *RemoveAPNRequest, opts ...grpc.CallOption) (*RemoveAPNResponse, error) {
	out := new(RemoveAPNResponse)
	err := c.cc.Invoke(ctx, "/managementproto.HordeManagementService/RemoveAPN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeManagementServiceClient) ReloadAPN(ctx context.Context, in *ReloadAPNRequest, opts ...grpc.CallOption) (*ReloadAPNResponse, error) {
	out := new(ReloadAPNResponse)
	err := c.cc.Invoke(ctx, "/managementproto.HordeManagementService/ReloadAPN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeManagementServiceClient) AddNAS(ctx context.Context, in *AddNASRequest, opts ...grpc.CallOption) (*AddNASResponse, error) {
	out := new(AddNASResponse)
	err := c.cc.Invoke(ctx, "/managementproto.HordeManagementService/AddNAS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeManagementServiceClient) RemoveNAS(ctx context.Context, in *RemoveNASRequest, opts ...grpc.CallOption) (*RemoveNASResponse, error) {
	out := new(RemoveNASResponse)
	err := c.cc.Invoke(ctx, "/managementproto.HordeManagementService/RemoveNAS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeManagementServiceClient) ListAPNAllocations(ctx context.Context, in *ListAPNAllocationsRequest, opts ...grpc.CallOption) (*ListAPNAllocationsResponse, error) {
	out := new(ListAPNAllocationsResponse)
	err := c.cc.Invoke(ctx, "/managementproto.HordeManagementService/ListAPNAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeManagementServiceClient) RemoveAPNAllocation(ctx context.Context, in *RemoveAPNAllocationRequest, opts ...grpc.CallOption) (*RemoveAPNAllocationResponse, error) {
	out := new(RemoveAPNAllocationResponse)
	err := c.cc.Invoke(ctx, "/managementproto.HordeManagementService/RemoveAPNAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeManagementServiceClient) ListAPN(ctx context.Context, in *ListAPNRequest, opts ...grpc.CallOption) (*ListAPNResponse, error) {
	out := new(ListAPNResponse)
	err := c.cc.Invoke(ctx, "/managementproto.HordeManagementService/ListAPN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeManagementServiceClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/managementproto.HordeManagementService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeManagementServiceClient) AddToken(ctx context.Context, in *AddTokenRequest, opts ...grpc.CallOption) (*AddTokenResponse, error) {
	out := new(AddTokenResponse)
	err := c.cc.Invoke(ctx, "/managementproto.HordeManagementService/AddToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hordeManagementServiceClient) RemoveToken(ctx context.Context, in *RemoveTokenRequest, opts ...grpc.CallOption) (*RemoveTokenResponse, error) {
	out := new(RemoveTokenResponse)
	err := c.cc.Invoke(ctx, "/managementproto.HordeManagementService/RemoveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HordeManagementServiceServer is the server API for HordeManagementService service.
type HordeManagementServiceServer interface {
	// AddAPN creates a new APN. One or more NASRange elements must be supplied.
	AddAPN(context.Context, *AddAPNRequest) (*AddAPNResponse, error)
	// AddAllocation allocates a new IP address for an APN. This is for
	// debugging and diagnostics; usually this is done through the RADISU service.
	AddAllocation(context.Context, *AddAllocationRequest) (*AddAllocationResponse, error)
	// RemoveAPN removes an APN. The APN must not contain any allocations or
	// NAS CIDRs when it is deleted. ListAPNAllocations and RemoveAPNAllocation
	// must be used to remove allocations. This might seem cumbersome but it
	// might prevent the operators doing something *really* stupid.
	RemoveAPN(context.Context, *RemoveAPNRequest) (*RemoveAPNResponse, error)
	// ReloadAPN reloads the APN and NAS list in memory
	ReloadAPN(context.Context, *ReloadAPNRequest) (*ReloadAPNResponse, error)
	// AddNAS adds a NAS CIDR to the APN
	AddNAS(context.Context, *AddNASRequest) (*AddNASResponse, error)
	//  RemoveNAS removes a NAS CIDR from an APN. The NAS CIDR cannot contain any
	// allocations.
	RemoveNAS(context.Context, *RemoveNASRequest) (*RemoveNASResponse, error)
	// ListAPNAllocations lists all allocations for a particular APN. The first
	// 1000 allocations for that APN is included.
	ListAPNAllocations(context.Context, *ListAPNAllocationsRequest) (*ListAPNAllocationsResponse, error)
	// RemoveAPNAllocation removes a single allocation from the APN. The total
	// number of allocations might be in the millions. This might seem
	// cumbersome but it's clunky for a reason. If you try to remove an APN
	// with millions of devices and the APN is still in use you'll be fighting
	// an uphill battle which is *exactly* what you want in that case :)
	RemoveAPNAllocation(context.Context, *RemoveAPNAllocationRequest) (*RemoveAPNAllocationResponse, error)
	// ListAPN lists the configured APNs
	ListAPN(context.Context, *ListAPNRequest) (*ListAPNResponse, error)
	// AddUser creates a new user in the backend store. This is mostly for
	// M2M users where there's no human on the other side, typically major
	// integrations with Horde. This user can not log in via the regular
	// authentication methods.
	AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error)
	// AddToken adds a new API token to a user created with AddUser. This method
	// will not work with users created through the usual authentication methods.
	AddToken(context.Context, *AddTokenRequest) (*AddTokenResponse, error)
	// RemoveToken removes a token from an internal user created with AddUser.
	// Used in combination with AddToken this can be used to rotate API tokens
	// for M2M users.
	RemoveToken(context.Context, *RemoveTokenRequest) (*RemoveTokenResponse, error)
}

// UnimplementedHordeManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHordeManagementServiceServer struct {
}

func (*UnimplementedHordeManagementServiceServer) AddAPN(context.Context, *AddAPNRequest) (*AddAPNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAPN not implemented")
}
func (*UnimplementedHordeManagementServiceServer) AddAllocation(context.Context, *AddAllocationRequest) (*AddAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAllocation not implemented")
}
func (*UnimplementedHordeManagementServiceServer) RemoveAPN(context.Context, *RemoveAPNRequest) (*RemoveAPNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAPN not implemented")
}
func (*UnimplementedHordeManagementServiceServer) ReloadAPN(context.Context, *ReloadAPNRequest) (*ReloadAPNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadAPN not implemented")
}
func (*UnimplementedHordeManagementServiceServer) AddNAS(context.Context, *AddNASRequest) (*AddNASResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNAS not implemented")
}
func (*UnimplementedHordeManagementServiceServer) RemoveNAS(context.Context, *RemoveNASRequest) (*RemoveNASResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNAS not implemented")
}
func (*UnimplementedHordeManagementServiceServer) ListAPNAllocations(context.Context, *ListAPNAllocationsRequest) (*ListAPNAllocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPNAllocations not implemented")
}
func (*UnimplementedHordeManagementServiceServer) RemoveAPNAllocation(context.Context, *RemoveAPNAllocationRequest) (*RemoveAPNAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAPNAllocation not implemented")
}
func (*UnimplementedHordeManagementServiceServer) ListAPN(context.Context, *ListAPNRequest) (*ListAPNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPN not implemented")
}
func (*UnimplementedHordeManagementServiceServer) AddUser(context.Context, *AddUserRequest) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedHordeManagementServiceServer) AddToken(context.Context, *AddTokenRequest) (*AddTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToken not implemented")
}
func (*UnimplementedHordeManagementServiceServer) RemoveToken(context.Context, *RemoveTokenRequest) (*RemoveTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveToken not implemented")
}

func RegisterHordeManagementServiceServer(s *grpc.Server, srv HordeManagementServiceServer) {
	s.RegisterService(&_HordeManagementService_serviceDesc, srv)
}

func _HordeManagementService_AddAPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeManagementServiceServer).AddAPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managementproto.HordeManagementService/AddAPN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeManagementServiceServer).AddAPN(ctx, req.(*AddAPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HordeManagementService_AddAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeManagementServiceServer).AddAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managementproto.HordeManagementService/AddAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeManagementServiceServer).AddAllocation(ctx, req.(*AddAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HordeManagementService_RemoveAPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeManagementServiceServer).RemoveAPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managementproto.HordeManagementService/RemoveAPN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeManagementServiceServer).RemoveAPN(ctx, req.(*RemoveAPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HordeManagementService_ReloadAPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadAPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeManagementServiceServer).ReloadAPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managementproto.HordeManagementService/ReloadAPN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeManagementServiceServer).ReloadAPN(ctx, req.(*ReloadAPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HordeManagementService_AddNAS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNASRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeManagementServiceServer).AddNAS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managementproto.HordeManagementService/AddNAS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeManagementServiceServer).AddNAS(ctx, req.(*AddNASRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HordeManagementService_RemoveNAS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNASRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeManagementServiceServer).RemoveNAS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managementproto.HordeManagementService/RemoveNAS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeManagementServiceServer).RemoveNAS(ctx, req.(*RemoveNASRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HordeManagementService_ListAPNAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPNAllocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeManagementServiceServer).ListAPNAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managementproto.HordeManagementService/ListAPNAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeManagementServiceServer).ListAPNAllocations(ctx, req.(*ListAPNAllocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HordeManagementService_RemoveAPNAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAPNAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeManagementServiceServer).RemoveAPNAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managementproto.HordeManagementService/RemoveAPNAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeManagementServiceServer).RemoveAPNAllocation(ctx, req.(*RemoveAPNAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HordeManagementService_ListAPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeManagementServiceServer).ListAPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managementproto.HordeManagementService/ListAPN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeManagementServiceServer).ListAPN(ctx, req.(*ListAPNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HordeManagementService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeManagementServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managementproto.HordeManagementService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeManagementServiceServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HordeManagementService_AddToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeManagementServiceServer).AddToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managementproto.HordeManagementService/AddToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeManagementServiceServer).AddToken(ctx, req.(*AddTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HordeManagementService_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HordeManagementServiceServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/managementproto.HordeManagementService/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HordeManagementServiceServer).RemoveToken(ctx, req.(*RemoveTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HordeManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "managementproto.HordeManagementService",
	HandlerType: (*HordeManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAPN",
			Handler:    _HordeManagementService_AddAPN_Handler,
		},
		{
			MethodName: "AddAllocation",
			Handler:    _HordeManagementService_AddAllocation_Handler,
		},
		{
			MethodName: "RemoveAPN",
			Handler:    _HordeManagementService_RemoveAPN_Handler,
		},
		{
			MethodName: "ReloadAPN",
			Handler:    _HordeManagementService_ReloadAPN_Handler,
		},
		{
			MethodName: "AddNAS",
			Handler:    _HordeManagementService_AddNAS_Handler,
		},
		{
			MethodName: "RemoveNAS",
			Handler:    _HordeManagementService_RemoveNAS_Handler,
		},
		{
			MethodName: "ListAPNAllocations",
			Handler:    _HordeManagementService_ListAPNAllocations_Handler,
		},
		{
			MethodName: "RemoveAPNAllocation",
			Handler:    _HordeManagementService_RemoveAPNAllocation_Handler,
		},
		{
			MethodName: "ListAPN",
			Handler:    _HordeManagementService_ListAPN_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _HordeManagementService_AddUser_Handler,
		},
		{
			MethodName: "AddToken",
			Handler:    _HordeManagementService_AddToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _HordeManagementService_RemoveToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management.proto",
}
