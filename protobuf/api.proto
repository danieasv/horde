syntax = "proto3";

//
// Copyright 2020 Telenor Digital AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package apipb;

// This is the API protobuffer file. There's a lot of unusal styles here but
// most of it is because of the Swagger autogenerated sources. The naming and
// structure is sensible from a server standpoint.

// TODO(stalehd): Order and clean up when completed

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/wrappers.proto";

message ErrorDetails { map<string, string> messages = 1; }

// Tag types
message TagResponse { map<string, string> tags = 1; };

message TagValueResponse { google.protobuf.StringValue value = 1; }

message UpdateTagRequest {
  google.protobuf.StringValue identifier = 1;
  map<string, string> tags = 2;
  google.protobuf.StringValue collection_id = 3;
};

message TagRequest {
  google.protobuf.StringValue identifier = 1;
  google.protobuf.StringValue name = 2;
  google.protobuf.StringValue value = 3;
  google.protobuf.StringValue collection_id = 4;
}

// CollectionFirmware object
message CollectionFirmware {
  // The current firmware is the firmware that the devices are currently using.
  google.protobuf.StringValue current_firmware_id = 1;
  // The target firmware is set to the desired firmware image for the devices in
  // this collection. If the management is set to "device" this will only be
  // used if the target firmware isn't set on the device itself.
  google.protobuf.StringValue target_firmware_id = 2;
  // The firmware management settings for a collection can either be "disabled",
  // ie there is no firmware management for this collection, "collection";
  // devices are managed through the settings on the collection or "device"
  // where each device is configured individual.
  enum FirmwareManagement {
    unspecified = 0;
    disabled = 1;
    collection = 2;
    device = 3;
  }
  FirmwareManagement management = 3;
};

// Collection object
message Collection {
  // The ID of the collection. This is assigned by the backend.
  google.protobuf.StringValue collection_id = 1;
  // The team ID that owns the collection. This field is required. When you
  // create new collections the default is to use your private team ID.
  google.protobuf.StringValue team_id = 2;
  // Field mask settings for the collection
  FieldMask field_mask = 3;
  // Firmware settings for the collection
  CollectionFirmware firmware = 4;
  // Tags for the collection. Tags are metadata fields that you can assign to
  // the collection.
  map<string, string> tags = 5;
};

// NetworkMetadata object
message NetworkMetadata {
  // The network metadata for devices.
  google.protobuf.StringValue allocated_ip = 1;
  google.protobuf.Int64Value allocated_at = 2;
  google.protobuf.Int64Value cell_id = 3;
};

// FirmwareMetadata object
message FirmwareMetadata {
  google.protobuf.StringValue current_firmware_id = 1;
  google.protobuf.StringValue target_firmware_id = 2;
  google.protobuf.StringValue firmware_version = 3;
  google.protobuf.StringValue serial_number = 4;
  google.protobuf.StringValue model_number = 5;
  google.protobuf.StringValue manufacturer = 6;

  // Side note: The mixed case in the enum is to be backwards compatible with
  // the console. There's a whole discussion on this topic and everyone is
  // technically correct but the JSON conversion is basically braindead for
  // the jsonpb package. Much head banging.

  // State of firmware. Note that this field is case sensitive. I'm sorry about
  // this
  enum FirmwareState {
    Unknown = 0;
    Current = 1;
    Pending = 2;
    Initializing = 3;
    TimedOut = 4;
    Error = 5;
    Downloading = 6;
    Downloaded = 7;   // unused but exists in old data
    Reverted = 8;     // unused but should be used
    UpdateFailed = 9; // unused but exists in old data
    Completed = 10;   // unused but exists in old data
  };
  google.protobuf.StringValue state = 7;
  google.protobuf.StringValue state_message = 8;
};

// DeviceMetadata request object
message DeviceMetadata {};

// Device object
message Device {
  // The device ID is assigned by the backend.
  google.protobuf.StringValue device_id = 1;
  // This is the containing collection
  google.protobuf.StringValue collection_id = 2;
  // The IMSI is the unique ID for the (e|nu|whatever)SIM card on your device.
  // This is the primary identifier for your device on the network.
  google.protobuf.StringValue imsi = 3;
  // The IMEI number is the unique ID for your hardware as seen by the network.
  // Obviously you might have a completely different view on things.
  google.protobuf.StringValue imei = 4;
  // Tags are metadata for the device that you can set. These are just
  // strings.
  map<string, string> tags = 5;
  // Network metadata for the device
  NetworkMetadata network = 6;
  // Firmware metadata for the device
  FirmwareMetadata firmware = 7;
};

// There's a separate request for devices when doing updates. Since it is
// possible to change the collection for a device we'll need a reference to
// the existing collection *and* the new collection ID. Also the

// Updating the device
message UpdateDeviceRequest {
  google.protobuf.StringValue existing_collection_id = 1;

  google.protobuf.StringValue device_id = 2;

  // The collection id for the device. This field is optional and can be
  // omitted if the collection id isn't changed. When changing to a new
  // collection you must be an owner of the other collection, ie an
  // administrator of the team that owns the new collection.
  google.protobuf.StringValue collection_id = 3;

  // The IMSI is the unique ID for the (e|nu|whatever)SIM card on your device.
  // This is the primary identifier for your device on the network.
  google.protobuf.StringValue imsi = 4;

  // The IMEI number is the unique ID for your hardware as seen by the network.
  // Obviously you might have a completely different view on things.
  google.protobuf.StringValue imei = 5;

  // Tags are metadata for the device that you can set. These are just
  // strings.
  map<string, string> tags = 6;

  // Firmware metadata for the device
  FirmwareMetadata firmware = 7;
};

message UDPMetadata {
  google.protobuf.Int32Value local_port = 1;
  google.protobuf.Int32Value remote_port = 2;
};

message CoAPMetadata {
  google.protobuf.StringValue code = 1;
  google.protobuf.StringValue path = 2;
};

// The output data message contains payload plus metadata for a payload received
// from a device.
message OutputDataMessage {
  enum OutputMessageType {
    unknown = 0;
    keepalive = 1;
    data = 2;
  };
  OutputMessageType type = 1;
  Device device = 2;
  bytes payload = 3;
  // This *will* roll over in a few years but we'll handle it by creating
  // new clients. The current nbiot-client doesn't like strings for int64
  google.protobuf.Int32Value received = 4;
  string transport = 5;
  UDPMetadata udp_meta_data = 6;
  CoAPMetadata coap_meta_data = 7;
};

// The structure below might look a bit wonky but it's all in the name of
// backwards compatibility.

// Output configuration.
message OutputConfig {
  // Webhook configuration: URL for host
  google.protobuf.StringValue url = 1;
  // Webhook configuration: Basic authorization user name
  google.protobuf.StringValue basic_auth_user = 2;
  // Webhook configuration: Basic authorization password
  google.protobuf.StringValue basic_auth_pass = 3;
  // Webhook configuration: Custom header name for request
  google.protobuf.StringValue custom_header_name = 4;
  // Webhook configuration: Custom header value
  google.protobuf.StringValue custom_header_value = 5;
  // UDP configuration: Host name
  google.protobuf.StringValue host = 6;
  // UDP configuration: Port number
  google.protobuf.Int32Value port = 7;
  // IFTTT configuration: Key to use
  google.protobuf.StringValue key = 8;
  // IFTTT configuration: Event name
  google.protobuf.StringValue event_name = 9;
  // IFTTT configuration: Send payload as is. Base64 is the default
  google.protobuf.BoolValue as_is_payload = 10;
  // MQTT configuration: Name of endpoint (use tcp:// for unencrypted, tls://
  // for TLS. TLS is the default)
  google.protobuf.StringValue endpoint = 11;
  // MQTT configuration: Disable certificate checks. Default is off.
  google.protobuf.BoolValue disable_cert_check = 12;
  // MQTT configuration: Username for MQTT broker
  google.protobuf.StringValue username = 13;
  // MQTT configuration: Password for broker
  google.protobuf.StringValue password = 14;
  // MQTT configuration: Client ID
  google.protobuf.StringValue client_id = 15;
  // MQTT configuration: Topic name
  google.protobuf.StringValue topic_name = 16;
};

// Output resource. Configuration
message Output {
  enum Type {
    // The undefined output type is an invalid type
    undefined = 0;
    webhook = 1;
    udp = 2;
    mqtt = 3;
    ifttt = 4;
  };
  google.protobuf.StringValue output_id = 1;
  google.protobuf.StringValue collection_id = 2;
  Type type = 3;
  OutputConfig config = 4;
  google.protobuf.BoolValue enabled = 5;
  map<string, string> tags = 6;
};

message Token {
  google.protobuf.StringValue resource = 1;
  google.protobuf.BoolValue write = 2;
  google.protobuf.StringValue token = 3;
  map<string, string> tags = 4;
};

message Member {
  google.protobuf.StringValue user_id = 1;
  google.protobuf.StringValue team_id = 2;
  google.protobuf.StringValue role = 3;
  google.protobuf.StringValue name = 4;
  google.protobuf.StringValue email = 5;
  google.protobuf.StringValue phone = 6;
  google.protobuf.StringValue avatar_url = 7;
  google.protobuf.StringValue connect_id = 8;
  google.protobuf.StringValue git_hub_login = 9;
  google.protobuf.BoolValue verified_email = 10;
  google.protobuf.BoolValue verified_phone = 11;
  google.protobuf.StringValue auth_type = 12;
};

message MemberList { repeated Member members = 1; };

message Team {
  google.protobuf.StringValue team_id = 1;
  map<string, string> tags = 2;
  repeated Member members = 3;
};

// Note that the image_id isn't quite consistent here.

message Firmware {
  google.protobuf.StringValue image_id = 1;
  google.protobuf.StringValue version = 2;
  google.protobuf.StringValue filename = 3;
  google.protobuf.StringValue sha256 = 4;
  google.protobuf.Int32Value length = 5;
  google.protobuf.StringValue collection_id = 6;
  google.protobuf.Int64Value created = 7;
  map<string, string> tags = 8;
};

// Consider splitting into two objects, one for device, one for collection
message ListMessagesRequest {
  // The collection to query
  google.protobuf.StringValue collection_id = 1;
  // The device ID. Ignored for requests on collection messages
  google.protobuf.StringValue device_id = 2;
  // The maximum number of messages to return. The default is 50. Absolute max
  // is 250.
  google.protobuf.Int32Value limit = 3;
  // Start time (in milliseconds since epoch)
  google.protobuf.Int64Value since = 4;
  // End time (in milliseconds since epoch)
  google.protobuf.Int64Value until = 5;
};

message ListMessagesResponse { repeated OutputDataMessage messages = 1; };

// Your user profile.
// You can change the contents of the user profile via the log in service you
// are using.
message UserProfile {
  google.protobuf.StringValue email = 1;
  google.protobuf.StringValue phone = 2;
  google.protobuf.BoolValue verified_email = 3;
  google.protobuf.BoolValue verified_phone = 4;
  google.protobuf.StringValue avatar_url = 5;
  google.protobuf.StringValue name = 6;
  google.protobuf.StringValue profile_url = 7;
  google.protobuf.StringValue github_login = 82;
  google.protobuf.StringValue provider = 9;
  google.protobuf.StringValue logout_url = 10;
  google.protobuf.StringValue connect_id = 11;
};

// ###########################################################################
// Collection resource
// ###########################################################################

// Delete a collection
message DeleteCollectionRequest {
  // The ID of the collection you want to delete
  google.protobuf.StringValue collection_id = 1;
};

// List the collection you have access to
message ListCollectionRequest {};

// Collection list. The list contains all the collections you have access to.
message ListCollectionResponse { repeated Collection collections = 1; };

// Retrieve a single collection
message RetrieveCollectionRequest {
  // The collection ID of the collection you are requesting
  google.protobuf.StringValue collection_id = 1;
};

message MessageStreamRequest {
  google.protobuf.StringValue collection_id = 1;
  google.protobuf.StringValue device_id = 2;
}

// ###########################################################################
// Device resource
// ###########################################################################

message DeviceRequest {
  google.protobuf.StringValue collection_id = 1;
  google.protobuf.StringValue device_id = 2;
};

message ListDevicesRequest { google.protobuf.StringValue collection_id = 1; };

message ListDevicesResponse { repeated Device devices = 1; };

message ClearFirmwareErrorResponse {};

// Send a message to one or more devices
message SendMessageRequest {
  google.protobuf.StringValue collection_id = 1;
  google.protobuf.StringValue device_id = 2;
  google.protobuf.Int32Value port = 3;
  bytes payload = 4;

  // Valid transports are "udp", "coap", "coap-pull", "udp-pull", "coap-push",
  // "udp-push".
  // "udp" is equivalent to "udp-push" and "coap" is equivalent to "coap-push".
  // Push messages are sent unsolicited to the device wheil pull messages are
  // sent whenever the device wither sends data upstream (for UDP) or does a
  // CoAP request to the CoAP service in Horde.
  google.protobuf.StringValue transport = 5;
  google.protobuf.StringValue coap_path = 6;
};

//
message SendMessageResponse {};

// Error reported when message has failed to send to a device
message MessageSendResult {
  google.protobuf.StringValue device_id = 1;
  google.protobuf.StringValue message = 2;
};

// Broadcast message result. The errors array contains the list of errors
// ocurred when sending a message.
message MultiSendMessageResponse {
  repeated MessageSendResult errors = 1;
  int32 sent = 2;
  int32 failed = 3;
};

// ###########################################################################
// Firmware resources
// ###########################################################################
message FirmwareRequest {
  google.protobuf.StringValue collection_id = 1;
  google.protobuf.StringValue image_id = 2;
};

message ListFirmwareRequest { google.protobuf.StringValue collection_id = 1; };

message ListFirmwareResponse { repeated Firmware images = 1; };

message FirmwareUsageResponse {
  google.protobuf.StringValue image_id = 1; // Yes it is inconsistent
  repeated string targeted = 2;
  repeated string current = 3;
};

message CreateFirmwareRequest {
  google.protobuf.StringValue collection_id = 1;
  bytes image = 2;
  google.protobuf.StringValue version = 3;
  google.protobuf.StringValue filename = 4;
  map<string, string> tags = 5;
}

// ###########################################################################
// Output resources
// ###########################################################################

message ListOutputResponse {
  google.protobuf.StringValue collection_id = 1;
  repeated Output outputs = 2;
};

message ListOutputRequest { google.protobuf.StringValue collection_id = 1; };

message OutputRequest {
  google.protobuf.StringValue collection_id = 1;
  google.protobuf.StringValue output_id = 2;
};

message OutputLogEntry {
  google.protobuf.Int64Value time = 1;
  google.protobuf.StringValue message = 2;
  google.protobuf.Int32Value repeated = 3;
};

message OutputLogs { repeated OutputLogEntry logs = 1; };

message OutputStatus {
  google.protobuf.StringValue collection_id = 1;
  google.protobuf.StringValue output_id = 2;
  google.protobuf.BoolValue enabled = 3;
  google.protobuf.Int32Value error_count = 4;
  google.protobuf.Int32Value forwarded = 5;
  google.protobuf.Int32Value received = 6;
  google.protobuf.Int32Value retransmits = 7;
};

// ###########################################################################
// System resources
// ###########################################################################

// Field mask settings
message FieldMask {
  google.protobuf.BoolValue imsi = 1;
  google.protobuf.BoolValue imei = 2;
  google.protobuf.BoolValue msisdn = 3;
  google.protobuf.BoolValue location = 4;
};

message SystemInfoRequest {};

// System information structure
message SystemInfoResponse {
  google.protobuf.StringValue version = 1;
  google.protobuf.StringValue build_date = 2;
  google.protobuf.StringValue release_name = 3;
  FieldMask default_field_mask = 4;
  FieldMask forced_field_mask = 5;
};

// The collection dump
message DumpedCollection {
  Collection collection = 1;
  repeated DumpedDevice devices = 2;
  repeated Output outputs = 3;
};

// The device dump
message DumpedDevice {
  // The device itself
  Device device = 1;
  // The data for the device
  repeated OutputDataMessage data = 2;
};

message DataDumpRequest {};

// This is the documentation for the data dump response
message DataDumpResponse {
  // This is the array of collections
  repeated DumpedCollection collections = 1;

  // This is your user profile
  UserProfile profile = 2;

  // This is your teams
  repeated Team teams = 3;

  // This is your tokens
  repeated Token tokens = 4;
};

message UserProfileRequest {};

// ###########################################################################
// Team resources
// ###########################################################################

message TeamRequest { google.protobuf.StringValue team_id = 1; };

message ListTeamRequest {};
message TeamList { repeated Team teams = 1; };

message MemberRequest {
  google.protobuf.StringValue team_id = 1;
  google.protobuf.StringValue user_id = 2;
};

message Invite {
  google.protobuf.StringValue code = 1;
  google.protobuf.Int64Value created_at = 2;
};

message InviteList { repeated Invite invites = 1; };

message InviteRequest {
  google.protobuf.StringValue team_id = 1;
  google.protobuf.StringValue code = 2;
};

message AcceptInviteRequest { google.protobuf.StringValue code = 1; };
message DeleteInviteResponse {};

// ###########################################################################
// Token resources
// ###########################################################################

message DeleteTokenRequest { google.protobuf.StringValue token = 1; };

message DeleteTokenResponse {};

message ListTokenRequest {};

message TokenList { repeated Token tokens = 1; };

message TokenRequest { google.protobuf.StringValue token = 1; };

// Horde service
service Horde {

  // Create a new collection. The returned collection is the collection stored
  // in the backend. Defaults have been set. There are no required fields in a
  // collection
  rpc CreateCollection(Collection) returns (Collection) {
    option (google.api.http) = {
      post : "/collections"
      body : "*"
    };
  };
  // Update the collection
  rpc UpdateCollection(Collection) returns (Collection) {
    option (google.api.http) = {
      patch : "/collections/{collection_id}"
      body : "*"
    };
  };
  // Delete a collection. You must have read and write access to the collection
  rpc DeleteCollection(DeleteCollectionRequest) returns (Collection) {
    option (google.api.http) = {
      delete : "/collections/{collection_id}"
    };
  };
  // List the collections you have access to.
  rpc ListCollections(ListCollectionRequest) returns (ListCollectionResponse) {
    option (google.api.http) = {
      get : "/collections"
    };
  };
  // Retrieve a single collection
  rpc RetrieveCollection(RetrieveCollectionRequest) returns (Collection) {
    option (google.api.http) = {
      get : "/collections/{collection_id}"
    };
  };

  // List messages sent by the devices in this collection.
  rpc ListCollectionMessages(ListMessagesRequest)
      returns (ListMessagesResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/data"
    };
  };

  // Broadcast a message to all devices in the collection. This request will
  // always succeed if the collection exists, even if there are one or more send
  // errors. Individual errors are returned as an array of error messages in the
  // response. Use equivalent to resource for devices to send a message to
  // single device.
  rpc BroadcastMessage(SendMessageRequest) returns (MultiSendMessageResponse) {
    option (google.api.http) = {
      post : "/collections/{collection_id}/to"
      body : "*"
    };
  };

  // Get a stream of messages. If the device ID is set on the request the stream
  // will be limited to only messages from that particular device.
  rpc MessageStream(MessageStreamRequest) returns (stream OutputDataMessage) {}

  // List tags on collection.
  rpc ListCollectionTags(TagRequest) returns (TagResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/tags"
    };
  };

  // Update tags on token. This will add and update tags. Existing tags that
  // aren't updated or added will be kept. If a tag has a blank value it will
  // be removed.
  rpc UpdateCollectionTags(UpdateTagRequest) returns (TagResponse) {
    option (google.api.http) = {
      patch : "/collections/{collection_id}/tags"
      body : "*"
    };
  };

  // Get the value of a particular tag
  rpc GetCollectionTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/tags/{name}"
    };
  }

  // Delete a tag from the collection
  rpc DeleteCollectionTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      delete : "/collections/{collection_id}/tags/{name}"
    };
  };

  // Update a single tag value. If the tag value is empty the tag will be
  // removed.
  rpc UpdateCollectionTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      patch : "/collections/{collection_id}/tags/{name}"
      body : "value"
    };
  };

  // Create a new device. This will add a device to the collection. You must
  // have write access to the collection.
  rpc CreateDevice(Device) returns (Device) {
    option (google.api.http) = {
      post : "/collections/{collection_id}/devices"
      body : "*"
    };
  };

  // Retrieve the device
  rpc RetrieveDevice(DeviceRequest) returns (Device) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/devices/{device_id}"
    };
  };

  // Update the device
  rpc UpdateDevice(UpdateDeviceRequest) returns (Device) {
    option (google.api.http) = {
      patch : "/collections/{existing_collection_id}/devices/{device_id}"
      body : "*"
    };
  };

  // Remove a device
  rpc DeleteDevice(DeviceRequest) returns (Device) {
    option (google.api.http) = {
      delete : "/collections/{collection_id}/devices/{device_id}"
    };
  };

  // List the devices
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/devices"
    };
  };

  // List messages sent by the device
  rpc ListDeviceMessages(ListMessagesRequest) returns (ListMessagesResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/devices/{device_id}/data"
    };
  };

  // Send a message to the device
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {
    option (google.api.http) = {
      post : "/collections/{collection_id}/devices/{device_id}/to"
      body : "*"
    };
  };

  rpc ClearFirmwareError(DeviceRequest) returns (ClearFirmwareErrorResponse) {
    option (google.api.http) = {
      delete : "/collections/{collection_id}/devices/{device_id}/fwerror"
    };
  };

  // List tags on device.
  rpc ListDeviceTags(TagRequest) returns (TagResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/devices/{identifier}/tags"
    };
  };

  // Update tags on device. This will add and update tags. Existing tags that
  // aren't updated or added will be kept. If a tag has a blank value it will
  // be removed.
  rpc UpdateDeviceTags(UpdateTagRequest) returns (TagResponse) {
    option (google.api.http) = {
      patch : "/collections/{collection_id}/devices/{identifier}/tags"
      body : "*"
    };
  };

  // Get the value of a particular tag
  rpc GetDeviceTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/devices/{identifier}/tags/{name}"
    };
  }

  // Delete a tag from its name.
  rpc DeleteDeviceTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      delete : "/collections/{collection_id}/devices/{identifier}/tags/{name}"
    };
  };

  // Update a single tag value. If the tag value is empty the tag will be
  // removed.
  rpc UpdateDeviceTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      patch : "/collections/{collection_id}/devices/{identifier}/tags/{name}"
      body : "value"
    };
  };

  // Create a new firmware image. This is also invoked by the custom HTTP
  // uploader if the POST uses multipart/formdata for the request.
  rpc CreateFirmware(CreateFirmwareRequest) returns (Firmware) {
    option (google.api.http) = {
      post : "/collections/{collection_id}/firmware"
      body : "*"
    };
  };

  rpc RetrieveFirmware(FirmwareRequest) returns (Firmware) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/firmware/{image_id}"
    };
  };

  rpc UpdateFirmware(Firmware) returns (Firmware) {
    option (google.api.http) = {
      patch : "/collections/{collection_id}/firmware/{image_id}"
      body : "*"
    };
  };

  rpc DeleteFirmware(FirmwareRequest) returns (Firmware) {
    option (google.api.http) = {
      delete : "/collections/{collection_id}/firmware/{image_id}"
    };
  };

  rpc ListFirmware(ListFirmwareRequest) returns (ListFirmwareResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/firmware"
    };
  };

  rpc FirmwareUsage(FirmwareRequest) returns (FirmwareUsageResponse) {
    option (google.api.http) = {
      patch : "/collections/{collection_id}/firmware/{image_id}/usage"
    };
  };

  // List tags on firmware image.
  rpc ListFirmwareTags(TagRequest) returns (TagResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/firmware/{identifier}/tags"
    };
  };

  // Update tags on firmware images
  rpc UpdateFirmwareTags(UpdateTagRequest) returns (TagResponse) {
    option (google.api.http) = {
      patch : "/collections/{collection_id}/firmware/{identifier}/tags"
      body : "*"
    };
  };

  // Get the value of a particular tag
  rpc GetFirmwareTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/firmware/{identifier}/tags/{name}"
    };
  }

  // Delete a tag from its name.
  rpc DeleteFirmwareTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      delete : "/collections/{collection_id}/firmware/{identifier}/tags/{name}"
    };
  };

  // Update a single tag value. If the tag value is empty the tag will be
  // removed.
  rpc UpdateFirmwareTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      patch : "/collections/{collection_id}/firmware/{identifier}/tags/{name}"
      body : "value"
    };
  };

  // Create a new output
  rpc CreateOutput(Output) returns (Output) {
    option (google.api.http) = {
      post : "/collections/{collection_id}/outputs"
      body : "*"
    };
  };
  // Retrieve an output
  rpc RetrieveOutput(OutputRequest) returns (Output) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/outputs/{output_id}"
    };
  };
  // Update output. Running outputs will be restarted if required. Note that
  // the collection ID can't be changed on an existing output.
  rpc UpdateOutput(Output) returns (Output) {
    option (google.api.http) = {
      patch : "/collections/{collection_id}/outputs/{output_id}"
      body : "*"
    };
  };
  // Delete output
  rpc DeleteOutput(OutputRequest) returns (Output) {
    option (google.api.http) = {
      delete : "/collections/{collection_id}/outputs/{output_id}"
    };
  };
  // Get a list of outputs
  rpc ListOutputs(ListOutputRequest) returns (ListOutputResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/outputs"
    };
  };
  // Get logs for output
  rpc Logs(OutputRequest) returns (OutputLogs) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/outputs/{output_id}/logs"
    };
  };
  // Get output status
  rpc Status(OutputRequest) returns (OutputStatus) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/outputs/{output_id}/status"
    };
  };

  // List tags on token.
  rpc ListOutputTags(TagRequest) returns (TagResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/outputs/{identifier}/tags"
    };
  };

  // Update tags on output.
  rpc UpdateOutputTags(UpdateTagRequest) returns (TagResponse) {
    option (google.api.http) = {
      patch : "/collections/{collection_id}/outputs/{identifier}/tags"
      body : "*"
    };
  };

  // Get the value of a particular tag
  rpc GetOutputTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      get : "/collections/{collection_id}/outputs/{identifier}/tags/{name}"
    };
  }

  // Delete a tag from its name.
  rpc DeleteOutputTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      delete : "/collections/{collection_id}/outputs/{identifier}/tags/{name}"
    };
  };

  // Update a single tag value. If the tag value is empty the tag will be
  // removed.
  rpc UpdateOutputTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      patch : "/collections/{collection_id}/outputs/{identifier}/tags/{name}"
      body : "value"
    };
  };

  // Get system information
  rpc GetSystemInfo(SystemInfoRequest) returns (SystemInfoResponse) {
    option (google.api.http) = {
      get : "/system"
    };
  };

  // DataDump does a complete data dump of your data, devices, outputs and
  // collections.
  rpc DataDump(DataDumpRequest) returns (DataDumpResponse) {
    option (google.api.http) = {
      post : "/datadump"
      body : "*"
    };
  };

  // Get the profile of the logged in user.
  rpc GetUserProfile(UserProfileRequest) returns (UserProfile) {
    option (google.api.http) = {
      get : "/profile"
    };
  };
  // Create a new team.
  rpc CreateTeam(Team) returns (Team) {
    option (google.api.http) = {
      post : "/teams"
      body : "*"
    };
  };

  // Retrieve a team
  rpc RetrieveTeam(TeamRequest) returns (Team) {
    option (google.api.http) = {
      get : "/teams/{team_id}"
    };
  };

  // List the team members.
  rpc RetrieveTeamMembers(TeamRequest) returns (MemberList) {
    option (google.api.http) = {
      get : "/teams/{team_id}/members"
    };
  };

  // Retrieve a member of the team.
  rpc RetrieveMember(MemberRequest) returns (Member) {
    option (google.api.http) = {
      get : "/teams/{team_id}/members/{user_id}"
    };
  };

  // Update member settings. You must be an administrator to do this.
  rpc UpdateMember(Member) returns (Member) {
    option (google.api.http) = {
      patch : "/teams/{team_id}/members/{user_id}"
      body : "*"
    };
  };

  // Remove a member from the team. You must be an administrator to do this. You
  // can't remove yourself from the team.
  rpc DeleteMember(MemberRequest) returns (Member) {
    option (google.api.http) = {
      delete : "/teams/{team_id}/members/{user_id}"
    };
  };

  // Update the team. You must be an administrator of the team to edit it.
  rpc UpdateTeam(Team) returns (Team) {
    option (google.api.http) = {
      patch : "/teams/{team_id}"
      body : "*"
    };
  };

  // Remove a team. You must be administrator for the team and the team can't
  // have any members besides you.
  rpc DeleteTeam(TeamRequest) returns (Team) {
    option (google.api.http) = {
      delete : "/teams/{team_id}"
    };
  };

  // List all teams that you are a member of.
  rpc ListTeams(ListTeamRequest) returns (TeamList) {
    option (google.api.http) = {
      get : "/teams"
    };
  };

  // Genereate a new invite for the team
  rpc GenerateInvite(InviteRequest) returns (Invite) {
    option (google.api.http) = {
      post : "/teams/{team_id}/invites"
      body : "*"
    };
  };

  // List the invites generated for the team.
  rpc ListInvites(TeamRequest) returns (InviteList) {
    option (google.api.http) = {
      get : "/teams/{team_id}/invites"
    };
  };

  // Read a single invite from the team's set of non-redeemed invites.
  rpc RetrieveInvite(InviteRequest) returns (Invite) {
    option (google.api.http) = {
      get : "/teams/{team_id}/invites/{code}"
    };
  };

  // Accept an invite from another user. This will add the currently logged in
  // user to the team as a regular memeber. When the invite is accepted it is
  // removed from the team's invites and cannot be reused.
  rpc AcceptInvite(AcceptInviteRequest) returns (Team) {
    option (google.api.http) = {
      post : "/teams/accept"
      body : "*"
    };
  };

  // Delete an invite created earlier. You must be an administrator of the team
  // to perform this action
  rpc DeleteInvite(InviteRequest) returns (DeleteInviteResponse) {
    option (google.api.http) = {
      delete : "/teams/{team_id}/invites/{code}"
    };
  };

  // List tags on team.
  rpc ListTeamTags(TagRequest) returns (TagResponse) {
    option (google.api.http) = {
      get : "/teams/{identifier}/tags"
    };
  };

  // Update tags on team. This will add and update tags. Existing tags that
  // aren't updated or added will be kept. If a tag has a blank value it will
  // be removed.
  rpc UpdateTeamTags(UpdateTagRequest) returns (TagResponse) {
    option (google.api.http) = {
      patch : "/teams/{identifier}/tags"
      body : "*"
    };
  };

  // Get the value of a particular tag
  rpc GetTeamTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      get : "/teams/{identifier}/tags/{name}"
    };
  }

  // Delete a tag from the team.
  rpc DeleteTeamTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      delete : "/teams/{identifier}/tags/{name}"
    };
  };

  // Update a single tag value. If the tag value is empty the tag will be
  // removed.
  rpc UpdateTeamTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      patch : "/teams/{identifier}/tags/{name}"
      body : "value"
    };
  };

  rpc CreateToken(Token) returns (Token) {
    option (google.api.http) = {
      post : "/tokens"
      body : "*"
    };
  };

  rpc DeleteToken(DeleteTokenRequest) returns (DeleteTokenResponse) {
    option (google.api.http) = {
      delete : "/tokens/{token}"
    };
  };

  // TODO: Consider EmptyRequest here if it makes sense. From an expandability
  // point of view it's safer with a unique request here but this won't change
  // until the API is deprecated.

  rpc ListTokens(ListTokenRequest) returns (TokenList) {
    option (google.api.http) = {
      get : "/tokens"
    };
  };

  rpc RetrieveToken(TokenRequest) returns (Token) {
    option (google.api.http) = {
      get : "/tokens/{token}"
    };
  };

  rpc UpdateToken(Token) returns (Token) {
    option (google.api.http) = {
      patch : "/tokens/{token}"
      body : "*"
    };
  };

  //
  // Tags have support for the following methods: GET POST PATCH DELETE
  // .../tags : PATCH and GET
  // .../tags/{name}: GET, PATCH and DELETE
  // The interface for these methods are going to change due to the way
  // the grpc-gateway handles objects. The console is the only known client
  // to use the tags resource (and it doesn't use the direct access elements
  // at all, just the "tags" resource to set a name tag). The client libraries
  // use the tags/{name} resource to delete a tag but not to access it.
  //

  // List tags on token.
  rpc ListTokenTags(TagRequest) returns (TagResponse) {
    option (google.api.http) = {
      get : "/tokens/{identifier}/tags"
    };
  };

  // Update tags on token. This will add and update tags. Existing tags that
  // aren't updated or added will be kept. If a tag has a blank value it will
  // be removed.
  rpc UpdateTokenTags(UpdateTagRequest) returns (TagResponse) {
    option (google.api.http) = {
      patch : "/tokens/{identifier}/tags"
      body : "*"
    };
  };

  // Get the value of a particular tag
  rpc GetTokenTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      get : "/tokens/{identifier}/tags/{name}"
    };
  }

  // Delete a tag from its name.
  rpc DeleteTokenTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      delete : "/tokens/{identifier}/tags/{name}"
    };
  };

  // Update a single tag value. If the tag value is empty the tag will be
  // removed.
  rpc UpdateTokenTag(TagRequest) returns (TagValueResponse) {
    option (google.api.http) = {
      patch : "/tokens/{identifier}/tags/{name}"
      body : "value"
    };
  };
};

// Swagger options
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info : {title : "The Horde API";
description : "Because IoT Gateway is an even worse name." version : "2.0.0";
contact : {
name:
  "Exploratory Engineering";
url:
  "https://exploratory.engineering/";
email:
  "ee@telenordigital.com";
};
}
;
security_definitions : {
security : {
key:
  "ApiToken";
value : {
type:
  TYPE_API_KEY;
in:
  IN_HEADER;
name:
  "X-API-Token";
description:
  "API token that must be included in the headers unless you are logged in";
}
};
};
responses : {
key:
  "400";
value : {
description:
  "The request has an error.";
}
}
responses : {
key:
  "404";
value : {
description:
  "Couldn't find the resource.";
}
}
responses : {
key:
  "409";
value : {
description:
  "There's a resource conflict here.";
}
}
responses : {
key:
  "201";
value : {
description:
  "It's created.";
}
}
responses : {
key:
  "401";
value : {
description:
  "You can't touch this";
}
}
responses : {
key:
  "500";
value : {
description:
  "I'm sorry. We are broken";
}
}
}
;
